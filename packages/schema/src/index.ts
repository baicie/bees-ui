export default [
  {
    name: 'tabs',
    props: [
      {
        name: 'activeKey',
        description: "Current TabPane's key",
        ty: 'string',
        default: '',
      },
      {
        name: 'addIcon',
        description: 'Customize add icon, only works with `type="editable-card"`',
        ty: 'ReactNode',
        default: '`<PlusOutlined />`',
      },
      {
        name: 'animated',
        description: 'Whether to change tabs with animation.',
        ty: 'boolean \\',
        default: '{ inkBar: boolean, tabPane: boolean }',
      },
      {
        name: 'centered',
        description: 'Centers tabs',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'defaultActiveKey',
        description: "Initial active TabPane's key, if `activeKey` is not set",
        ty: 'string',
        default: '`The key of first tab`',
      },
      {
        name: 'hideAdd',
        description: 'Hide plus icon or not. Only works while `type="editable-card"`',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'indicator',
        description: 'Customize `size` and `align` of indicator',
        ty: '{ size?: number \\',
        default: '(origin: number) => number; align: `start` \\',
      },
      {
        name: 'items',
        description: 'Configure tab content',
        ty: '[TabItemType](#tabitemtype)',
        default: '[]',
      },
      {
        name: 'more',
        description: '自定义折叠菜单属性',
        ty: '[MoreProps](#moreprops)',
        default: "{ icon: `<EllipsisOutlined />` , trigger: 'hover' }",
      },
      {
        name: 'removeIcon',
        description: 'The custom icon of remove, only works with `type="editable-card"`',
        ty: 'ReactNode',
        default: '`<CloseOutlined />`',
      },
      {
        name: 'popupClassName',
        description: '`className` for more dropdown.',
        ty: 'string',
        default: '',
      },
      {
        name: 'renderTabBar',
        description: 'Replace the TabBar',
        ty: '(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement',
        default: '',
      },
      {
        name: 'size',
        description: 'Preset tab bar size',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'tabBarExtraContent',
        description: 'Extra content in tab bar',
        ty: 'ReactNode \\',
        default: '{left?: ReactNode, right?: ReactNode}',
      },
      {
        name: 'tabBarGutter',
        description: 'The gap between tabs',
        ty: 'number',
        default: '',
      },
      {
        name: 'tabBarStyle',
        description: 'Tab bar style object',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'tabPosition',
        description: 'Position of tabs',
        ty: '`top` \\',
        default: '`right` \\',
      },
      {
        name: 'destroyInactiveTabPane',
        description: 'Whether destroy inactive TabPane when change tab',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'type',
        description: 'Basic style of tabs',
        ty: '`line` \\',
        default: '`card` \\',
      },
      {
        name: 'closeIcon',
        description:
          'Customize close icon in TabPane\'s head. Only works while `type="editable-card"`. 5.7.0: close button will be hidden when setting to `null` or `false`',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'destroyInactiveTabPane',
        description: 'Whether destroy inactive TabPane when change tab',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'Set TabPane disabled',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'forceRender',
        description: 'Forced render of content in tabs, not lazy render after clicking on tabs',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'key',
        description: "TabPane's key",
        ty: 'string',
        default: '',
      },
      {
        name: 'label',
        description: "TabPane's head display text",
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'icon',
        description: "TabPane's head display icon",
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'children',
        description: "TabPane's head display content",
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'closable',
        description:
          'Whether a close (x) button is visible, Only works while `type="editable-card"`',
        ty: 'boolean',
        default: 'true',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Callback executed when active tab is changed',
        ty: '(activeKey: string) => void',
        default: '',
      },
      {
        name: 'onEdit',
        description:
          'Callback executed when tab is added or removed. Only works while `type="editable-card"`',
        ty: "(action === 'add' ? event : targetKey, action) => void",
        default: '',
      },
      {
        name: 'onTabClick',
        description: 'Callback executed when tab is clicked',
        ty: '(key: string, event: MouseEvent) => void',
        default: '',
      },
      {
        name: 'onTabScroll',
        description: 'Trigger when tab scroll',
        ty: '({ direction: `left` \\',
        default: '`right` \\',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'tree',
    props: [
      {
        name: 'allowDrop',
        description: 'Whether to allow dropping on the node',
        ty: '({ dropNode, dropPosition }) => boolean',
        default: '',
      },
      {
        name: 'autoExpandParent',
        description: 'Whether to automatically expand a parent treeNode',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'blockNode',
        description: 'Whether treeNode fill remaining horizontal space',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'checkable',
        description: 'Add a Checkbox before the treeNodes',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'checkedKeys',
        description:
          "(Controlled) Specifies the keys of the checked treeNodes (PS: When this specifies the key of a treeNode which is also a parent treeNode, all the children treeNodes of will be checked; and vice versa, when it specifies the key of a treeNode which is a child treeNode, its parent treeNode will also be checked. When `checkable` and `checkStrictly` is true, its object has `checked` and `halfChecked` property. Regardless of whether the child or parent treeNode is checked, they won't impact each other",
        ty: 'string\\[] \\',
        default: '{checked: string\\[], halfChecked: string\\[]}',
      },
      {
        name: 'checkStrictly',
        description:
          'Check treeNode precisely; parent treeNode and children treeNodes are not associated',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'defaultCheckedKeys',
        description: 'Specifies the keys of the default checked treeNodes',
        ty: 'string\\[]',
        default: '\\[]',
      },
      {
        name: 'defaultExpandAll',
        description: 'Whether to expand all treeNodes by default',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'defaultExpandedKeys',
        description: 'Specify the keys of the default expanded treeNodes',
        ty: 'string\\[]',
        default: '\\[]',
      },
      {
        name: 'defaultExpandParent',
        description: 'If auto expand parent treeNodes when init',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'defaultSelectedKeys',
        description: 'Specifies the keys of the default selected treeNodes',
        ty: 'string\\[]',
        default: '\\[]',
      },
      {
        name: 'disabled',
        description: 'Whether disabled the tree',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'draggable',
        description:
          'Specifies whether this Tree or the node is draggable. Use `icon: false` to disable drag handler icon',
        ty: 'boolean \\',
        default: '((node: DataNode) => boolean) \\',
      },
      {
        name: 'expandedKeys',
        description: '(Controlled) Specifies the keys of the expanded treeNodes',
        ty: 'string\\[]',
        default: '\\[]',
      },
      {
        name: 'fieldNames',
        description: 'Customize node title, key, children field name',
        ty: 'object',
        default: '{ title: `title`, key: `key`, children: `children` }',
      },
      {
        name: 'filterTreeNode',
        description:
          'Defines a function to filter (highlight) treeNodes. When the function returns `true`, the corresponding treeNode will be highlighted',
        ty: 'function(node)',
        default: '',
      },
      {
        name: 'height',
        description:
          'Config virtual scroll height. Will not support horizontal scroll when enable this',
        ty: 'number',
        default: '',
      },
      {
        name: 'icon',
        description: 'Insert a custom icon before the title. Need to set `showIcon` to true',
        ty: 'ReactNode \\',
        default: '(props) => ReactNode',
      },
      {
        name: 'loadData',
        description: 'Load data asynchronously',
        ty: 'function(node)',
        default: '',
      },
      {
        name: 'loadedKeys',
        description: '(Controlled) Set loaded tree nodes. Need work with `loadData`',
        ty: 'string\\[]',
        default: '\\[]',
      },
      {
        name: 'multiple',
        description: 'Allows selecting multiple treeNodes',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'rootStyle',
        description: 'Style on the root element',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'selectable',
        description: 'Whether can be selected',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'selectedKeys',
        description:
          '(Controlled) Specifies the keys of the selected treeNodes, multiple selection needs to set `multiple` to true',
        ty: 'string\\[]',
        default: '',
      },
      {
        name: 'showIcon',
        description: 'Controls whether to display the `icon` node, no default style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'showLine',
        description: 'Shows a connecting line',
        ty: 'boolean \\',
        default: '{showLeafIcon: ReactNode \\',
      },
      {
        name: 'switcherIcon',
        description:
          'Customize expand/collapse icons for tree nodes (With default rotate angular style)',
        ty: 'ReactNode \\',
        default: '((props: AntTreeNodeProps) => ReactNode)',
      },
      {
        name: 'switcherLoadingIcon',
        description: 'Customize loading icons for tree nodes',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'titleRender',
        description: 'Customize tree node title render',
        ty: '(nodeData) => ReactNode',
        default: '',
      },
      {
        name: 'treeData',
        description:
          'The treeNodes data Array, if set it then you need not to construct children TreeNode. (key should be unique across the whole array)',
        ty: 'array&lt;{ key, title, children, \\[disabled, selectable] }>',
        default: '',
      },
      {
        name: 'virtual',
        description: 'Disable virtual scroll when set to false',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'checkable',
        description: 'When Tree is checkable, set TreeNode display Checkbox or not',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'disableCheckbox',
        description: 'Disables the checkbox of the treeNode',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'Disables the treeNode',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'icon',
        description:
          'Customize icon. When you pass component, whose render will receive full TreeNode props as component props',
        ty: 'ReactNode \\',
        default: '(props) => ReactNode',
      },
      {
        name: 'isLeaf',
        description:
          'Determines if this is a leaf node(effective when `loadData` is specified). `false` will force trade TreeNode as a parent node',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'key',
        description:
          'Used with (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys. P.S.: It must be unique in all of treeNodes of the tree',
        ty: 'string',
        default: '(internal calculated position of treeNode)',
      },
      {
        name: 'selectable',
        description: 'Set whether the treeNode can be selected',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'expandAction',
        description: 'Directory open logic, optional: false \\',
        ty: '`click` \\',
        default: '`doubleClick`',
      },
      {
        name: 'scrollTo({ key: string \\',
        description: "number; align?: 'top' \\",
        ty: "'bottom' \\",
        default: "'auto'; offset?: number })",
      },
    ],
    events: [
      {
        name: 'onCheck',
        description: 'Callback function for when the onCheck event occurs',
        ty: 'function(checkedKeys, e:{checked: boolean, checkedNodes, node, event, halfCheckedKeys})',
        default: '',
      },
      {
        name: 'onDragEnd',
        description: 'Callback function for when the onDragEnd event occurs',
        ty: 'function({event, node})',
        default: '',
      },
      {
        name: 'onDragEnter',
        description: 'Callback function for when the onDragEnter event occurs',
        ty: 'function({event, node, expandedKeys})',
        default: '',
      },
      {
        name: 'onDragLeave',
        description: 'Callback function for when the onDragLeave event occurs',
        ty: 'function({event, node})',
        default: '',
      },
      {
        name: 'onDragOver',
        description: 'Callback function for when the onDragOver event occurs',
        ty: 'function({event, node})',
        default: '',
      },
      {
        name: 'onDragStart',
        description: 'Callback function for when the onDragStart event occurs',
        ty: 'function({event, node})',
        default: '',
      },
      {
        name: 'onDrop',
        description: 'Callback function for when the onDrop event occurs',
        ty: 'function({event, node, dragNode, dragNodesKeys})',
        default: '',
      },
      {
        name: 'onExpand',
        description: 'Callback function for when a treeNode is expanded or collapsed',
        ty: 'function(expandedKeys, {expanded: boolean, node})',
        default: '',
      },
      {
        name: 'onLoad',
        description: 'Callback function for when a treeNode is loaded',
        ty: 'function(loadedKeys, {event, node})',
        default: '',
      },
      {
        name: 'onRightClick',
        description: 'Callback function for when the user right clicks a treeNode',
        ty: 'function({event, node})',
        default: '',
      },
      {
        name: 'onSelect',
        description: 'Callback function for when the user clicks a treeNode',
        ty: 'function(selectedKeys, e:{selected: boolean, selectedNodes, node, event})',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'tree-select',
    props: [
      {
        name: 'allowClear',
        description: 'Customize clear icon',
        ty: 'boolean \\',
        default: '{ clearIcon?: ReactNode }',
      },
      {
        name: 'autoClearSearchValue',
        description: 'If auto clear search input value when multiple select is selected/deselected',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'defaultValue',
        description: 'To set the initial selected treeNode(s)',
        ty: 'string \\',
        default: 'string\\[]',
      },
      {
        name: 'disabled',
        description: 'Disabled or not',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'popupClassName',
        description: 'The className of dropdown menu',
        ty: 'string',
        default: '',
      },
      {
        name: 'popupMatchSelectWidth',
        description:
          'Determine whether the popup menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll',
        ty: 'boolean \\',
        default: 'number',
      },
      {
        name: 'dropdownRender',
        description: 'Customize dropdown content',
        ty: '(originNode: ReactNode, props) => ReactNode',
        default: '',
      },
      {
        name: 'dropdownStyle',
        description: 'To set the style of the dropdown menu',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'fieldNames',
        description: 'Customize node label, value, children field name',
        ty: 'object',
        default: '{ label: `label`, value: `value`, children: `children` }',
      },
      {
        name: 'filterTreeNode',
        description:
          'Whether to filter treeNodes by input value. The value of `treeNodeFilterProp` is used for filtering by default',
        ty: 'boolean \\',
        default: 'function(inputValue: string, treeNode: TreeNode) (should return boolean)',
      },
      {
        name: 'getPopupContainer',
        description:
          'To set the container of the dropdown menu. The default is to create a `div` element in `body`, you can reset it to the scrolling area and make a relative reposition. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010)',
        ty: 'function(triggerNode)',
        default: '() => document.body',
      },
      {
        name: 'labelInValue',
        description:
          'Whether to embed label in value, turn the format of value from `string` to {value: string, label: ReactNode, halfChecked: string\\[]}',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'listHeight',
        description: 'Config popup height',
        ty: 'number',
        default: '256',
      },
      {
        name: 'loadData',
        description:
          'Load data asynchronously. Will not load when filtering. Check FAQ for more info',
        ty: 'function(node)',
        default: '',
      },
      {
        name: 'maxTagCount',
        description: 'Max tag count to show. `responsive` will cost render performance',
        ty: 'number \\',
        default: '`responsive`',
      },
      {
        name: 'maxTagPlaceholder',
        description: 'Placeholder for not showing tags',
        ty: 'ReactNode \\',
        default: 'function(omittedValues)',
      },
      {
        name: 'maxTagTextLength',
        description: 'Max tag text length to show',
        ty: 'number',
        default: '',
      },
      {
        name: 'multiple',
        description: 'Support multiple or not, will be `true` when enable `treeCheckable`',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'notFoundContent',
        description: 'Specify content to show when no result matches',
        ty: 'ReactNode',
        default: '`Not Found`',
      },
      {
        name: 'placeholder',
        description: 'Placeholder of the select input',
        ty: 'string',
        default: '',
      },
      {
        name: 'placement',
        description: 'The position where the selection box pops up',
        ty: '`bottomLeft` `bottomRight` `topLeft` `topRight`',
        default: 'bottomLeft',
      },
      {
        name: 'searchValue',
        description: 'Work with `onSearch` to make search value controlled',
        ty: 'string',
        default: '',
      },
      {
        name: 'showCheckedStrategy',
        description:
          'The way show selected item in box when `treeCheckable` set. **Default:** just show child nodes. **`TreeSelect.SHOW_ALL`:** show all checked treeNodes (include parent treeNode). **`TreeSelect.SHOW_PARENT`:** show checked treeNodes (just show parent treeNode)',
        ty: '`TreeSelect.SHOW_ALL` \\',
        default: '`TreeSelect.SHOW_PARENT` \\',
      },
      {
        name: 'showSearch',
        description: 'Support search or not',
        ty: 'boolean',
        default: 'single: false \\',
      },
      {
        name: 'size',
        description: 'To set the size of the select input',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning'",
      },
      {
        name: 'suffixIcon',
        description: 'The custom suffix icon',
        ty: 'ReactNode',
        default: '`<DownOutlined />`',
      },
      {
        name: 'switcherIcon',
        description: 'Customize collapse/expand icon of tree node',
        ty: 'ReactNode \\',
        default: '((props: AntTreeNodeProps) => ReactNode)',
      },
      {
        name: 'tagRender',
        description: 'Customize tag render when `multiple`',
        ty: '(props) => ReactNode',
        default: '',
      },
      {
        name: 'treeCheckable',
        description: 'Whether to show checkbox on the treeNodes',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'treeCheckStrictly',
        description:
          'Whether to check nodes precisely (in the `checkable` mode), means parent and child nodes are not associated, and it will make `labelInValue` be true',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'treeData',
        description:
          'Data of the treeNodes, manual construction work is no longer needed if this property has been set(ensure the Uniqueness of each value)',
        ty: 'array&lt;{ value, title, children, \\[disabled, disableCheckbox, selectable, checkable] }>',
        default: '\\[]',
      },
      {
        name: 'treeDataSimpleMode',
        description:
          "Enable simple mode of treeData. Changes the `treeData` schema to: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...] where pId is parent node's id). It is possible to replace the default `id` and `pId` keys by providing object to `treeDataSimpleMode`",
        ty: 'boolean \\',
        default: 'object&lt;{ id: string, pId: string, rootPId: string }>',
      },
      {
        name: 'treeTitleRender',
        description: 'Customize tree node title render',
        ty: '(nodeData) => ReactNode',
        default: '',
      },
      {
        name: 'treeDefaultExpandAll',
        description: 'Whether to expand all treeNodes by default',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'treeDefaultExpandedKeys',
        description: 'Default expanded treeNodes',
        ty: 'string\\[]',
        default: '',
      },
      {
        name: 'treeExpandAction',
        description: 'Tree title open logic when click, optional: false \\',
        ty: '`click` \\',
        default: '`doubleClick`',
      },
      {
        name: 'treeExpandedKeys',
        description: 'Set expanded keys',
        ty: 'string\\[]',
        default: '',
      },
      {
        name: 'treeIcon',
        description:
          "Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to `true`",
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'treeLoadedKeys',
        description: '(Controlled) Set loaded tree nodes, work with `loadData` only',
        ty: 'string[]',
        default: '[]',
      },
      {
        name: 'treeLine',
        description: 'Show the line. Ref [Tree - showLine](/components/tree/#tree-demo-line)',
        ty: 'boolean \\',
        default: 'object',
      },
      {
        name: 'treeNodeFilterProp',
        description: 'Will be used for filtering if `filterTreeNode` returns true',
        ty: 'string',
        default: '`value`',
      },
      {
        name: 'treeNodeLabelProp',
        description: 'Will render as content of select',
        ty: 'string',
        default: '`title`',
      },
      {
        name: 'value',
        description: 'To set the current selected treeNode(s)',
        ty: 'string \\',
        default: 'string\\[]',
      },
      {
        name: 'variant',
        description: 'Variants of selector',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
      {
        name: 'virtual',
        description: 'Disable virtual scroll when set to false',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'Name',
        description: 'Description',
        ty: '',
        default: '',
      },
      {
        name: 'blur()',
        description: 'Remove focus',
        ty: '',
        default: '',
      },
      {
        name: 'focus()',
        description: 'Get focus',
        ty: '',
        default: '',
      },
      {
        name: 'checkable',
        description: 'When Tree is checkable, set TreeNode display Checkbox or not',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'disableCheckbox',
        description: 'Disables the checkbox of the treeNode',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'Disabled or not',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'isLeaf',
        description: 'Leaf node or not',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'key',
        description:
          'Required property (unless using `treeDataSimpleMode`), should be unique in the tree',
        ty: 'string',
        default: '',
      },
      {
        name: 'selectable',
        description: 'Whether can be selected',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'value',
        description:
          'Will be treated as `treeNodeFilterProp` by default, should be unique in the tree',
        ty: 'string',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description:
          'A callback function, can be executed when selected treeNodes or input value change',
        ty: 'function(value, label, extra)',
        default: '',
      },
      {
        name: 'onDropdownVisibleChange',
        description: 'Called when dropdown open',
        ty: 'function(open)',
        default: '',
      },
      {
        name: 'onSearch',
        description: 'A callback function, can be executed when the search input changes',
        ty: 'function(value: string)',
        default: '',
      },
      {
        name: 'onSelect',
        description: 'A callback function, can be executed when you select a treeNode',
        ty: 'function(value, node, extra)',
        default: '',
      },
      {
        name: 'onTreeExpand',
        description: 'A callback function, can be executed when treeNode expanded',
        ty: 'function(expandedKeys)',
        default: '',
      },
      {
        name: 'onPopupScroll',
        description: 'Called when dropdown scrolls',
        ty: '(event: UIEvent) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'rate',
    props: [
      {
        name: 'allowClear',
        description: 'Whether to allow clear when click again',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'allowHalf',
        description: 'Whether to allow semi selection',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'autoFocus',
        description: 'If get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'character',
        description: 'The custom character of rate',
        ty: 'ReactNode \\',
        default: '(RateProps) => ReactNode',
      },
      {
        name: 'className',
        description: 'The custom class name of rate',
        ty: 'string',
        default: '',
      },
      {
        name: 'count',
        description: 'Star count',
        ty: 'number',
        default: '5',
      },
      {
        name: 'defaultValue',
        description: 'The default value',
        ty: 'number',
        default: '0',
      },
      {
        name: 'disabled',
        description: 'If read only, unable to interact',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'keyboard',
        description: 'Support keyboard operation',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'style',
        description: 'The custom style object of rate',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'tooltips',
        description: 'Customize tooltip by each character',
        ty: 'string\\[]',
        default: '',
      },
      {
        name: 'value',
        description: 'The current value',
        ty: 'number',
        default: '',
      },
    ],
    events: [
      {
        name: 'onBlur',
        description: 'Callback when component lose focus',
        ty: 'function()',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Callback when select value',
        ty: 'function(value: number)',
        default: '',
      },
      {
        name: 'onFocus',
        description: 'Callback when component get focus',
        ty: 'function()',
        default: '',
      },
      {
        name: 'onHoverChange',
        description: 'Callback when hover item',
        ty: 'function(value: number)',
        default: '',
      },
      {
        name: 'onKeyDown',
        description: 'Callback when keydown on component',
        ty: 'function(event)',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'dropdown',
    props: [
      {
        name: 'arrow',
        description: 'Whether the dropdown arrow should be visible',
        ty: 'boolean \\',
        default: '{ pointAtCenter: boolean }',
      },
      {
        name: 'autoAdjustOverflow',
        description:
          'Whether to adjust dropdown placement automatically when dropdown is off screen',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'autoFocus',
        description: 'Focus element in `overlay` when opened',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'Whether the dropdown menu is disabled',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'destroyPopupOnHide',
        description: 'Whether destroy dropdown when hidden',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'dropdownRender',
        description: 'Customize dropdown content',
        ty: '(menus: ReactNode) => ReactNode',
        default: '',
      },
      {
        name: 'getPopupContainer',
        description:
          'To set the container of the dropdown menu. The default is to create a div element in body, but you can reset it to the scrolling area and make a relative reposition. [Example on CodePen](https://codepen.io/afc163/pen/zEjNOy?editors=0010)',
        ty: '(triggerNode: HTMLElement) => HTMLElement',
        default: '() => document.body',
      },
      {
        name: 'menu',
        description: 'The menu props',
        ty: '[MenuProps](/components/menu/#api)',
        default: '',
      },
      {
        name: 'overlayClassName',
        description: 'The class name of the dropdown root element',
        ty: 'string',
        default: '',
      },
      {
        name: 'overlayStyle',
        description: 'The style of the dropdown root element',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'placement',
        description:
          'Placement of popup menu: `bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight`',
        ty: 'string',
        default: '`bottomLeft`',
      },
      {
        name: 'trigger',
        description:
          "The trigger mode which executes the dropdown action. Note that hover can't be used on touchscreens",
        ty: 'Array&lt;`click`\\',
        default: '`hover`\\',
      },
      {
        name: 'open',
        description:
          'Whether the dropdown menu is currently open. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open))',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'buttonsRender',
        description: 'Custom buttons inside Dropdown.Button',
        ty: '(buttons: ReactNode\\[]) => ReactNode\\[]',
        default: '',
      },
      {
        name: 'loading',
        description: 'Set the loading status of button',
        ty: 'boolean \\',
        default: '{ delay: number }',
      },
      {
        name: 'danger',
        description: 'Set the danger status of button',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'icon',
        description: 'Icon (appears on the right)',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'size',
        description: 'Size of the button, the same as [Button](/components/button/#api)',
        ty: 'string',
        default: '`default`',
      },
      {
        name: 'type',
        description: 'Type of the button, the same as [Button](/components/button/#api)',
        ty: 'string',
        default: '`default`',
      },
    ],
    events: [
      {
        name: 'onOpenChange',
        description:
          'Called when the open state is changed. Not trigger when hidden by click item. Use `onVisibleChange` under 4.23.0 ([why?](/docs/react/faq#why-open))',
        ty: "(open: boolean, info: { source: 'trigger' \\",
        default: "'menu' }) => void",
      },
      {
        name: 'onClick',
        description:
          'The same as [Button](/components/button/#api): called when you click the button on the left',
        ty: '(event) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'drawer',
    props: [
      {
        name: 'Props',
        description: 'Description',
        ty: 'Type',
        default: 'Default',
      },
      {
        name: 'autoFocus',
        description: 'Whether Drawer should get focused after open',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'afterOpenChange',
        description: 'Callback after the animation ends when switching drawers',
        ty: 'function(open)',
        default: '',
      },
      {
        name: 'className',
        description:
          'Config Drawer Panel className. Use `rootClassName` if want to config top DOM style',
        ty: 'string',
        default: '',
      },
      {
        name: 'classNames',
        description: 'Semantic structure className',
        ty: '[Record<SemanticDOM, string>](#semantic-dom)',
        default: '',
      },
      {
        name: 'closeIcon',
        description:
          'Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false`',
        ty: 'ReactNode',
        default: '&lt;CloseOutlined />',
      },
      {
        name: 'destroyOnClose',
        description: 'Whether to unmount child components on closing drawer or not',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'extra',
        description: 'Extra actions area at corner',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'footer',
        description: 'The footer for Drawer',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'forceRender',
        description: 'Pre-render Drawer component forcibly',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'getContainer',
        description: 'mounted node and display window for Drawer',
        ty: 'HTMLElement \\',
        default: '() => HTMLElement \\',
      },
      {
        name: 'headerStyle',
        description: 'Style of the drawer header part',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'height',
        description: 'Placement is `top` or `bottom`, height of the Drawer dialog',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'keyboard',
        description: 'Whether support press esc to close',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'mask',
        description: 'Whether to show mask or not',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'maskClosable',
        description: 'Clicking on the mask (area outside the Drawer) to close the Drawer or not',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'placement',
        description: 'The placement of the Drawer',
        ty: '`top` \\',
        default: '`right` \\',
      },
      {
        name: 'push',
        description: 'Nested drawers push behavior',
        ty: 'boolean \\',
        default: '{ distance: string \\',
      },
      {
        name: 'rootStyle',
        description: 'Style of wrapper element which **contains mask** compare to `style`',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'style',
        description: 'Style of Drawer panel. Use `bodyStyle` if want to config body only',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'styles',
        description: 'Semantic structure style',
        ty: '[Record<SemanticDOM, CSSProperties>](#semantic-dom)',
        default: '',
      },
      {
        name: 'size',
        description: 'preset size of drawer, default `378px` and large `736px`',
        ty: "'default' \\",
        default: "'large'",
      },
      {
        name: 'title',
        description: 'The title for Drawer',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'loading',
        description: 'Show the Skeleton',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'open',
        description: 'Whether the Drawer dialog is visible or not',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'width',
        description: 'Width of the Drawer dialog',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'zIndex',
        description: 'The `z-index` of the Drawer',
        ty: 'number',
        default: '1000',
      },
      {
        name: 'drawerRender',
        description: 'Custom drawer content render',
        ty: '(node: ReactNode) => ReactNode',
        default: '',
      },
    ],
    events: [
      {
        name: 'onClose',
        description:
          'Specify a callback that will be called when a user clicks mask, close button or Cancel button',
        ty: 'function(e)',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'pagination',
    props: [
      {
        name: 'align',
        description: 'Align',
        ty: 'start \\',
        default: 'center \\',
      },
      {
        name: 'current',
        description: 'Current page number',
        ty: 'number',
        default: '',
      },
      {
        name: 'defaultCurrent',
        description: 'Default initial page number',
        ty: 'number',
        default: '1',
      },
      {
        name: 'defaultPageSize',
        description: 'Default number of data items per page',
        ty: 'number',
        default: '10',
      },
      {
        name: 'disabled',
        description: 'Disable pagination',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'hideOnSinglePage',
        description: 'Whether to hide pager on single page',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'itemRender',
        description: "To customize item's innerHTML",
        ty: "(page, type: 'page' \\",
        default: "'prev' \\",
      },
      {
        name: 'pageSize',
        description: 'Number of data items per page',
        ty: 'number',
        default: '',
      },
      {
        name: 'pageSizeOptions',
        description: 'Specify the sizeChanger options',
        ty: 'string\\[] \\',
        default: 'number\\[]',
      },
      {
        name: 'responsive',
        description:
          'If `size` is not specified, `Pagination` would resize according to the width of the window',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'showLessItems',
        description: 'Show less page items',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'showQuickJumper',
        description: 'Determine whether you can jump to pages directly',
        ty: 'boolean \\',
        default: '{ goButton: ReactNode }',
      },
      {
        name: 'showSizeChanger',
        description:
          'Determine whether to show `pageSize` select, it will be true when `total > 50`',
        ty: 'boolean \\',
        default: '[SelectProps](/components/select#api)',
      },
      {
        name: 'showTitle',
        description: "Show page item's title",
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'showTotal',
        description: 'To display the total number and range',
        ty: 'function(total, range)',
        default: '',
      },
      {
        name: 'simple',
        description: 'Whether to use simple mode',
        ty: 'boolean \\',
        default: '{ readOnly?: boolean }',
      },
      {
        name: 'size',
        description: 'Specify the size of `Pagination`, can be set to `small`',
        ty: '`default` \\',
        default: '`small`',
      },
      {
        name: 'total',
        description: 'Total number of data items',
        ty: 'number',
        default: '0',
      },
    ],
    events: [
      {
        name: 'onChange',
        description:
          'Called when the page number or `pageSize` is changed, and it takes the resulting page number and pageSize as its arguments',
        ty: 'function(page, pageSize)',
        default: '',
      },
      {
        name: 'onShowSizeChange',
        description: 'Called when `pageSize` is changed',
        ty: 'function(current, size)',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'form',
    props: [
      {
        name: 'colon',
        description:
          'Configure the default value of `colon` for Form.Item. Indicates whether the colon after the label is displayed (only effective when prop layout is horizontal)',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'disabled',
        description: 'Set form component disable, only available for antd components',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'component',
        description: 'Set the Form rendering element. Do not create a DOM node for `false`',
        ty: 'ComponentType \\',
        default: 'false',
      },
      {
        name: 'fields',
        description:
          'Control of form fields through state management (such as redux). Not recommended for non-strong demand. View [example](#form-demo-global-state)',
        ty: '[FieldData](#fielddata)\\[]',
        default: '',
      },
      {
        name: 'form',
        description:
          'Form control instance created by `Form.useForm()`. Automatically created when not provided',
        ty: '[FormInstance](#forminstance)',
        default: '',
      },
      {
        name: 'feedbackIcons',
        description: 'Can be passed custom icons while `Form.Item` element has `hasFeedback`',
        ty: '[FeedbackIcons](#feedbackicons)',
        default: '',
      },
      {
        name: 'initialValues',
        description: 'Set value by Form initialization or reset',
        ty: 'object',
        default: '',
      },
      {
        name: 'labelAlign',
        description: 'The text align of label of all items',
        ty: '`left` \\',
        default: '`right`',
      },
      {
        name: 'labelWrap',
        description: 'whether label can be wrap',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'labelCol',
        description:
          'Label layout, like `<Col>` component. Set `span` `offset` value like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}`',
        ty: '[object](/components/grid/#col)',
        default: '',
      },
      {
        name: 'layout',
        description: 'Form layout',
        ty: '`horizontal` \\',
        default: '`vertical` \\',
      },
      {
        name: 'name',
        description: 'Form name. Will be the prefix of Field `id`',
        ty: 'string',
        default: '',
      },
      {
        name: 'preserve',
        description:
          'Keep field value even when field removed. You can get the preserve field value by `getFieldsValue(true)`',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'requiredMark',
        description:
          'Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config',
        ty: 'boolean \\',
        default: '`optional` \\',
      },
      {
        name: 'scrollToFirstError',
        description: 'Auto scroll to first failed field when submit',
        ty: 'boolean \\',
        default:
          '[Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)',
      },
      {
        name: 'size',
        description: 'Set field component size (antd components only)',
        ty: '`small` \\',
        default: '`middle` \\',
      },
      {
        name: 'validateMessages',
        description: 'Validation prompt template, description [see below](#validatemessages)',
        ty: '[ValidateMessages](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134)',
        default: '',
      },
      {
        name: 'validateTrigger',
        description: 'Config field validate trigger',
        ty: 'string \\',
        default: 'string\\[]',
      },
      {
        name: 'variant',
        description: 'Variant of components inside form',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
      {
        name: 'wrapperCol',
        description: 'The layout for input controls, same as `labelCol`',
        ty: '[object](/components/grid/#col)',
        default: '',
      },
      {
        name: 'clearOnDestroy',
        description: 'Clear form values when the form is uninstalled',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'colon',
        description: 'Used with `label`, whether to display `:` after label text.',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'dependencies',
        description: 'Set the dependency field. See [below](#dependencies)',
        ty: '[NamePath](#namepath)\\[]',
        default: '',
      },
      {
        name: 'extra',
        description:
          'The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'getValueFromEvent',
        description: 'Specify how to get value from event or other onChange arguments',
        ty: '(..args: any\\[]) => any',
        default: '',
      },
      {
        name: 'getValueProps',
        description:
          "Additional props with sub component (It's not recommended to generate dynamic function prop by `getValueProps`. Please pass it to child component directly)",
        ty: '(value: any) => Record<string, any>',
        default: '',
      },
      {
        name: 'hasFeedback',
        description:
          'Used with `validateStatus`, this option specifies the validation status icon. Recommended to be used only with `Input`. Also, It can get feedback icons via icons prop.',
        ty: 'boolean \\',
        default: '{ icons: [FeedbackIcons](#feedbackicons) }',
      },
      {
        name: 'help',
        description:
          'The prompt message. If not provided, the prompt message will be generated by the validation rule.',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'hidden',
        description: 'Whether to hide Form.Item (still collect and validate value)',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'htmlFor',
        description: 'Set sub label `htmlFor`',
        ty: 'string',
        default: '',
      },
      {
        name: 'initialValue',
        description:
          'Config sub default value. Form `initialValues` get higher priority when conflict',
        ty: 'string',
        default: '',
      },
      {
        name: 'label',
        description: 'Label text',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'labelAlign',
        description: 'The text align of label',
        ty: '`left` \\',
        default: '`right`',
      },
      {
        name: 'labelCol',
        description:
          'The layout of label. You can set `span` `offset` to something like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}` same as with `<Col>`. You can set `labelCol` on Form which will not affect nest Item. If both exists, use Item first',
        ty: '[object](/components/grid/#col)',
        default: '',
      },
      {
        name: 'messageVariables',
        description: 'The default validate field info, description [see below](#messagevariables)',
        ty: 'Record&lt;string, string>',
        default: '',
      },
      {
        name: 'name',
        description: 'Field name, support array',
        ty: '[NamePath](#namepath)',
        default: '',
      },
      {
        name: 'normalize',
        description:
          'Normalize value from component value before passing to Form instance. Do not support async',
        ty: '(value, prevValue, prevValues) => any',
        default: '',
      },
      {
        name: 'noStyle',
        description:
          'No style for `true`, used as a pure field control. Will inherit parent Form.Item `validateStatus` if self `validateStatus` not configured',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'preserve',
        description: 'Keep field value even when field removed',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'required',
        description: 'Display required style. It will be generated by the validation rule',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'rules',
        description: 'Rules for field validation. Click [here](#form-demo-basic) to see an example',
        ty: '[Rule](#rule)\\[]',
        default: '',
      },
      {
        name: 'shouldUpdate',
        description: 'Custom field update logic. See [below](#shouldupdate)',
        ty: 'boolean \\',
        default: '(prevValue, curValue) => boolean',
      },
      {
        name: 'tooltip',
        description: 'Config tooltip info',
        ty: 'ReactNode \\',
        default: '[TooltipProps & { icon: ReactNode }](/components/tooltip#api)',
      },
      {
        name: 'trigger',
        description:
          'When to collect the value of children node. Click [here](#form-demo-customized-form-controls) to see an example',
        ty: 'string',
        default: '`onChange`',
      },
      {
        name: 'validateDebounce',
        description: 'Delay milliseconds to start validation',
        ty: 'number',
        default: '',
      },
      {
        name: 'validateFirst',
        description:
          'Whether stop validate on first rule of error for this field. Will parallel validate when `parallel` configured',
        ty: 'boolean \\',
        default: '`parallel`',
      },
      {
        name: 'validateStatus',
        description:
          'The validation status. If not provided, it will be generated by validation rule. options: `success` `warning` `error` `validating`',
        ty: 'string',
        default: '',
      },
      {
        name: 'validateTrigger',
        description: 'When to validate the value of children node',
        ty: 'string \\',
        default: 'string\\[]',
      },
      {
        name: 'valuePropName',
        description:
          'Props of children node, for example, the prop of Switch or Checkbox is `checked`. This prop is an encapsulation of `getValueProps`, which will be invalid after customizing `getValueProps`',
        ty: 'string',
        default: '`value`',
      },
      {
        name: 'wrapperCol',
        description:
          'The layout for input controls, same as `labelCol`. You can set `wrapperCol` on Form which will not affect nest Item. If both exists, use Item first',
        ty: '[object](/components/grid/#col)',
        default: '',
      },
      {
        name: 'layout',
        description: 'Form item layout',
        ty: '`horizontal` \\',
        default: '`vertical`',
      },
      {
        name: 'children',
        description: 'Render function',
        ty: '(fields: Field\\[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode',
        default: '',
      },
      {
        name: 'initialValue',
        description:
          'Config sub default value. Form `initialValues` get higher priority when conflict',
        ty: 'any\\[]',
        default: '',
      },
      {
        name: 'name',
        description:
          'Field name, support array. List is also a field, so it will return all the values by `getFieldsValue`. You can change this logic by [config](#getfieldsvalue)',
        ty: '[NamePath](#namepath)',
        default: '',
      },
      {
        name: 'rules',
        description:
          'Validate rules, only support customize validator. Should work with [ErrorList](#formerrorlist)',
        ty: '{ validator, message }\\[]',
        default: '',
      },
      {
        name: 'add',
        description: 'add form item',
        ty: '(defaultValue?: any, insertIndex?: number) => void',
        default: 'insertIndex',
      },
      {
        name: 'move',
        description: 'move form item',
        ty: '(from: number, to: number) => void',
        default: '',
      },
      {
        name: 'remove',
        description: 'remove form item',
        ty: '(index: number \\',
        default: 'number\\[]) => void',
      },
      {
        name: 'errors',
        description: 'Error list',
        ty: '',
        default: '',
      },
      {
        name: 'Name',
        description: 'Description',
        ty: '',
        default: '',
      },
      {
        name: 'getFieldError',
        description: 'Get the error messages by the field name',
        ty: '',
        default: '',
      },
      {
        name: 'getFieldInstance',
        description: 'Get field instance',
        ty: '',
        default: '',
      },
      {
        name: 'getFieldsError',
        description: 'Get the error messages by the fields name. Return as an array',
        ty: '',
        default: '',
      },
      {
        name: 'getFieldsValue',
        description:
          'Get values by a set of field names. Return according to the corresponding structure. Default return mounted field value, but you can use `getFieldsValue(true)` to get all values',
        ty: '',
        default: '',
      },
      {
        name: 'getFieldValue',
        description: 'Get the value by the field name',
        ty: '',
        default: '',
      },
      {
        name: 'isFieldsTouched',
        description:
          'Check if fields have been operated. Check if all fields is touched when `allTouched` is `true`',
        ty: '',
        default: '',
      },
      {
        name: 'isFieldTouched',
        description: 'Check if a field has been operated',
        ty: '',
        default: '',
      },
      {
        name: 'isFieldValidating',
        description: 'Check field if is in validating',
        ty: '',
        default: '',
      },
      {
        name: 'resetFields',
        description: 'Reset fields to `initialValues`',
        ty: '',
        default: '',
      },
      {
        name: 'scrollToField',
        description: 'Scroll to field position',
        ty: '',
        default: '',
      },
      {
        name: 'setFields',
        description: 'Set fields status',
        ty: '',
        default: '',
      },
      {
        name: 'setFieldValue',
        description:
          'Set fields value(Will directly pass to form store and **reset validation message**. If you do not want to modify passed object, please clone first)',
        ty: '',
        default: '',
      },
      {
        name: 'setFieldsValue',
        description:
          'Set fields value(Will directly pass to form store and **reset validation message**. If you do not want to modify passed object, please clone first). Use `setFieldValue` instead if you want to only config single value in Form.List',
        ty: '',
        default: '',
      },
      {
        name: 'submit',
        description: "Submit the form. It's same as click `submit` button",
        ty: '',
        default: '',
      },
      {
        name: 'validateFields',
        description: 'Validate fields. Use `recursive` to validate all the field in the path',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onFieldsChange',
        description: 'Trigger when field updated',
        ty: 'function(changedFields, allFields)',
        default: '',
      },
      {
        name: 'onFinish',
        description: 'Trigger after submitting the form and verifying data successfully',
        ty: 'function(values)',
        default: '',
      },
      {
        name: 'onFinishFailed',
        description: 'Trigger after submitting the form and verifying data failed',
        ty: 'function({ values, errorFields, outOfDate })',
        default: '',
      },
      {
        name: 'onValuesChange',
        description: 'Trigger when value updated',
        ty: 'function(changedValues, allValues)',
        default: '',
      },
      {
        name: 'onFormChange',
        description: 'Triggered when a sub form field updates',
        ty: '',
        default: '',
      },
      {
        name: 'onFormFinish',
        description: 'Triggered when a sub form submits',
        ty: '',
        default: '',
      },
    ],
    methods: [],
    children: [
      {
        name: 'validateFields',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: 'Difference between other data fetching method',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: 'getFieldsValue(nameList?: true | [NamePath](#namepath)\\[], filterFunc?: FilterFunc)',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: 'getFieldsValue({ strict?: boolean, filter?: FilterFunc })',
        props: [
          {
            name: 'Name',
            description: 'Description',
            ty: '',
            default: '',
          },
          {
            name: 'errors',
            description: 'Error messages',
            ty: '',
            default: '',
          },
          {
            name: 'warnings',
            description: 'Warning messages',
            ty: '',
            default: '',
          },
          {
            name: 'name',
            description: 'Field name path',
            ty: '',
            default: '',
          },
          {
            name: 'touched',
            description: 'Whether is operated',
            ty: '',
            default: '',
          },
          {
            name: 'validating',
            description: 'Whether is in validating',
            ty: '',
            default: '',
          },
          {
            name: 'value',
            description: 'Field value',
            ty: '',
            default: '',
          },
          {
            name: 'Name',
            description: 'Description',
            ty: '',
            default: '',
          },
          {
            name: 'defaultField',
            description: 'Validate rule for all array elements, valid when `type` is `array`',
            ty: '',
            default: '',
          },
          {
            name: 'enum',
            description: 'Match enum value. You need to set `type` to `enum` to enable this',
            ty: '',
            default: '',
          },
          {
            name: 'fields',
            description:
              'Validate rule for child elements, valid when `type` is `array` or `object`',
            ty: '',
            default: '',
          },
          {
            name: 'len',
            description: 'Length of string, number, array',
            ty: '',
            default: '',
          },
          {
            name: 'max',
            description: '`type` required: max length of `string`, `number`, `array`',
            ty: '',
            default: '',
          },
          {
            name: 'message',
            description:
              'Error message. Will auto generate by [template](#validatemessages) if not provided',
            ty: '',
            default: '',
          },
          {
            name: 'min',
            description: '`type` required: min length of `string`, `number`, `array`',
            ty: '',
            default: '',
          },
          {
            name: 'pattern',
            description: 'Regex pattern',
            ty: '',
            default: '',
          },
          {
            name: 'required',
            description: 'Required field',
            ty: '',
            default: '',
          },
          {
            name: 'transform',
            description: 'Transform value to the rule before validation',
            ty: '',
            default: '',
          },
          {
            name: 'type',
            description: 'Normally `string` \\',
            ty: '`number` \\',
            default: '`boolean` \\',
          },
          {
            name: 'validateTrigger',
            description:
              'Set validate trigger event. Must be the sub set of `validateTrigger` in Form.Item',
            ty: 'string \\',
            default: 'string\\[]',
          },
          {
            name: 'validator',
            description:
              'Customize validation rule. Accept Promise as return. See [example](#form-demo-register)',
            ty: '',
            default: '',
          },
          {
            name: 'warningOnly',
            description: 'Warning only. Not block form submit',
            ty: '',
            default: '',
          },
          {
            name: 'whitespace',
            description: "Failed if only has whitespace, only work with `type: 'string'` rule",
            ty: '',
            default: '',
          },
          {
            name: 'Name',
            description: 'Description',
            ty: 'Type',
            default: 'Default',
          },
          {
            name: 'form',
            description: 'Form instance',
            ty: 'FormInstance',
            default: 'Current form in context',
          },
          {
            name: 'preserve',
            description: 'Whether to watch the field which has no matched `Form.Item`',
            ty: 'boolean',
            default: 'false',
          },
        ],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'tooltip',
    props: [
      {
        name: 'title',
        description: 'The text shown in the tooltip',
        ty: 'ReactNode \\',
        default: '() => ReactNode',
      },
      {
        name: 'align',
        description:
          "This value will be merged into placement's config, please refer to the settings [dom-align](https://github.com/yiminghe/dom-align)",
        ty: 'object',
        default: '',
      },
      {
        name: 'arrow',
        description:
          "Change arrow's visible state and change whether the arrow is pointed at the center of target.",
        ty: 'boolean \\',
        default: '{ pointAtCenter: boolean }',
      },
      {
        name: 'autoAdjustOverflow',
        description: 'Whether to adjust popup placement automatically when popup is off screen',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'color',
        description: 'The background color',
        ty: 'string',
        default: '',
      },
      {
        name: 'defaultOpen',
        description: 'Whether the floating tooltip card is open by default',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'destroyTooltipOnHide',
        description: 'Whether destroy tooltip when hidden',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'fresh',
        description:
          'Tooltip will cache content when it is closed by default. Setting this property will always keep updating',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'getPopupContainer',
        description:
          'The DOM container of the tip, the default behavior is to create a `div` element in `body`',
        ty: '(triggerNode: HTMLElement) => HTMLElement',
        default: '() => document.body',
      },
      {
        name: 'mouseEnterDelay',
        description: 'Delay in seconds, before tooltip is shown on mouse enter',
        ty: 'number',
        default: '0.1',
      },
      {
        name: 'mouseLeaveDelay',
        description: 'Delay in seconds, before tooltip is hidden on mouse leave',
        ty: 'number',
        default: '0.1',
      },
      {
        name: 'overlayClassName',
        description: 'Class name of the tooltip card',
        ty: 'string',
        default: '',
      },
      {
        name: 'overlayStyle',
        description: 'Style of the tooltip card',
        ty: 'object',
        default: '',
      },
      {
        name: 'overlayInnerStyle',
        description: 'Style of the tooltip inner content',
        ty: 'object',
        default: '',
      },
      {
        name: 'placement',
        description:
          'The position of the tooltip relative to the target, which can be one of `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom`',
        ty: 'string',
        default: '`top`',
      },
      {
        name: 'trigger',
        description: 'Tooltip trigger mode. Could be multiple by passing an array',
        ty: '`hover` \\',
        default: '`focus` \\',
      },
      {
        name: 'open',
        description:
          'Whether the floating tooltip card is open or not. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open))',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'zIndex',
        description: 'Config `z-index` of Tooltip',
        ty: 'number',
        default: '',
      },
    ],
    events: [
      {
        name: 'onOpenChange',
        description: 'Callback executed when visibility of the tooltip card is changed',
        ty: '(open: boolean) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: '_util',
    props: [],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'result',
    props: [
      {
        name: 'extra',
        description: 'Operating area',
        ty: '',
        default: '',
      },
      {
        name: 'icon',
        description: 'Custom back icon',
        ty: '',
        default: '',
      },
      {
        name: 'status',
        description: 'Result status, decide icons and colors',
        ty: '`success` \\',
        default: '`error` \\',
      },
      {
        name: 'subTitle',
        description: 'The subTitle',
        ty: '',
        default: '',
      },
      {
        name: 'title',
        description: 'The title',
        ty: '',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'calendar',
    props: [
      {
        name: 'dateCellRender',
        description:
          'Customize the display of the date cell, the returned content will be appended to the cell',
        ty: 'function(date: Dayjs): ReactNode',
        default: '',
      },
      {
        name: 'cellRender',
        description: 'Customize cell content',
        ty: "function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\",
        default: "'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\",
      },
      {
        name: 'dateFullCellRender',
        description:
          'Customize the display of the date cell, the returned content will override the cell',
        ty: 'function(date: Dayjs): ReactNode',
        default: '',
      },
      {
        name: 'fullCellRender',
        description: 'Customize cell content',
        ty: "function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\",
        default: "'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\",
      },
      {
        name: 'defaultValue',
        description: 'The date selected by default',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'disabledDate',
        description:
          "Function that specifies the dates that cannot be selected, `currentDate` is same dayjs object as `value` prop which you shouldn't mutate it](https://github.com/ant-design/ant-design/issues/30987)",
        ty: '(currentDate: Dayjs) => boolean',
        default: '',
      },
      {
        name: 'fullscreen',
        description: 'Whether to display in full-screen',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'headerRender',
        description: 'Render custom header in panel',
        ty: 'function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()})',
        default: '',
      },
      {
        name: 'locale',
        description: "The calendar's locale",
        ty: 'object',
        default:
          '[(default)](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)',
      },
      {
        name: 'mode',
        description: 'The display mode of the calendar',
        ty: '`month` \\',
        default: '`year`',
      },
      {
        name: 'monthCellRender',
        description:
          'Customize the display of the month cell, the returned content will be appended to the cell',
        ty: 'function(date: Dayjs): ReactNode',
        default: '',
      },
      {
        name: 'monthFullCellRender',
        description:
          'Customize the display of the month cell, the returned content will override the cell',
        ty: 'function(date: Dayjs): ReactNode',
        default: '',
      },
      {
        name: 'validRange',
        description: 'To set valid range',
        ty: '\\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)]',
        default: '',
      },
      {
        name: 'value',
        description: 'The current selected date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Callback for when date changes',
        ty: 'function(date: Dayjs)',
        default: '',
      },
      {
        name: 'onPanelChange',
        description: 'Callback for when panel changes',
        ty: 'function(date: Dayjs, mode: string)',
        default: '',
      },
      {
        name: 'onSelect',
        description: 'Callback for when a date is selected, include source info',
        ty: "function(date: Dayjs, info: { source: 'year' \\",
        default: "'month' \\",
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'radio',
    props: [
      {
        name: 'autoFocus',
        description: 'Whether get focus when component mounted',
        ty: '',
        default: '',
      },
      {
        name: 'checked',
        description: 'Specifies whether the radio is selected',
        ty: '',
        default: '',
      },
      {
        name: 'defaultChecked',
        description: 'Specifies the initial state: whether or not the radio is selected',
        ty: '',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Disable radio',
        ty: '',
        default: '',
      },
      {
        name: 'value',
        description: 'According to value for comparison, to determine whether the selected',
        ty: '',
        default: '',
      },
      {
        name: 'buttonStyle',
        description: 'The style type of radio button',
        ty: '`outline` \\',
        default: '`solid`',
      },
      {
        name: 'defaultValue',
        description: 'Default selected value',
        ty: 'any',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Disable all radio buttons',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'name',
        description: 'The `name` property of all `input[type="radio"]` children',
        ty: 'string',
        default: '',
      },
      {
        name: 'options',
        description: 'Set children optional',
        ty: 'string\\[] \\',
        default: 'number\\[] \\',
      },
      {
        name: 'optionType',
        description: 'Set Radio optionType',
        ty: '`default` \\',
        default: '`button`',
      },
      {
        name: 'size',
        description: 'The size of radio button style',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'value',
        description: 'Used for setting the currently selected value',
        ty: 'any',
        default: '',
      },
      {
        name: 'block',
        description: 'Option to fit RadioGroup width to its parent width',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'label',
        description: 'The text used to display as the Radio option',
        ty: '`string`',
        default: '',
      },
      {
        name: 'value',
        description: 'The value associated with the Radio option',
        ty: '`string` \\',
        default: '`number` \\',
      },
      {
        name: 'style',
        description: 'The style to apply to the Radio option',
        ty: '`React.CSSProperties`',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Specifies whether the Radio option is disabled',
        ty: '`boolean`',
        default: '`false`',
      },
      {
        name: 'title',
        description: 'Adds the Title attribute value',
        ty: '`string`',
        default: '',
      },
      {
        name: 'id',
        description: 'Adds the Radio Id attribute value',
        ty: '`string`',
        default: '',
      },
      {
        name: 'required',
        description: 'Specifies whether the Radio option is required',
        ty: '`boolean`',
        default: '`false`',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'The callback function that is triggered when the state changes',
        ty: 'function(e:Event)',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Triggered when the value of the Radio Group changes',
        ty: '`(e: CheckboxChangeEvent) => void;`',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'card',
    props: [
      {
        name: 'actions',
        description: 'The action list, shows at the bottom of the Card',
        ty: 'Array&lt;ReactNode>',
        default: '',
      },
      {
        name: 'activeTabKey',
        description: "Current TabPane's key",
        ty: 'string',
        default: '',
      },
      {
        name: 'bordered',
        description: 'Toggles rendering of the border around the card',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'cover',
        description: 'Card cover',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'defaultActiveTabKey',
        description: "Initial active TabPane's key, if `activeTabKey` is not set",
        ty: 'string',
        default: '`The key of first tab`',
      },
      {
        name: 'extra',
        description: 'Content to render in the top-right corner of the card',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'hoverable',
        description: 'Lift up when hovering card',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'loading',
        description: 'Shows a loading indicator while the contents of the card are being fetched',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'size',
        description: 'Size of card',
        ty: '`default` \\',
        default: '`small`',
      },
      {
        name: 'tabBarExtraContent',
        description: 'Extra content in tab bar',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'tabList',
        description: "List of TabPane's head",
        ty: '[TabItemType](/components/tabs#tabitemtype)[]',
        default: '',
      },
      {
        name: 'tabProps',
        description: '[Tabs](/components/tabs/#tabs)',
        ty: '',
        default: '',
      },
      {
        name: 'title',
        description: 'Card title',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'type',
        description: 'Card style type, can be set to `inner` or not set',
        ty: 'string',
        default: '',
      },
      {
        name: 'classNames',
        description: "Config Card build-in module's className",
        ty: '[Record<SemanticDOM, string>](#semantic-dom)',
        default: '',
      },
      {
        name: 'styles',
        description: "Config Card build-in module's style",
        ty: '[Record<SemanticDOM, CSSProperties>](#semantic-dom)',
        default: '',
      },
      {
        name: 'className',
        description: 'The className of container',
        ty: 'string',
        default: '',
      },
      {
        name: 'hoverable',
        description: 'Lift up when hovering card grid',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'style',
        description: 'The style object of container',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'avatar',
        description: 'Avatar or icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'className',
        description: 'The className of container',
        ty: 'string',
        default: '',
      },
      {
        name: 'description',
        description: 'Description content',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'style',
        description: 'The style object of container',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'title',
        description: 'Title content',
        ty: 'ReactNode',
        default: '',
      },
    ],
    events: [
      {
        name: 'onTabChange',
        description: 'Callback when tab is switched',
        ty: '(key) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'app',
    props: [
      {
        name: 'component',
        description: 'Config render element, if `false` will not create DOM node',
        ty: 'ComponentType \\',
        default: 'false',
      },
      {
        name: 'message',
        description: 'Global config for Message',
        ty: '[MessageConfig](/components/message/#messageconfig)',
        default: '',
      },
      {
        name: 'notification',
        description: 'Global config for Notification',
        ty: '[NotificationConfig](/components/notification/#notificationconfig)',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'empty',
    props: [
      {
        name: 'description',
        description: 'Customize description',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'image',
        description: 'Customize image. Will treat as image url when string provided',
        ty: 'ReactNode',
        default: '`Empty.PRESENTED_IMAGE_DEFAULT`',
      },
      {
        name: 'imageStyle',
        description: 'The style of image',
        ty: 'CSSProperties',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'input-number',
    props: [
      {
        name: 'addonAfter',
        description: 'The label text displayed after (on the right side of) the input field',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'addonBefore',
        description: 'The label text displayed before (on the left side of) the input field',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'autoFocus',
        description: 'If get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'changeOnBlur',
        description: 'Trigger `onChange` when blur. e.g. reset value in range by blur',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'changeOnWheel',
        description: 'Allow control with mouse wheel',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'controls',
        description: 'Whether to show `+-` controls, or set custom arrows icon',
        ty: 'boolean \\',
        default: '{ upIcon?: React.ReactNode; downIcon?: React.ReactNode; }',
      },
      {
        name: 'decimalSeparator',
        description: 'Decimal separator',
        ty: 'string',
        default: '',
      },
      {
        name: 'placeholder',
        description: 'placeholder',
        ty: 'string',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'The initial value',
        ty: 'number',
        default: '',
      },
      {
        name: 'disabled',
        description: 'If disable the input',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'formatter',
        description: 'Specifies the format of the value presented',
        ty: 'function(value: number \\',
        default: 'string, info: { userTyping: boolean, input: string }): string',
      },
      {
        name: 'keyboard',
        description: 'If enable keyboard behavior',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'max',
        description: 'The max value',
        ty: 'number',
        default:
          '[Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)',
      },
      {
        name: 'min',
        description: 'The min value',
        ty: 'number',
        default:
          '[Number.MIN_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER)',
      },
      {
        name: 'parser',
        description: 'Specifies the value extracted from formatter',
        ty: 'function(string): number',
        default: '',
      },
      {
        name: 'precision',
        description:
          'The precision of input value. Will use `formatter` when config of `formatter`',
        ty: 'number',
        default: '',
      },
      {
        name: 'readOnly',
        description: 'If readonly the input',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning'",
      },
      {
        name: 'prefix',
        description: 'The prefix icon for the Input',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'suffix',
        description: 'The suffix icon for the Input',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'size',
        description: 'The height of input box',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'step',
        description:
          'The number to which the current value is increased or decreased. It can be an integer or decimal',
        ty: 'number \\',
        default: 'string',
      },
      {
        name: 'stringMode',
        description:
          'Set value as string to support high precision decimals. Will return string value by `onChange`',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'value',
        description: 'The current value',
        ty: 'number',
        default: '',
      },
      {
        name: 'variant',
        description: 'Variants of Input',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
      {
        name: 'Name',
        description: 'Description',
        ty: '',
        default: '',
      },
      {
        name: 'blur()',
        description: 'Remove focus',
        ty: '',
        default: '',
      },
      {
        name: 'focus()',
        description: 'Get focus',
        ty: '',
        default: '',
      },
      {
        name: 'nativeElement',
        description: 'The native DOM element',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'The callback triggered when the value is changed',
        ty: 'function(value: number \\',
        default: 'string \\',
      },
      {
        name: 'onPressEnter',
        description: 'The callback function that is triggered when Enter key is pressed',
        ty: 'function(e)',
        default: '',
      },
      {
        name: 'onStep',
        description: 'The callback function that is triggered when click up or down buttons',
        ty: "(value: number, info: { offset: number, type: 'up' \\",
        default: "'down' }) => void",
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'auto-complete',
    props: [
      {
        name: 'allowClear',
        description: 'Show clear button',
        ty: 'boolean \\',
        default: '{ clearIcon?: ReactNode }',
      },
      {
        name: 'autoFocus',
        description: 'If get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'backfill',
        description: 'If backfill selected item the input when using keyboard',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'children (for customize input element)',
        description: 'Customize input element',
        ty: 'HTMLInputElement \\',
        default: 'HTMLTextAreaElement \\',
      },
      {
        name: 'children (for dataSource)',
        description: 'Data source to auto complete',
        ty: 'React.ReactElement&lt;OptionProps> \\',
        default: 'Array&lt;React.ReactElement&lt;OptionProps>>',
      },
      {
        name: 'defaultActiveFirstOption',
        description: 'Whether active first option by default',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'defaultOpen',
        description: 'Initial open state of dropdown',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'Initial selected option',
        ty: 'string',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Whether disabled select',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'dropdownRender',
        description: 'Customize dropdown content',
        ty: '(menus: ReactNode) => ReactNode',
        default: '',
      },
      {
        name: 'popupClassName',
        description: 'The className of dropdown menu',
        ty: 'string',
        default: '',
      },
      {
        name: 'popupMatchSelectWidth',
        description:
          'Determine whether the dropdown menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll',
        ty: 'boolean \\',
        default: 'number',
      },
      {
        name: 'filterOption',
        description:
          'If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns true, the option will be included in the filtered set; Otherwise, it will be excluded',
        ty: 'boolean \\',
        default: 'function(inputValue, option)',
      },
      {
        name: 'getPopupContainer',
        description:
          'Parent node of the dropdown. Default to body, if you encountered positioning problems during scroll, try changing to the scrollable area and position relative to it. [Example](https://codesandbox.io/s/4j168r7jw0)',
        ty: 'function(triggerNode)',
        default: '() => document.body',
      },
      {
        name: 'notFoundContent',
        description: 'Specify content to show when no result matches',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'open',
        description: 'Controlled open state of dropdown',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'options',
        description: 'Select options. Will get better perf than jsx definition',
        ty: '{ label, value }\\[]',
        default: '',
      },
      {
        name: 'placeholder',
        description: 'The placeholder of input',
        ty: 'string',
        default: '',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning'",
      },
      {
        name: 'value',
        description: 'Selected option',
        ty: 'string',
        default: '',
      },
      {
        name: 'variant',
        description: 'Variants of input',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
      {
        name: 'Name',
        description: 'Description',
        ty: '',
        default: '',
      },
      {
        name: 'blur()',
        description: 'Remove focus',
        ty: '',
        default: '',
      },
      {
        name: 'focus()',
        description: 'Get focus',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onBlur',
        description: 'Called when leaving the component',
        ty: 'function()',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Called when selecting an option or changing an input value',
        ty: 'function(value)',
        default: '',
      },
      {
        name: 'onDropdownVisibleChange',
        description: 'Call when dropdown open',
        ty: 'function(open)',
        default: '',
      },
      {
        name: 'onFocus',
        description: 'Called when entering the component',
        ty: 'function()',
        default: '',
      },
      {
        name: 'onSearch',
        description: 'Called when searching items',
        ty: 'function(value)',
        default: '',
      },
      {
        name: 'onSelect',
        description:
          "Called when a option is selected. param is option's value and option instance",
        ty: 'function(value, option)',
        default: '',
      },
      {
        name: 'onClear',
        description: 'Called when clear',
        ty: 'function',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'progress',
    props: [
      {
        name: 'format',
        description: 'The template function of the content',
        ty: 'function(percent, successPercent)',
        default: '(percent) => percent + `%`',
      },
      {
        name: 'percent',
        description: 'To set the completion percentage',
        ty: 'number',
        default: '0',
      },
      {
        name: 'showInfo',
        description: 'Whether to display the progress value and the status icon',
        ty: '',
        default: '',
      },
      {
        name: 'status',
        description:
          'To set the status of the Progress, options: `success` `exception` `normal` `active`(line only)',
        ty: '',
        default: '',
      },
      {
        name: 'strokeColor',
        description: 'The color of progress bar',
        ty: 'string',
        default: '',
      },
      {
        name: 'strokeLinecap',
        description: 'To set the style of the progress linecap',
        ty: '`round` \\',
        default: '`butt` \\',
      },
      {
        name: 'success',
        description: 'Configs of successfully progress bar',
        ty: '{ percent: number, strokeColor: string }',
        default: '',
      },
      {
        name: 'trailColor',
        description: 'The color of unfilled part',
        ty: 'string',
        default: '',
      },
      {
        name: 'type',
        description: 'To set the type, options: `line` `circle` `dashboard`',
        ty: '',
        default: '',
      },
      {
        name: 'size',
        description: 'Progress size',
        ty: 'number \\',
        default: '\\[number \\',
      },
      {
        name: 'steps',
        description: 'The total step count',
        ty: 'number',
        default: '',
      },
      {
        name: 'strokeColor',
        description:
          'The color of progress bar, render `linear-gradient` when passing an object, could accept `string[]` when has `steps`.',
        ty: 'string \\',
        default: 'string[] \\',
      },
      {
        name: 'percentPosition',
        description:
          'Progress value position, passed in object, `align` indicates the horizontal position of the value, `type` indicates whether the value is inside or outside the progress bar',
        ty: '{ align: string; type: string }',
        default: '{ align: \\"end\\", type: \\"outer\\" }',
      },
      {
        name: 'steps',
        description:
          'The total step count.When passing an object, `count` refers to the number of steps, and `gap` refers to the distance between them.When passing number, the default value for `gap` is 2.',
        ty: 'number \\',
        default: '{ count: number, gap: number }',
      },
      {
        name: 'strokeColor',
        description: 'The color of circular progress, render gradient when passing an object',
        ty: 'string \\',
        default: '{ number%: string }',
      },
      {
        name: 'strokeWidth',
        description:
          'To set the width of the circular progress, unit: percentage of the canvas width',
        ty: 'number',
        default: '6',
      },
      {
        name: 'steps',
        description:
          'The total step count.When passing an object, `count` refers to the number of steps, and `gap` refers to the distance between them.When passing number, the default value for `gap` is 2.',
        ty: 'number \\',
        default: '{ count: number, gap: number }',
      },
      {
        name: 'gapDegree',
        description: 'The gap degree of half circle, 0 ~ 295',
        ty: '',
        default: '',
      },
      {
        name: 'gapPosition',
        description: 'The gap position, options: `top` `bottom` `left` `right`',
        ty: '',
        default: '',
      },
      {
        name: 'strokeWidth',
        description:
          'To set the width of the dashboard progress, unit: percentage of the canvas width',
        ty: '',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'time-picker',
    props: [
      {
        name: 'allowClear',
        description: 'Customize clear icon',
        ty: 'boolean \\',
        default: '{ clearIcon?: ReactNode }',
      },
      {
        name: 'autoFocus',
        description: 'If get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'cellRender',
        description: 'Custom rendering function for picker cells',
        ty: "(current: number, info: { originNode: React.ReactElement, today: dayjs, range?: 'start' \\",
        default: "'end', subType: 'hour' \\",
      },
      {
        name: 'changeOnScroll',
        description: 'Trigger selection when scroll the column',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'className',
        description: 'The className of picker',
        ty: 'string',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'To set default time',
        ty: '[dayjs](http://day.js.org/)',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Determine whether the TimePicker is disabled',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabledTime',
        description: 'To specify the time that cannot be selected',
        ty: '[DisabledTime](#disabledtime)',
        default: '',
      },
      {
        name: 'format',
        description: 'To set the time format',
        ty: 'string',
        default: '`HH:mm:ss`',
      },
      {
        name: 'getPopupContainer',
        description:
          'To set the container of the floating layer, while the default is to create a div element in body',
        ty: 'function(trigger)',
        default: '',
      },
      {
        name: 'hideDisabledOptions',
        description: 'Whether hide the options that can not be selected',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'hourStep',
        description: 'Interval between hours in picker',
        ty: 'number',
        default: '1',
      },
      {
        name: 'inputReadOnly',
        description:
          'Set the `readonly` attribute of the input tag (avoids virtual keyboard on touch devices)',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'minuteStep',
        description: 'Interval between minutes in picker',
        ty: 'number',
        default: '1',
      },
      {
        name: 'needConfirm',
        description: 'Need click confirm button to trigger value change',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'open',
        description: 'Whether to popup panel',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'placeholder',
        description: "Display when there's no value",
        ty: 'string \\',
        default: '\\[string, string]',
      },
      {
        name: 'placement',
        description: 'The position where the selection box pops up',
        ty: '`bottomLeft` `bottomRight` `topLeft` `topRight`',
        default: 'bottomLeft',
      },
      {
        name: 'popupClassName',
        description: 'The className of panel',
        ty: 'string',
        default: '',
      },
      {
        name: 'popupStyle',
        description: 'The style of panel',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'renderExtraFooter',
        description: 'Called from time picker panel to render some addon to its bottom',
        ty: '() => ReactNode',
        default: '',
      },
      {
        name: 'secondStep',
        description: 'Interval between seconds in picker',
        ty: 'number',
        default: '1',
      },
      {
        name: 'showNow',
        description: 'Whether to show `Now` button on panel',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'size',
        description:
          'To determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning' \\",
      },
      {
        name: 'suffixIcon',
        description: 'The custom suffix icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'use12Hours',
        description: 'Display as 12 hours format, with default format `h:mm:ss a`',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'value',
        description: 'To set time',
        ty: '[dayjs](http://day.js.org/)',
        default: '',
      },
      {
        name: 'variant',
        description: 'Variants of picker',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
    ],
    events: [
      {
        name: 'onCalendarChange',
        description:
          'Callback function, can be executed when the start time or the end time of the range is changing. `info` argument is added in 4.4.0',
        ty: 'function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string], info: { range:`start`\\',
        default: '`end` })',
      },
      {
        name: 'onChange',
        description: 'A callback function, can be executed when the selected time is changing',
        ty: 'function(time: dayjs, timeString: string): void',
        default: '',
      },
      {
        name: 'onOpenChange',
        description: 'A callback function which will be called while panel opening/closing',
        ty: '(open: boolean) => void',
        default: '',
      },
    ],
    methods: [],
    children: [
      {
        name: 'DisabledTime',
        props: [
          {
            name: 'Name',
            description: 'Description',
            ty: '',
            default: '',
          },
          {
            name: 'blur()',
            description: 'Remove focus',
            ty: '',
            default: '',
          },
          {
            name: 'focus()',
            description: 'Get focus',
            ty: '',
            default: '',
          },
          {
            name: 'disabledTime',
            description: 'To specify the time that cannot be selected',
            ty: '[RangeDisabledTime](#rangedisabledtime)',
            default: '',
          },
          {
            name: 'order',
            description: 'Order start and end time',
            ty: 'boolean',
            default: 'true',
          },
        ],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'input',
    props: [
      {
        name: 'addonAfter',
        description: 'The label text displayed after (on the right side of) the input field',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'addonBefore',
        description: 'The label text displayed before (on the left side of) the input field',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'allowClear',
        description: 'If allow to remove input content with clear icon',
        ty: 'boolean \\',
        default: '{ clearIcon: ReactNode }',
      },
      {
        name: 'classNames',
        description: 'Semantic DOM class',
        ty: 'Record<[SemanticDOM](#input-1), string>',
        default: '',
      },
      {
        name: 'count',
        description: 'Character count config',
        ty: '[CountConfig](#countconfig)',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'The initial input content',
        ty: 'string',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Whether the input is disabled',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'id',
        description: 'The ID for input',
        ty: 'string',
        default: '',
      },
      {
        name: 'maxLength',
        description: 'The maximum number of characters in Input',
        ty: 'number',
        default: '',
      },
      {
        name: 'prefix',
        description: 'The prefix icon for the Input',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'showCount',
        description: 'Whether to show character count',
        ty: 'boolean \\',
        default:
          '{ formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode }',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning'",
      },
      {
        name: 'styles',
        description: 'Semantic DOM style',
        ty: 'Record<[SemanticDOM](#input-1), CSSProperties>',
        default: '',
      },
      {
        name: 'size',
        description:
          'The size of the input box. Note: in the context of a form, the `middle` size is used',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'suffix',
        description: 'The suffix icon for the Input',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'type',
        description:
          'The type of input, see: [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types)( use `Input.TextArea` instead of `type="textarea"`)',
        ty: 'string',
        default: '`text`',
      },
      {
        name: 'value',
        description: 'The input content value',
        ty: 'string',
        default: '',
      },
      {
        name: 'variant',
        description: 'Variants of Input',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Callback when user input',
        ty: 'function(e)',
        default: '',
      },
      {
        name: 'onPressEnter',
        description: 'The callback function that is triggered when Enter key is pressed',
        ty: 'function(e)',
        default: '',
      },
      {
        name: 'onClear',
        description: 'Callback when click the clear button',
        ty: '() => void',
        default: '',
      },
    ],
    methods: [],
    children: [
      {
        name: 'CountConfig',
        props: [
          {
            name: 'autoSize',
            description: 'Height auto size feature, can be set to true \\',
            ty: 'false or an object { minRows: 2, maxRows: 6 }',
            default: 'boolean \\',
          },
          {
            name: 'classNames',
            description: 'Semantic DOM class',
            ty: 'Record<[SemanticDOM](#inputtextarea-1), string>',
            default: '',
          },
          {
            name: 'styles',
            description: 'Semantic DOM style',
            ty: 'Record<[SemanticDOM](#inputtextarea-1), CSSProperties>',
            default: '',
          },
          {
            name: 'enterButton',
            description:
              'Whether to show an enter button after input. This property conflicts with the `addonAfter` property',
            ty: '',
            default: '',
          },
          {
            name: 'loading',
            description: 'Search box with loading',
            ty: '',
            default: '',
          },
          {
            name: 'iconRender',
            description: 'Custom toggle button',
            ty: '(visible) => ReactNode',
            default: '(visible) => (visible ? &lt;EyeOutlined /> : &lt;EyeInvisibleOutlined />)',
          },
          {
            name: 'visibilityToggle',
            description: 'Whether show toggle button or control password visible',
            ty: 'boolean \\',
            default: '[VisibilityToggle](#visibilitytoggle)',
          },
          {
            name: 'defaultValue',
            description: 'Default value',
            ty: 'string',
            default: '',
          },
          {
            name: 'disabled',
            description: 'Whether the input is disabled',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'formatter',
            description: 'Format display, blank fields will be filled with ` `',
            ty: '(value: string) => string',
            default: '',
          },
          {
            name: 'mask',
            description: 'Custom display, the original value will not be modified',
            ty: 'boolean \\',
            default: 'string',
          },
          {
            name: 'length',
            description: 'The number of input elements',
            ty: 'number',
            default: '6',
          },
          {
            name: 'status',
            description: 'Set validation status',
            ty: "'error' \\",
            default: "'warning'",
          },
          {
            name: 'size',
            description: 'The size of the input box',
            ty: '`small` \\',
            default: '`middle` \\',
          },
          {
            name: 'variant',
            description: 'Variants of Input',
            ty: '`outlined` \\',
            default: '`borderless` \\',
          },
          {
            name: 'value',
            description: 'The input content value',
            ty: 'string',
            default: '',
          },
        ],
        events: [
          {
            name: 'onSearch',
            description:
              'The callback function triggered when you click on the search-icon, the clear-icon or press the Enter key',
            ty: 'function(value, event, { source: "input" \\',
            default: '"clear" })',
          },
          {
            name: 'onChange',
            description: 'Trigger when all the fields are filled',
            ty: 'function(value: string)',
            default: '',
          },
        ],
        methods: [],
        children: [],
      },
      {
        name: 'VisibilityToggle',
        props: [
          {
            name: 'visible',
            description: 'Whether the password is show or hide',
            ty: 'boolean',
            default: 'false',
          },
        ],
        events: [
          {
            name: 'onVisibleChange',
            description: 'Callback executed when visibility of the password is changed',
            ty: '(visible) => void',
            default: '',
          },
        ],
        methods: [],
        children: [],
      },
      {
        name: 'Input Methods',
        props: [
          {
            name: 'Name',
            description: 'Description',
            ty: '',
            default: '',
          },
          {
            name: 'blur',
            description: 'Remove focus',
            ty: '',
            default: '',
          },
          {
            name: 'focus',
            description: 'Get focus',
            ty: "(option?: { preventScroll?: boolean, cursor?: 'start' \\",
            default: "'end' \\",
          },
        ],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: 'Input.TextArea',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'notification',
    props: [
      {
        name: 'btn',
        description: 'Customized close button',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'className',
        description: 'Customized CSS class',
        ty: 'string',
        default: '',
      },
      {
        name: 'closeIcon',
        description: 'Custom close icon',
        ty: 'ReactNode',
        default: 'true',
      },
      {
        name: 'description',
        description: 'The content of notification box (required)',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'duration',
        description:
          'Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically',
        ty: 'number',
        default: '4.5',
      },
      {
        name: 'showProgress',
        description: 'Show progress bar for auto-closing notification',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'pauseOnHover',
        description: 'keep the timer running or not on hover',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'icon',
        description: 'Customized icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'key',
        description: 'The unique identifier of the Notification',
        ty: 'string',
        default: '',
      },
      {
        name: 'message',
        description: 'The title of notification box (required)',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'placement',
        description:
          'Position of Notification, can be one of `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`',
        ty: 'string',
        default: '`topRight`',
      },
      {
        name: 'style',
        description: 'Customized inline style',
        ty: '[CSSProperties](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e434515761b36830c3e58a970abf5186f005adac/types/react/index.d.ts#L794)',
        default: '',
      },
      {
        name: 'role',
        description:
          'The semantics of notification content recognized by screen readers. The default value is `alert`. When set as the default value, the screen reader will promptly interrupt any ongoing content reading and prioritize the notification content for immediate attention.',
        ty: '`alert \\',
        default: 'status`',
      },
      {
        name: 'props',
        description:
          'An object that can contain `data-*`, `aria-*`, or `role` props, to be put on the notification `div`. This currently only allows `data-testid` instead of `data-*` in TypeScript. See https://github.com/microsoft/TypeScript/issues/28960.',
        ty: 'Object',
        default: '',
      },
      {
        name: 'bottom',
        description:
          'Distance from the bottom of the viewport, when `placement` is `bottom` `bottomRight` or `bottomLeft` (unit: pixels)',
        ty: 'number',
        default: '24',
      },
      {
        name: 'closeIcon',
        description: 'Custom close icon',
        ty: 'ReactNode',
        default: 'true',
      },
      {
        name: 'getContainer',
        description: 'Return the mount node for Notification',
        ty: '() => HTMLNode',
        default: '() => document.body',
      },
      {
        name: 'placement',
        description:
          'Position of Notification, can be one of `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`',
        ty: 'string',
        default: '`topRight`',
      },
      {
        name: 'showProgress',
        description: 'Show progress bar for auto-closing notification',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'pauseOnHover',
        description: 'keep the timer running or not on hover',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'rtl',
        description: 'Whether to enable RTL mode',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'stack',
        description: 'Notifications will be stacked when amount is over threshold',
        ty: 'boolean \\',
        default: '`{ threshold: number }`',
      },
      {
        name: 'top',
        description:
          'Distance from the top of the viewport, when `placement` is `top` `topRight` or `topLeft` (unit: pixels)',
        ty: 'number',
        default: '24',
      },
      {
        name: 'maxCount',
        description: 'Max Notification show, drop oldest if exceed limit',
        ty: 'number',
        default: '',
      },
    ],
    events: [
      {
        name: 'onClick',
        description: 'Specify a function that will be called when the notification is clicked',
        ty: 'function',
        default: '',
      },
      {
        name: 'onClose',
        description: 'Trigger when notification closed',
        ty: 'function',
        default: '',
      },
    ],
    methods: [],
    children: [
      {
        name: 'notification.config',
        props: [
          {
            name: 'bottom',
            description:
              'Distance from the bottom of the viewport, when `placement` is `bottom` `bottomRight` or `bottomLeft` (unit: pixels)',
            ty: 'number',
            default: '24',
          },
          {
            name: 'closeIcon',
            description: 'Custom close icon',
            ty: 'ReactNode',
            default: 'true',
          },
          {
            name: 'duration',
            description:
              'Time in seconds before Notification is closed. When set to 0 or null, it will never be closed automatically',
            ty: 'number',
            default: '4.5',
          },
          {
            name: 'getContainer',
            description: 'Return the mount node for Notification, but still display at fullScreen',
            ty: '() => HTMLNode',
            default: '() => document.body',
          },
          {
            name: 'placement',
            description:
              'Position of Notification, can be one of `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`',
            ty: 'string',
            default: '`topRight`',
          },
          {
            name: 'showProgress',
            description: 'Show progress bar for auto-closing notification',
            ty: 'boolean',
            default: '',
          },
          {
            name: 'pauseOnHover',
            description: 'keep the timer running or not on hover',
            ty: 'boolean',
            default: 'true',
          },
          {
            name: 'rtl',
            description: 'Whether to enable RTL mode',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'top',
            description:
              'Distance from the top of the viewport, when `placement` is `top` `topRight` or `topLeft` (unit: pixels)',
            ty: 'number',
            default: '24',
          },
          {
            name: 'maxCount',
            description: 'Max Notification show, drop oldest if exceed limit',
            ty: 'number',
            default: '',
          },
        ],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'alert',
    props: [
      {
        name: 'action',
        description: 'The action of Alert',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'afterClose',
        description: 'Called when close animation is finished',
        ty: '() => void',
        default: '',
      },
      {
        name: 'banner',
        description: 'Whether to show as banner',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'closable',
        description: 'The config of closable, >=5.15.0: support `aria-*`',
        ty: 'boolean \\',
        default: '({ closeIcon?: React.ReactNode } & React.AriaAttributes)',
      },
      {
        name: 'description',
        description: 'Additional content of Alert',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'icon',
        description: 'Custom icon, effective when `showIcon` is true',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'message',
        description: 'Content of Alert',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'showIcon',
        description: 'Whether to show icon',
        ty: 'boolean',
        default: 'false, in `banner` mode default is true',
      },
      {
        name: 'type',
        description: 'Type of Alert styles, options: `success`, `info`, `warning`, `error`',
        ty: 'string',
        default: '`info`, in `banner` mode default is `warning`',
      },
      {
        name: 'description',
        description: 'Custom error description to show',
        ty: 'ReactNode',
        default: '{{ error stack }}',
      },
      {
        name: 'message',
        description: 'Custom error message to show',
        ty: 'ReactNode',
        default: '{{ error }}',
      },
    ],
    events: [
      {
        name: 'onClose',
        description: 'Callback when Alert is closed',
        ty: '(e: MouseEvent) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'popconfirm',
    props: [
      {
        name: 'Param',
        description: 'Description',
        ty: 'Type',
        default: 'Default value',
      },
      {
        name: 'cancelButtonProps',
        description: 'The cancel button props',
        ty: '[ButtonProps](/components/button/#api)',
        default: '',
      },
      {
        name: 'cancelText',
        description: 'The text of the Cancel button',
        ty: 'string',
        default: '`Cancel`',
      },
      {
        name: 'disabled',
        description: 'Whether show popconfirm when click its childrenNode',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'icon',
        description: 'Customize icon of confirmation',
        ty: 'ReactNode',
        default: '&lt;ExclamationCircle />',
      },
      {
        name: 'okButtonProps',
        description: 'The ok button props',
        ty: '[ButtonProps](/components/button/#api)',
        default: '',
      },
      {
        name: 'okText',
        description: 'The text of the Confirm button',
        ty: 'string',
        default: '`OK`',
      },
      {
        name: 'okType',
        description: 'Button `type` of the Confirm button',
        ty: 'string',
        default: '`primary`',
      },
      {
        name: 'showCancel',
        description: 'Show cancel button',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'title',
        description: 'The title of the confirmation box',
        ty: 'ReactNode \\',
        default: '() => ReactNode',
      },
      {
        name: 'description',
        description: 'The description of the confirmation box title',
        ty: 'ReactNode \\',
        default: '() => ReactNode',
      },
    ],
    events: [
      {
        name: 'onCancel',
        description: 'A callback of cancel',
        ty: 'function(e)',
        default: '',
      },
      {
        name: 'onConfirm',
        description: 'A callback of confirmation',
        ty: 'function(e)',
        default: '',
      },
      {
        name: 'onPopupClick',
        description: 'A callback of popup click',
        ty: 'function(e)',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'skeleton',
    props: [
      {
        name: 'active',
        description: 'Show animation effect',
        ty: '',
        default: '',
      },
      {
        name: 'avatar',
        description: 'Show avatar placeholder',
        ty: 'boolean \\',
        default: '[SkeletonAvatarProps](#skeletonavatarprops)',
      },
      {
        name: 'loading',
        description: 'Display the skeleton when true',
        ty: '',
        default: '',
      },
      {
        name: 'paragraph',
        description: 'Show paragraph placeholder',
        ty: 'boolean \\',
        default: '[SkeletonParagraphProps](#skeletonparagraphprops)',
      },
      {
        name: 'round',
        description: 'Show paragraph and title radius when true',
        ty: '',
        default: '',
      },
      {
        name: 'title',
        description: 'Show title placeholder',
        ty: 'boolean \\',
        default: '[SkeletonTitleProps](#skeletontitleprops)',
      },
      {
        name: 'active',
        description: 'Show animation effect, only valid when used avatar independently',
        ty: '',
        default: '',
      },
      {
        name: 'shape',
        description: 'Set the shape of avatar',
        ty: '`circle` \\',
        default: '`square`',
      },
      {
        name: 'size',
        description: 'Set the size of avatar',
        ty: 'number \\',
        default: '`large` \\',
      },
      {
        name: 'width',
        description: 'Set the width of title',
        ty: 'number \\',
        default: 'string',
      },
      {
        name: 'rows',
        description: 'Set the row count of paragraph',
        ty: '',
        default: '',
      },
      {
        name: 'width',
        description:
          'Set the width of paragraph. When width is an Array, it can set the width of each row. Otherwise only set the last row width',
        ty: 'number \\',
        default: 'string \\',
      },
      {
        name: 'active',
        description: 'Show animation effect',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'block',
        description: 'Option to fit button width to its parent width',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'shape',
        description: 'Set the shape of button',
        ty: '`circle` \\',
        default: '`round` \\',
      },
      {
        name: 'size',
        description: 'Set the size of button',
        ty: '`large` \\',
        default: '`small` \\',
      },
      {
        name: 'active',
        description: 'Show animation effect',
        ty: '',
        default: '',
      },
      {
        name: 'size',
        description: 'Set the size of input',
        ty: '`large` \\',
        default: '`small` \\',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'layout',
    props: [
      {
        name: 'className',
        description: 'Container className',
        ty: '',
        default: '',
      },
      {
        name: 'hasSider',
        description:
          "Whether contain Sider in children, don't have to assign it normally. Useful in ssr avoid style flickering",
        ty: '',
        default: '',
      },
      {
        name: 'style',
        description: 'To customize the styles',
        ty: '',
        default: '',
      },
      {
        name: 'breakpoint',
        description: '[Breakpoints](/components/grid/#col) of the responsive layout',
        ty: '`xs` \\',
        default: '`sm` \\',
      },
      {
        name: 'className',
        description: 'Container className',
        ty: '',
        default: '',
      },
      {
        name: 'collapsed',
        description: 'To set the current status',
        ty: '',
        default: '',
      },
      {
        name: 'collapsedWidth',
        description:
          'Width of the collapsed sidebar, by setting to 0 a special trigger will appear',
        ty: '',
        default: '',
      },
      {
        name: 'collapsible',
        description: 'Whether can be collapsed',
        ty: '',
        default: '',
      },
      {
        name: 'defaultCollapsed',
        description: 'To set the initial status',
        ty: '',
        default: '',
      },
      {
        name: 'reverseArrow',
        description: 'Reverse direction of arrow, for a sider that expands from the right',
        ty: '',
        default: '',
      },
      {
        name: 'style',
        description: 'To customize the styles',
        ty: '',
        default: '',
      },
      {
        name: 'theme',
        description: 'Color theme of the sidebar',
        ty: '`light` \\',
        default: '`dark`',
      },
      {
        name: 'trigger',
        description: 'Specify the customized trigger, set to null to hide the trigger',
        ty: '',
        default: '',
      },
      {
        name: 'width',
        description: 'Width of the sidebar',
        ty: 'number \\',
        default: 'string',
      },
      {
        name: 'zeroWidthTriggerStyle',
        description:
          'To customize the styles of the special trigger that appears when `collapsedWidth` is 0',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onBreakpoint',
        description:
          'The callback function, executed when [breakpoints](/components/grid/#api) changed',
        ty: '',
        default: '',
      },
      {
        name: 'onCollapse',
        description:
          'The callback function, executed by clicking the trigger or activating the responsive layout',
        ty: '',
        default: '',
      },
    ],
    methods: [],
    children: [
      {
        name: 'breakpoint width',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'segmented',
    props: [
      {
        name: 'block',
        description: "Option to fit width to its parent\\'s width",
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'defaultValue',
        description: 'Default selected value',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'disabled',
        description: 'Disable all segments',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'options',
        description: 'Set children optional',
        ty: 'string\\[] \\',
        default: 'number\\[] \\',
      },
      {
        name: 'size',
        description: 'The size of the Segmented.',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'vertical',
        description: 'Orientation',
        ty: 'boolean',
        default: '`false`',
      },
      {
        name: 'value',
        description: 'Currently selected value',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'label',
        description: 'Display text for Segmented item',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'value',
        description: 'Value for Segmented item',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'icon',
        description: 'Display icon for Segmented item',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Disabled state of segmented item',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'className',
        description: 'The additional css class',
        ty: 'string',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'The callback function that is triggered when the state changes',
        ty: 'function(value: string \\',
        default: 'number)',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'cascader',
    props: [
      {
        name: 'allowClear',
        description: 'Show clear button',
        ty: 'boolean \\',
        default: '{ clearIcon?: ReactNode }',
      },
      {
        name: 'autoClearSearchValue',
        description:
          'Whether the current search will be cleared on selecting an item. Only applies when `multiple` is `true`',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'autoFocus',
        description: 'If get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'changeOnSelect',
        description: 'Change value on each selection if set to true, see above demo for details',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'className',
        description: 'The additional css class',
        ty: 'string',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'Initial selected value',
        ty: 'string\\[] \\',
        default: 'number\\[]',
      },
      {
        name: 'disabled',
        description: 'Whether disabled select',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'displayRender',
        description: 'The render function of displaying selected options',
        ty: '(label, selectedOptions) => ReactNode',
        default: 'label => label.join(`/`)',
      },
      {
        name: 'tagRender',
        description: 'Custom render function for tags in `multiple` mode',
        ty: '(label: string, onClose: function, value: string) => ReactNode',
        default: '',
      },
      {
        name: 'popupClassName',
        description: 'The additional className of popup overlay',
        ty: 'string',
        default: '',
      },
      {
        name: 'dropdownRender',
        description: 'Customize dropdown content',
        ty: '(menus: ReactNode) => ReactNode',
        default: '',
      },
      {
        name: 'expandIcon',
        description: 'Customize the current item expand icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'expandTrigger',
        description: 'expand current item when click or hover, one of `click` `hover`',
        ty: 'string',
        default: '`click`',
      },
      {
        name: 'fieldNames',
        description: 'Custom field name for label and value and children',
        ty: 'object',
        default: '{ label: `label`, value: `value`, children: `children` }',
      },
      {
        name: 'getPopupContainer',
        description:
          'Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010)',
        ty: 'function(triggerNode)',
        default: '() => document.body',
      },
      {
        name: 'loadData',
        description: 'To load option lazily, and it cannot work with `showSearch`',
        ty: '(selectedOptions) => void',
        default: '',
      },
      {
        name: 'maxTagCount',
        description: 'Max tag count to show. `responsive` will cost render performance',
        ty: 'number \\',
        default: '`responsive`',
      },
      {
        name: 'maxTagPlaceholder',
        description: 'Placeholder for not showing tags',
        ty: 'ReactNode \\',
        default: 'function(omittedValues)',
      },
      {
        name: 'maxTagTextLength',
        description: 'Max tag text length to show',
        ty: 'number',
        default: '',
      },
      {
        name: 'notFoundContent',
        description: 'Specify content to show when no result matches',
        ty: 'string',
        default: '`Not Found`',
      },
      {
        name: 'open',
        description: 'Set visible of cascader popup',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'options',
        description: 'The data options of cascade',
        ty: '[Option](#option)\\[]',
        default: '',
      },
      {
        name: 'placeholder',
        description: 'The input placeholder',
        ty: 'string',
        default: '',
      },
      {
        name: 'placement',
        description: 'Use preset popup align config from builtinPlacements',
        ty: '`bottomLeft` `bottomRight` `topLeft` `topRight`',
        default: '`bottomLeft`',
      },
      {
        name: 'showSearch',
        description: 'Whether show search input in single mode',
        ty: 'boolean \\',
        default: '[Object](#showsearch)',
      },
      {
        name: 'size',
        description: 'The input size',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning'",
      },
      {
        name: 'style',
        description: 'The additional style',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'suffixIcon',
        description: 'The custom suffix icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'value',
        description: 'The selected value',
        ty: 'string\\[] \\',
        default: 'number\\[]',
      },
      {
        name: 'variant',
        description: 'Variants of selector',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
      {
        name: 'multiple',
        description: 'Support multiple or not',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'removeIcon',
        description: 'The custom remove icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'showCheckedStrategy',
        description:
          'The way show selected item in box. ** `SHOW_CHILD`: ** just show child treeNode. **`Cascader.SHOW_PARENT`:** just show parent treeNode (when all child treeNode under the parent treeNode are checked)',
        ty: '`Cascader.SHOW_PARENT` \\',
        default: '`Cascader.SHOW_CHILD`',
      },
      {
        name: 'searchValue',
        description: 'Set search value, Need work with `showSearch`',
        ty: 'string',
        default: '',
      },
      {
        name: 'dropdownMenuColumnStyle',
        description: 'The style of the drop-down menu column',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'loadingIcon',
        description: 'The appearance of lazy loading (now is useless)',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'optionRender',
        description: 'Customize the rendering dropdown options',
        ty: '(option: Option) => React.ReactNode',
        default: '',
      },
      {
        name: 'filter',
        description:
          'The function will receive two arguments, inputValue and option, if the function returns true, the option will be included in the filtered set; Otherwise, it will be excluded',
        ty: 'function(inputValue, path): boolean',
        default: '',
      },
      {
        name: 'limit',
        description: 'Set the count of filtered items',
        ty: 'number \\',
        default: 'false',
      },
      {
        name: 'matchInputWidth',
        description:
          'Whether the width of list matches input, ([how it looks](https://github.com/ant-design/ant-design/issues/25779))',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'render',
        description: 'Used to render filtered options',
        ty: 'function(inputValue, path): ReactNode',
        default: '',
      },
      {
        name: 'sort',
        description: 'Used to sort filtered options',
        ty: 'function(a, b, inputValue)',
        default: '',
      },
      {
        name: 'Name',
        description: 'Description',
        ty: '',
        default: '',
      },
      {
        name: 'blur()',
        description: 'Remove focus',
        ty: '',
        default: '',
      },
      {
        name: 'focus()',
        description: 'Get focus',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Callback when finishing cascader select',
        ty: '(value, selectedOptions) => void',
        default: '',
      },
      {
        name: 'onDropdownVisibleChange',
        description: 'Callback when popup shown or hidden',
        ty: '(value) => void',
        default: '',
      },
      {
        name: 'onSearch',
        description: 'The callback function triggered when input changed',
        ty: '(search: string) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'checkbox',
    props: [
      {
        name: 'autoFocus',
        description: 'If get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'checked',
        description: 'Specifies whether the checkbox is selected',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'defaultChecked',
        description: 'Specifies the initial state: whether or not the checkbox is selected',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'If disable checkbox',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'indeterminate',
        description: 'The indeterminate checked state of checkbox',
        ty: 'boolean',
        default: 'false',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'The callback function that is triggered when the state changes',
        ty: '(e: CheckboxChangeEvent) => void',
        default: '',
      },
      {
        name: 'onBlur',
        description: 'Called when leaving the component',
        ty: 'function()',
        default: '',
      },
      {
        name: 'onFocus',
        description: 'Called when entering the component',
        ty: 'function()',
        default: '',
      },
    ],
    methods: [
      {
        name: 'blur()',
        description: 'Remove focus',
      },
      {
        name: 'focus()',
        description: 'Get focus',
      },
      {
        name: 'nativeElement',
        description: 'Returns the DOM node of the Checkbox',
      },
    ],
    children: [
      {
        name: 'Checkbox Group',
        props: [
          {
            name: 'defaultValue',
            description: 'Default selected value',
            ty: '(string \\',
            default: 'number)\\[]',
          },
          {
            name: 'disabled',
            description: 'If disable all checkboxes',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'name',
            description: 'The `name` property of all `input[type="checkbox"]` children',
            ty: 'string',
            default: '',
          },
          {
            name: 'options',
            description: 'Specifies options',
            ty: 'string\\[] \\',
            default: 'number\\[] \\',
          },
          {
            name: 'value',
            description: 'Used for setting the currently selected value',
            ty: '(string \\',
            default: 'number \\',
          },
        ],
        events: [
          {
            name: 'onChange',
            description: 'The callback function that is triggered when the state changes',
            ty: '(checkedValue: T[]) => void',
            default: '',
          },
        ],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'transfer',
    props: [
      {
        name: 'dataSource',
        description:
          'Used for setting the source data. The elements that are part of this array will be present the left column. Except the elements whose keys are included in `targetKeys` prop',
        ty: '[RecordType extends TransferItem = TransferItem](https://github.com/ant-design/ant-design/blob/1bf0bab2a7bc0a774119f501806e3e0e3a6ba283/components/transfer/index.tsx#L12)\\[]',
        default: '\\[]',
      },
      {
        name: 'disabled',
        description: 'Whether disabled transfer',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'selectionsIcon',
        description: 'custom dropdown icon',
        ty: 'React.ReactNode',
        default: '',
      },
      {
        name: 'filterOption',
        description:
          'A function to determine whether an item should show in search result list, only works when searching, (add `direction` support since 5.9.0+)',
        ty: '(inputValue, option, direction: `left` \\',
        default: '`right`): boolean',
      },
      {
        name: 'footer',
        description: 'A function used for rendering the footer',
        ty: '(props, { direction }) => ReactNode',
        default: '',
      },
      {
        name: 'listStyle',
        description: 'A custom CSS style used for rendering the transfer columns',
        ty: 'object \\',
        default: '({direction: `left` \\',
      },
      {
        name: 'locale',
        description: 'The i18n text including filter, empty text, item unit, etc',
        ty: '{ itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode \\',
        default: 'ReactNode[]; }',
      },
      {
        name: 'oneWay',
        description: 'Display as single direction style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'operations',
        description: 'A set of operations that are sorted from top to bottom',
        ty: 'string\\[]',
        default: '\\[`>`, `<`]',
      },
      {
        name: 'operationStyle',
        description: 'A custom CSS style used for rendering the operations column',
        ty: 'object',
        default: '',
      },
      {
        name: 'pagination',
        description: 'Use pagination. Not work in render props',
        ty: 'boolean \\',
        default:
          '{ pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean }',
      },
      {
        name: 'render',
        description:
          'The function to generate the item shown on a column. Based on an record (element of the dataSource array), this function should return a React element which is generated from that record. Also, it can return a plain object with `value` and `label`, `label` is a React element and `value` is for title',
        ty: '(record) => ReactNode',
        default: '',
      },
      {
        name: 'selectAllLabels',
        description: 'A set of customized labels for select all checkboxes on the header',
        ty: '(ReactNode \\',
        default: '(info: { selectedCount: number, totalCount: number }) => ReactNode)\\[]',
      },
      {
        name: 'selectedKeys',
        description: 'A set of keys of selected items',
        ty: 'string\\[] \\',
        default: 'number\\[]',
      },
      {
        name: 'showSearch',
        description: 'If included, a search box is shown on each column',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'showSelectAll',
        description: 'Show select all checkbox on the header',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning'",
      },
      {
        name: 'targetKeys',
        description: 'A set of keys of elements that are listed on the right column',
        ty: 'string\\[] \\',
        default: 'number\\[]',
      },
      {
        name: 'titles',
        description: 'A set of titles that are sorted from left to right',
        ty: 'ReactNode\\[]',
        default: '',
      },
      {
        name: 'direction',
        description: 'List render direction',
        ty: '`left` \\',
        default: '`right`',
      },
      {
        name: 'disabled',
        description: 'Disable list or not',
        ty: '',
        default: '',
      },
      {
        name: 'filteredItems',
        description: 'Filtered items',
        ty: '',
        default: '',
      },
      {
        name: 'selectedKeys',
        description: 'Selected items',
        ty: 'string\\[] \\',
        default: 'number\\[]',
      },
    ],
    events: [
      {
        name: 'onChange',
        description:
          'A callback function that is executed when the transfer between columns is complete',
        ty: '(targetKeys, direction, moveKeys): void',
        default: '',
      },
      {
        name: 'onScroll',
        description: 'A callback function which is executed when scroll options list',
        ty: '(direction, event): void',
        default: '',
      },
      {
        name: 'onSearch',
        description: 'A callback function which is executed when search field are changed',
        ty: '(direction: `left` \\',
        default: '`right`, value: string): void',
      },
      {
        name: 'onSelectChange',
        description: 'A callback function which is executed when selected items are changed',
        ty: '(sourceSelectedKeys, targetSelectedKeys): void',
        default: '',
      },
      {
        name: 'onItemSelect',
        description: 'Select item',
        ty: '(key: string \\',
        default: 'number, selected: boolean)',
      },
      {
        name: 'onItemSelectAll',
        description: 'Select a group of items',
        ty: '(keys: string\\[] \\',
        default: 'number\\[], selected: boolean)',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'splitter',
    props: [
      {
        name: 'layout',
        description: 'Layout direction',
        ty: '`horizontal` \\',
        default: '`vertical`',
      },
      {
        name: 'defaultSize',
        description: "Initial panel size support number for px or 'percent%' usage",
        ty: '`number \\',
        default: 'string`',
      },
      {
        name: 'min',
        description: "Minimum threshold support number for px or 'percent%' usage",
        ty: '`number \\',
        default: 'string`',
      },
      {
        name: 'max',
        description: "Maximum threshold support number for px or 'percent%' usage",
        ty: '`number \\',
        default: 'string`',
      },
      {
        name: 'size',
        description: "Controlled panel size support number for px or 'percent%' usage",
        ty: '`number \\',
        default: 'string`',
      },
      {
        name: 'collapsible',
        description: 'Quick folding',
        ty: '`boolean \\',
        default: '{ start?: boolean; end?: boolean }`',
      },
      {
        name: 'resizable',
        description: 'Whether to enable drag and drop',
        ty: '`boolean`',
        default: '`true`',
      },
    ],
    events: [
      {
        name: 'onResizeStart',
        description: 'Callback before dragging starts',
        ty: '`(sizes: number[]) => void`',
        default: '',
      },
      {
        name: 'onResize',
        description: 'Panel size change callback',
        ty: '`(sizes: number[]) => void`',
        default: '',
      },
      {
        name: 'onResizeEnd',
        description: 'Drag end callback',
        ty: '`(sizes: number[]) => void`',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'descriptions',
    props: [
      {
        name: 'bordered',
        description: 'Whether to display the border',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'colon',
        description:
          'Change default props `colon` value of Descriptions.Item. Indicates whether the colon after the label is displayed',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'column',
        description:
          'The number of `DescriptionItems` in a row,could be a number or a object like `{ xs: 8, sm: 16, md: 24}`,(Only set `bordered={true}` to take effect)',
        ty: 'number \\',
        default:
          '[Record<Breakpoint, number>](https://github.com/ant-design/ant-design/blob/84ca0d23ae52e4f0940f20b0e22eabe743f90dca/components/descriptions/index.tsx#L111C21-L111C56)',
      },
      {
        name: 'contentStyle',
        description: 'Customize content style',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'extra',
        description: 'The action area of the description list, placed at the top-right',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'items',
        description: 'Describe the contents of the list item',
        ty: '[DescriptionsItem](#descriptionitem)[]',
        default: '',
      },
      {
        name: 'labelStyle',
        description: 'Customize label style',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'layout',
        description: 'Define description layout',
        ty: '`horizontal` \\',
        default: '`vertical`',
      },
      {
        name: 'size',
        description: 'Set the size of the list. Can be set to `middle`,`small`, or not filled',
        ty: '`default` \\',
        default: '`middle` \\',
      },
      {
        name: 'title',
        description: 'The title of the description list, placed at the top',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'contentStyle',
        description: 'Customize content style',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'label',
        description: 'The description of the content',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'labelStyle',
        description: 'Customize label style',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'span',
        description: 'The number of columns included',
        ty: 'number \\',
        default: '[Screens](/components/grid#col)',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'slider',
    props: [
      {
        name: 'autoFocus',
        description: 'Whether get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'classNames',
        description: 'Semantic structure className',
        ty: '[Record<SemanticDOM, string>](#semantic-dom)',
        default: '',
      },
      {
        name: 'defaultValue',
        description:
          'The default value of slider. When `range` is false, use number, otherwise, use \\[number, number]',
        ty: 'number \\',
        default: '\\[number, number]',
      },
      {
        name: 'disabled',
        description: 'If true, the slider will not be intractable',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'keyboard',
        description: 'Support using keyboard to move handlers',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'dots',
        description: 'Whether the thumb can drag over tick only',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'included',
        description:
          'Make effect when `marks` not null, true means containment and false means coordinative',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'marks',
        description:
          'Tick mark of Slider, type of key must be `number`, and must in closed interval \\[min, max], each mark can declare its own style',
        ty: 'object',
        default: '{ number: ReactNode } \\',
      },
      {
        name: 'max',
        description: 'The maximum value the slider can slide to',
        ty: 'number',
        default: '100',
      },
      {
        name: 'min',
        description: 'The minimum value the slider can slide to',
        ty: 'number',
        default: '0',
      },
      {
        name: 'range',
        description: 'Dual thumb mode',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'reverse',
        description: 'Reverse the component',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'step',
        description:
          'The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When `step` is `null` but exist `marks`, the valid point will only be the `mark`, `min` and `max`',
        ty: 'number \\',
        default: 'null',
      },
      {
        name: 'styles',
        description: 'Semantic structure style',
        ty: '[Record<SemanticDOM, React.CSSProperties>](#semantic-dom)',
        default: '',
      },
      {
        name: 'tooltip',
        description: 'The tooltip relate props',
        ty: '[tooltip](#tooltip)',
        default: '',
      },
      {
        name: 'value',
        description:
          'The value of slider. When `range` is false, use number, otherwise, use \\[number, number]',
        ty: 'number \\',
        default: '\\[number, number]',
      },
      {
        name: 'vertical',
        description: 'If true, the slider will be vertical',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'draggableTrack',
        description: 'Whether range track can be drag',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'editable',
        description: "Dynamic edit nodes, can't be used with `draggableTrack`",
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'minCount',
        description: 'The minimum count of nodes',
        ty: 'number',
        default: '0',
      },
      {
        name: 'maxCount',
        description: 'The maximum count of nodes',
        ty: 'number',
        default: '',
      },
      {
        name: 'autoAdjustOverflow',
        description: 'Whether to automatically adjust the popup position',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'open',
        description:
          'If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'placement',
        description: 'Set Tooltip display position. Ref [Tooltip](/components/tooltip/)',
        ty: 'string',
        default: '',
      },
      {
        name: 'getPopupContainer',
        description:
          'The DOM container of the Tooltip, the default behavior is to create a div element in body',
        ty: '(triggerNode) => HTMLElement',
        default: '() => document.body',
      },
      {
        name: 'formatter',
        description:
          'Slider will pass its value to `formatter`, and display its value in Tooltip, and hide Tooltip when return value is null',
        ty: 'value => ReactNode \\',
        default: 'null',
      },
      {
        name: 'Name',
        description: 'Description',
        ty: '',
        default: '',
      },
      {
        name: 'blur()',
        description: 'Remove focus',
        ty: '',
        default: '',
      },
      {
        name: 'focus()',
        description: 'Get focus',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChangeComplete',
        description: 'Fire when `mouseup` or `keyup` is fired',
        ty: '(value) => void',
        default: '',
      },
      {
        name: 'onChange',
        description: "Callback function that is fired when the user changes the slider's value",
        ty: '(value) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'message',
    props: [
      {
        name: 'Argument',
        description: 'Description',
        ty: '',
        default: '',
      },
      {
        name: 'content',
        description: 'The content of the message',
        ty: 'ReactNode \\',
        default: 'config',
      },
      {
        name: 'duration',
        description: "Time(seconds) before auto-dismiss, don't dismiss if set to 0",
        ty: '',
        default: '',
      },
      {
        name: 'className',
        description: 'Customized CSS class',
        ty: '',
        default: '',
      },
      {
        name: 'content',
        description: 'The content of the message',
        ty: '',
        default: '',
      },
      {
        name: 'duration',
        description: "Time(seconds) before auto-dismiss, don't dismiss if set to 0",
        ty: '',
        default: '',
      },
      {
        name: 'icon',
        description: 'Customized Icon',
        ty: '',
        default: '',
      },
      {
        name: 'key',
        description: 'The unique identifier of the Message',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'style',
        description: 'Customized inline style',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onClose',
        description: 'Specify a function that will be called when the message is closed',
        ty: '',
        default: '',
      },
      {
        name: 'onClick',
        description: 'Specify a function that will be called when the message is clicked',
        ty: '',
        default: '',
      },
      {
        name: 'onClose',
        description: 'Specify a function that will be called when the message is closed',
        ty: '',
        default: '',
      },
    ],
    methods: [],
    children: [
      {
        name: 'message.config',
        props: [
          {
            name: 'Argument',
            description: 'Description',
            ty: 'Type',
            default: 'Default',
          },
          {
            name: 'duration',
            description: 'Time before auto-dismiss, in seconds',
            ty: 'number',
            default: '3',
          },
          {
            name: 'getContainer',
            description: 'Return the mount node for Message, but still display at fullScreen',
            ty: '() => HTMLElement',
            default: '() => document.body',
          },
          {
            name: 'maxCount',
            description: 'Max message show, drop oldest if exceed limit',
            ty: 'number',
            default: '',
          },
          {
            name: 'prefixCls',
            description: 'The prefix className of message node',
            ty: 'string',
            default: '`ant-message`',
          },
          {
            name: 'rtl',
            description: 'Whether to enable RTL mode',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'top',
            description: 'Distance from top',
            ty: 'number',
            default: '8',
          },
        ],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'mentions',
    props: [
      {
        name: 'allowClear',
        description: 'If allow to remove mentions content with clear icon',
        ty: 'boolean \\',
        default: '{ clearIcon?: ReactNode }',
      },
      {
        name: 'autoFocus',
        description: 'Auto get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'autoSize',
        description: 'Textarea height autosize feature, can be set to true \\',
        ty: 'false or an object { minRows: 2, maxRows: 6 }',
        default: 'boolean \\',
      },
      {
        name: 'defaultValue',
        description: 'Default value',
        ty: 'string',
        default: '',
      },
      {
        name: 'filterOption',
        description: 'Customize filter option logic',
        ty: 'false \\',
        default: '(input: string, option: OptionProps) => boolean',
      },
      {
        name: 'getPopupContainer',
        description: 'Set the mount HTML node for suggestions',
        ty: '() => HTMLElement',
        default: '',
      },
      {
        name: 'notFoundContent',
        description: 'Set mentions content when not match',
        ty: 'ReactNode',
        default: '`Not Found`',
      },
      {
        name: 'placement',
        description: 'Set popup placement',
        ty: '`top` \\',
        default: '`bottom`',
      },
      {
        name: 'prefix',
        description: 'Set trigger prefix keyword',
        ty: 'string \\',
        default: 'string\\[]',
      },
      {
        name: 'split',
        description: 'Set split string before and after selected mention',
        ty: 'string',
        default: '` `',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning' \\",
      },
      {
        name: 'validateSearch',
        description: 'Customize trigger search logic',
        ty: '(text: string, props: MentionsProps) => void',
        default: '',
      },
      {
        name: 'value',
        description: 'Set value of mentions',
        ty: 'string',
        default: '',
      },
      {
        name: 'variant',
        description: 'Variants of Input',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
      {
        name: 'options',
        description: 'Option Configuration',
        ty: '[Options](#option)',
        default: '\\[]',
      },
      {
        name: 'label',
        description: 'Title of the option',
        ty: '',
        default: '',
      },
      {
        name: 'key',
        description: 'The key value of the option',
        ty: '',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Optional',
        ty: '',
        default: '',
      },
      {
        name: 'className',
        description: 'className',
        ty: '',
        default: '',
      },
      {
        name: 'style',
        description: 'The style of the option',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onBlur',
        description: 'Trigger when mentions lose focus',
        ty: '() => void',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Trigger when value changed',
        ty: '(text: string) => void',
        default: '',
      },
      {
        name: 'onClear',
        description: 'Callback when click the clear button',
        ty: '() => void',
        default: '',
      },
      {
        name: 'onFocus',
        description: 'Trigger when mentions get focus',
        ty: '() => void',
        default: '',
      },
      {
        name: 'onResize',
        description: 'The callback function that is triggered when textarea resize',
        ty: 'function({ width, height })',
        default: '',
      },
      {
        name: 'onSearch',
        description: 'Trigger when prefix hit',
        ty: '(text: string, prefix: string) => void',
        default: '',
      },
      {
        name: 'onSelect',
        description: 'Trigger when user select the option',
        ty: '(option: OptionProps, prefix: string) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'collapse',
    props: [
      {
        name: 'accordion',
        description: 'If true, Collapse renders as Accordion',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'activeKey',
        description: 'Key of the active panel',
        ty: 'string\\[] \\',
        default: 'string <br/> number\\[] \\',
      },
      {
        name: 'bordered',
        description: 'Toggles rendering of the border around the collapse block',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'collapsible',
        description:
          'Specify whether the panels of children be collapsible or the trigger area of collapsible',
        ty: '`header` \\',
        default: '`icon` \\',
      },
      {
        name: 'defaultActiveKey',
        description: 'Key of the initial active panel',
        ty: 'string\\[] \\',
        default: 'string <br/> number\\[] \\',
      },
      {
        name: 'destroyInactivePanel',
        description: 'Destroy Inactive Panel',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'expandIcon',
        description: 'Allow to customize collapse icon',
        ty: '(panelProps) => ReactNode',
        default: '',
      },
      {
        name: 'expandIconPosition',
        description: 'Set expand icon position',
        ty: '`start` \\',
        default: '`end`',
      },
      {
        name: 'ghost',
        description: 'Make the collapse borderless and its background transparent',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'size',
        description: 'Set the size of collapse',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'items',
        description: 'collapse items content',
        ty: '[ItemType](#ItemType)',
        default: '',
      },
      {
        name: 'classNames',
        description: 'Semantic structure className',
        ty: '[`Record<header \\',
        default: 'body, string>`](#semantic-dom)',
      },
      {
        name: 'collapsible',
        description: 'Specify whether the panel be collapsible or the trigger area of collapsible',
        ty: '`header` \\',
        default: '`icon` \\',
      },
      {
        name: 'children',
        description: 'Body area content',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'extra',
        description: 'The extra element in the corner',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'forceRender',
        description:
          'Forced render of content on panel, instead of lazy rendering after clicking on header',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'key',
        description: 'Unique key identifying the panel from among its siblings',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'label',
        description: 'Title of the panel',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'showArrow',
        description:
          "If false, panel will not show arrow icon. If false, collapsible can't be set as icon",
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'styles',
        description: 'Semantic DOM style',
        ty: '[`Record<header \\',
        default: 'body, CSSProperties>`](#semantic-dom)',
      },
      {
        name: 'collapsible',
        description: 'Specify whether the panel be collapsible or the trigger area of collapsible',
        ty: '`header` \\',
        default: '`icon` \\',
      },
      {
        name: 'extra',
        description: 'The extra element in the corner',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'forceRender',
        description:
          'Forced render of content on panel, instead of lazy rendering after clicking on header',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'header',
        description: 'Title of the panel',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'key',
        description: 'Unique key identifying the panel from among its siblings',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'showArrow',
        description:
          "If false, panel will not show arrow icon. If false, collapsible can't be set as icon",
        ty: 'boolean',
        default: 'true',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Callback function executed when active panel is changed',
        ty: 'function',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'spin',
    props: [
      {
        name: 'delay',
        description: 'Specifies a delay in milliseconds for loading state (prevent flush)',
        ty: '',
        default: '',
      },
      {
        name: 'fullscreen',
        description: 'Display a backdrop with the `Spin` component',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'indicator',
        description: 'React node of the spinning indicator',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'percent',
        description:
          'The progress percentage, when set to `auto`, it will be an indeterminate progress',
        ty: 'number \\',
        default: "'auto'",
      },
      {
        name: 'size',
        description: 'The size of Spin, options: `small`, `default` and `large`',
        ty: 'string',
        default: '`default`',
      },
      {
        name: 'spinning',
        description: 'Whether Spin is visible',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'tip',
        description: 'Customize description content when Spin has children',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'wrapperClassName',
        description: 'The className of wrapper when Spin has children',
        ty: 'string',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'carousel',
    props: [
      {
        name: 'arrows',
        description: 'Whether to show switch arrows',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'autoplay',
        description: 'Whether to scroll automatically',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'autoplaySpeed',
        description: 'Delay between each auto scroll (in milliseconds)',
        ty: 'number',
        default: '3000',
      },
      {
        name: 'adaptiveHeight',
        description: "Adjust the slide's height automatically",
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'dotPosition',
        description: 'The position of the dots, which can be one of `top` `bottom` `left` `right`',
        ty: 'string',
        default: '`bottom`',
      },
      {
        name: 'dots',
        description:
          'Whether to show the dots at the bottom of the gallery, `object` for `dotsClass`',
        ty: 'boolean \\',
        default: '{ className?: string }',
      },
      {
        name: 'draggable',
        description: 'Enable scrollable via dragging on desktop',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'fade',
        description: 'Whether to use fade transition',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'infinite',
        description: 'Infinitely wrap around contents',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'speed',
        description: 'Animation speed in milliseconds',
        ty: 'number',
        default: '500',
      },
      {
        name: 'easing',
        description: 'Transition interpolation function name',
        ty: 'string',
        default: '`linear`',
      },
      {
        name: 'effect',
        description: 'Transition effect',
        ty: '`scrollx` \\',
        default: '`fade`',
      },
      {
        name: 'afterChange',
        description: 'Callback function called after the current index changes',
        ty: '(current: number) => void',
        default: '',
      },
      {
        name: 'beforeChange',
        description: 'Callback function called before the current index changes',
        ty: '(current: number, next: number) => void',
        default: '',
      },
      {
        name: 'waitForAnimate',
        description: 'Whether to wait for the animation when switching',
        ty: 'boolean',
        default: 'false',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'image',
    props: [
      {
        name: 'alt',
        description: 'Image description',
        ty: 'string',
        default: '',
      },
      {
        name: 'fallback',
        description: 'Load failure fault-tolerant src',
        ty: 'string',
        default: '',
      },
      {
        name: 'height',
        description: 'Image height',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'placeholder',
        description: 'Load placeholder, use default placeholder when set `true`',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'preview',
        description: 'preview config, disabled when `false`',
        ty: 'boolean \\',
        default: '[PreviewType](#previewtype)',
      },
      {
        name: 'src',
        description: 'Image path',
        ty: 'string',
        default: '',
      },
      {
        name: 'width',
        description: 'Image width',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'visible',
        description: 'Whether the preview dialog is visible or not',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'src',
        description: 'Custom preview src',
        ty: 'string',
        default: '',
      },
      {
        name: 'getContainer',
        description: 'The mounted node for preview dialog but still display at fullScreen',
        ty: 'string \\',
        default: 'HTMLElement \\',
      },
      {
        name: 'movable',
        description: 'whether can be moved',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'mask',
        description: 'Thumbnail mask',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'maskClassName',
        description: 'The className of the mask',
        ty: 'string',
        default: '',
      },
      {
        name: 'rootClassName',
        description: 'The classname of the preview root DOM',
        ty: 'string',
        default: '',
      },
      {
        name: 'scaleStep',
        description: '`1 + scaleStep` is the step to increase or decrease the scale',
        ty: 'number',
        default: '0.5',
      },
      {
        name: 'minScale',
        description: 'Min scale',
        ty: 'number',
        default: '1',
      },
      {
        name: 'maxScale',
        description: 'Max scale',
        ty: 'number',
        default: '50',
      },
      {
        name: 'closeIcon',
        description: 'Custom close icon',
        ty: 'React.ReactNode',
        default: '',
      },
      {
        name: 'forceRender',
        description: 'Force render preview dialog',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'toolbarRender',
        description: 'Custom toolbar render',
        ty: "(originalNode: React.ReactElement, info: Omit<[ToolbarRenderInfoType](#toolbarrenderinfotype), 'current' \\",
        default: "'total'>) => React.ReactNode",
      },
      {
        name: 'imageRender',
        description: 'Custom preview content',
        ty: '(originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype), image: [ImgInfo](#imginfo) }) => React.ReactNode',
        default: '',
      },
      {
        name: 'destroyOnClose',
        description: 'Destroy child elements when closing preview',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'preview',
        description: 'Preview config, `disabled` when false',
        ty: 'boolean \\',
        default: '[PreviewGroupType](#previewgrouptype)',
      },
      {
        name: 'items',
        description: 'Preview items',
        ty: 'string[] \\',
        default: '{ src: string, crossOrigin: string, ... }[]',
      },
      {
        name: 'fallback',
        description: 'Load failure fault-tolerant src',
        ty: 'string',
        default: '',
      },
      {
        name: 'visible',
        description: 'Whether the preview dialog is visible or not',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'getContainer',
        description: 'The mounted node for preview dialog but still display at fullScreen',
        ty: 'string \\',
        default: 'HTMLElement \\',
      },
      {
        name: 'movable',
        description: 'whether can be moved',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'current',
        description: 'The index of the current preview',
        ty: 'number',
        default: '',
      },
      {
        name: 'mask',
        description: 'Thumbnail mask',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'maskClassName',
        description: 'The className of the mask',
        ty: 'string',
        default: '',
      },
      {
        name: 'rootClassName',
        description: 'The classname of the preview root DOM',
        ty: 'string',
        default: '',
      },
      {
        name: 'scaleStep',
        description: '`1 + scaleStep` is the step to increase or decrease the scale',
        ty: 'number',
        default: '0.5',
      },
      {
        name: 'minScale',
        description: 'Min scale',
        ty: 'number',
        default: '1',
      },
      {
        name: 'maxScale',
        description: 'Max scale',
        ty: 'number',
        default: '50',
      },
      {
        name: 'closeIcon',
        description: 'Custom close icon',
        ty: 'React.ReactNode',
        default: '',
      },
      {
        name: 'forceRender',
        description: 'Force render preview dialog',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'countRender',
        description: 'Custom preview count content',
        ty: '(current: number, total: number) => React.ReactNode',
        default: '',
      },
      {
        name: 'toolbarRender',
        description: 'Custom toolbar render',
        ty: '(originalNode: React.ReactElement, info: [ToolbarRenderInfoType](#toolbarrenderinfotype)) => React.ReactNode',
        default: '',
      },
      {
        name: 'imageRender',
        description: 'Custom preview content',
        ty: '(originalNode: React.ReactElement, info: { transform: [TransformType](#transformtype), image: [ImgInfo](#imginfo), current: number }) => React.ReactNode',
        default: '',
      },
    ],
    events: [
      {
        name: 'onError',
        description: 'Load failed callback',
        ty: '(event: Event) => void',
        default: '',
      },
      {
        name: 'onTransform',
        description: 'Callback when the transform of image changed',
        ty: '{ transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) }',
        default: '',
      },
      {
        name: 'onVisibleChange',
        description: 'Callback when `visible` changed',
        ty: '(visible: boolean, prevVisible: boolean) => void',
        default: '',
      },
      {
        name: 'onTransform',
        description: 'Callback when the transform of image changed',
        ty: '{ transform: [TransformType](#transformtype), action: [TransformAction](#transformaction) }',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Callback when switch preview image',
        ty: '(current: number, prevCurrent: number) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'qr-code',
    props: [
      {
        name: ':--',
        description: ':--',
        ty: ':--',
        default: ':--',
      },
      {
        name: 'value',
        description: 'scanned text',
        ty: '',
        default: '',
      },
      {
        name: 'type',
        description: 'render type',
        ty: '`canvas \\',
        default: 'svg `',
      },
      {
        name: 'icon',
        description: 'include image url (only image link are supported)',
        ty: '',
        default: '',
      },
      {
        name: 'size',
        description: 'QRCode size',
        ty: '',
        default: '',
      },
      {
        name: 'iconSize',
        description: 'include image size',
        ty: 'number \\',
        default: '{ width: number; height: number }',
      },
      {
        name: 'color',
        description: 'QRCode Color',
        ty: '',
        default: '',
      },
      {
        name: 'bgColor',
        description: 'QRCode Background Color',
        ty: 'string',
        default: '`transparent`',
      },
      {
        name: 'bordered',
        description: 'Whether has border style',
        ty: '',
        default: '',
      },
      {
        name: 'errorLevel',
        description: 'Error Code Level',
        ty: "`'L' \\",
        default: "'M' \\",
      },
      {
        name: 'status',
        description: 'QRCode status',
        ty: '`active \\',
        default: 'expired \\',
      },
      {
        name: 'statusRender',
        description: 'custom status render',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onRefresh',
        description: 'callback',
        ty: '',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'config-provider',
    props: [
      {
        name: 'componentDisabled',
        description: 'Config antd component `disabled`',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'componentSize',
        description: 'Config antd component size',
        ty: '`small` \\',
        default: '`middle` \\',
      },
      {
        name: 'csp',
        description:
          'Set [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) config',
        ty: '{ nonce: string }',
        default: '',
      },
      {
        name: 'direction',
        description: 'Set direction of layout. See [demo](#config-provider-demo-direction)',
        ty: '`ltr` \\',
        default: '`rtl`',
      },
      {
        name: 'getPopupContainer',
        description:
          'To set the container of the popup element. The default is to create a `div` element in `body`',
        ty: 'function(triggerNode)',
        default: '() => document.body',
      },
      {
        name: 'getTargetContainer',
        description: 'Config Affix, Anchor scroll target container',
        ty: '() => HTMLElement',
        default: '() => window',
      },
      {
        name: 'iconPrefixCls',
        description: 'Set icon prefix className',
        ty: 'string',
        default: '`anticon`',
      },
      {
        name: 'locale',
        description:
          'Language package setting, you can find the packages in [antd/locale](http://unpkg.com/antd/locale/)',
        ty: 'object',
        default: '',
      },
      {
        name: 'popupMatchSelectWidth',
        description:
          'Determine whether the dropdown menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll',
        ty: 'boolean \\',
        default: 'number',
      },
      {
        name: 'popupOverflow',
        description:
          'Select like component popup logic. Can set to show in viewport or follow window scroll',
        ty: "'viewport' \\",
        default:
          '\'scroll\' <InlinePopover previewURL="https://user-images.githubusercontent.com/5378891/230344474-5b9f7e09-0a5d-49e8-bae8-7d2abed6c837.png"></InlinePopover>',
      },
      {
        name: 'prefixCls',
        description: 'Set prefix className',
        ty: 'string',
        default: '`ant`',
      },
      {
        name: 'renderEmpty',
        description: 'Set empty content of components. Ref [Empty](/components/empty/)',
        ty: 'function(componentName: string): ReactNode',
        default: '',
      },
      {
        name: 'theme',
        description: 'Set theme, ref [Customize Theme](/docs/react/customize-theme)',
        ty: '[Theme](/docs/react/customize-theme#theme)',
        default: '',
      },
      {
        name: 'variant',
        description: 'Set variant of data entry components',
        ty: '`outlined` \\',
        default: '`filled` \\',
      },
      {
        name: 'virtual',
        description: 'Disable virtual scroll when set to `false`',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'warning',
        description:
          'Config warning level, when `strict` is `false`, it will aggregate deprecated information into a single message',
        ty: '{ strict: boolean }',
        default: '',
      },
      {
        name: 'componentDisabled',
        description: 'antd component disabled state',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'componentSize',
        description: 'antd component size state',
        ty: '`small` \\',
        default: '`middle` \\',
      },
      {
        name: 'alert',
        description: 'Set Alert common props',
        ty: '{ className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode }',
        default: '',
      },
      {
        name: 'anchor',
        description: 'Set Anchor common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'avatar',
        description: 'Set Avatar common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'badge',
        description: 'Set Badge common props',
        ty: '{ className?: string, style?: React.CSSProperties, classNames?: [BadgeProps\\["classNames"\\]](/components/badge#api), styles?: [BadgeProps\\["styles"\\]](/components/badge#api) }',
        default: '',
      },
      {
        name: 'breadcrumb',
        description: 'Set Breadcrumb common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'button',
        description: 'Set Button common props',
        ty: '{ className?: string, style?: React.CSSProperties, classNames?: [ButtonProps\\["classNames"\\]](/components/button#api), styles?: [ButtonProps\\["styles"\\]](/components/button#api), autoInsertSpace?: boolean }',
        default: '',
      },
      {
        name: 'card',
        description: 'Set Card common props',
        ty: '{ className?: string, style?: React.CSSProperties, classNames?: [CardProps\\["classNames"\\]](/components/card#api), styles?: [CardProps\\["styles"\\]](/components/card#api) }',
        default: '',
      },
      {
        name: 'calendar',
        description: 'Set Calendar common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'carousel',
        description: 'Set Carousel common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'cascader',
        description: 'Set Cascader common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'checkbox',
        description: 'Set Checkbox common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'collapse',
        description: 'Set Collapse common props',
        ty: '{ className?: string, style?: React.CSSProperties, expandIcon?: (props) => ReactNode }',
        default: '',
      },
      {
        name: 'colorPicker',
        description: 'Set ColorPicker common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'datePicker',
        description: 'Set datePicker common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'rangePicker',
        description: 'Set rangePicker common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'descriptions',
        description: 'Set Descriptions common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'divider',
        description: 'Set Divider common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'drawer',
        description: 'Set Drawer common props',
        ty: '{ className?: string, style?: React.CSSProperties, classNames?: [DrawerProps\\["classNames"\\]](/components/drawer#api), styles?: [DrawerProps\\["styles"\\]](/components/drawer#api), closeIcon?: ReactNode }',
        default: '',
      },
      {
        name: 'dropdown',
        description: 'Set Dropdown common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'empty',
        description: 'Set Empty common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'flex',
        description: 'Set Flex common props',
        ty: '{ className?: string, style?: React.CSSProperties, vertical?: boolean }',
        default: '',
      },
      {
        name: 'floatButtonGroup',
        description: 'Set FloatButton.Group common props',
        ty: '{ closeIcon?: React.ReactNode }',
        default: '',
      },
      {
        name: 'form',
        description: 'Set Form common props',
        ty: '{ className?: string, style?: React.CSSProperties, validateMessages?: [ValidateMessages](/components/form/#validatemessages), requiredMark?: boolean \\',
        default: '`optional`, scrollToFirstError?: boolean \\',
      },
      {
        name: 'image',
        description: 'Set Image common props',
        ty: '{ className?: string, style?: React.CSSProperties, preview?: { closeIcon?: React.ReactNode } }',
        default: '',
      },
      {
        name: 'input',
        description: 'Set Input common props',
        ty: '{ autoComplete?: string, className?: string, style?: React.CSSProperties, allowClear?: boolean \\',
        default: '{ clearIcon?: ReactNode } }',
      },
      {
        name: 'textArea',
        description: 'Set TextArea common props',
        ty: '{ autoComplete?: string, className?: string, style?: React.CSSProperties, allowClear?: boolean \\',
        default: '{ clearIcon?: ReactNode } }',
      },
      {
        name: 'layout',
        description: 'Set Layout common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'list',
        description: 'Set List common props',
        ty: '{ className?: string, style?: React.CSSProperties, item?:{ classNames: [ListItemProps\\["classNames"\\]](/components/list#listitem), styles: [ListItemProps\\["styles"\\]](/components/list#listitem) } }',
        default: '',
      },
      {
        name: 'menu',
        description: 'Set Menu common props',
        ty: '{ className?: string, style?: React.CSSProperties, expandIcon?: ReactNode \\',
        default: 'props => ReactNode }',
      },
      {
        name: 'mentions',
        description: 'Set Mentions common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'message',
        description: 'Set Message common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'modal',
        description: 'Set Modal common props',
        ty: '{ className?: string, style?: React.CSSProperties, classNames?: [ModalProps\\["classNames"\\]](/components/modal#api), styles?: [ModalProps\\["styles"\\]](/components/modal#api), closeIcon?: React.ReactNode }',
        default: '',
      },
      {
        name: 'notification',
        description: 'Set Notification common props',
        ty: '{ className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode }',
        default: '',
      },
      {
        name: 'pagination',
        description: 'Set Pagination common props',
        ty: '{ showSizeChanger?: boolean, className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'progress',
        description: 'Set Progress common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'radio',
        description: 'Set Radio common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'rate',
        description: 'Set Rate common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'result',
        description: 'Set Result common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'skeleton',
        description: 'Set Skeleton common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'segmented',
        description: 'Set Segmented common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'select',
        description: 'Set Select common props',
        ty: '{ className?: string, showSearch?: boolean, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'slider',
        description: 'Set Slider common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'switch',
        description: 'Set Switch common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'space',
        description: 'Set Space common props, ref [Space](/components/space)',
        ty: '{ size: `small` \\',
        default: '`middle` \\',
      },
      {
        name: 'splitter',
        description: 'Set Splitter common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'spin',
        description: 'Set Spin common props',
        ty: '{ className?: string, style?: React.CSSProperties, indicator?: React.ReactElement }',
        default: '',
      },
      {
        name: 'statistic',
        description: 'Set Statistic common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'steps',
        description: 'Set Steps common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'table',
        description: 'Set Table common props',
        ty: '{ className?: string, style?: React.CSSProperties, expandable?: { expandIcon?: props => React.ReactNode } }',
        default: '',
      },
      {
        name: 'tabs',
        description: 'Set Tabs common props',
        ty: '{ className?: string, style?: React.CSSProperties, indicator?: { size?: GetIndicatorSize, align?: `start` \\',
        default: '`center` \\',
      },
      {
        name: 'tag',
        description: 'Set Tag common props',
        ty: '{ className?: string, style?: React.CSSProperties, closeIcon?: React.ReactNode }',
        default: '',
      },
      {
        name: 'timeline',
        description: 'Set Timeline common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'timePicker',
        description: 'Set TimePicker common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'tour',
        description: 'Set Tour common props',
        ty: '{ closeIcon?: React.ReactNode }',
        default: '',
      },
      {
        name: 'transfer',
        description: 'Set Transfer common props',
        ty: '{ className?: string, style?: React.CSSProperties, selectionsIcon?: React.ReactNode }',
        default: '',
      },
      {
        name: 'tree',
        description: 'Set Tree common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'typography',
        description: 'Set Typography common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'upload',
        description: 'Set Upload common props',
        ty: '{ className?: string, style?: React.CSSProperties }',
        default: '',
      },
      {
        name: 'wave',
        description: 'Config wave effect',
        ty: '{ disabled?: boolean, showEffect?: (node: HTMLElement, info: { className, token, component }) => void }',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [
      {
        name: 'How to contribute a new language?',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: 'Date-related components locale is not working?',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: 'Modal throw error when setting `getPopupContainer`?',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: "Why can't ConfigProvider props (like `prefixCls` and `theme`) affect ReactNode inside `message.info`, `notification.open`, `Modal.confirm`?",
        props: [],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: 'Locale is not working with Vite in production mode?',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: '`prefixCls` priority(The former is covered by the latter)',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'popover',
    props: [
      {
        name: 'Param',
        description: 'Description',
        ty: 'Type',
        default: 'Default value',
      },
      {
        name: 'content',
        description: 'Content of the card',
        ty: 'ReactNode \\',
        default: '() => ReactNode',
      },
      {
        name: 'title',
        description: 'Title of the card',
        ty: 'ReactNode \\',
        default: '() => ReactNode',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'watermark',
    props: [
      {
        name: 'width',
        description: 'The width of the watermark, the default value of `content` is its own width',
        ty: 'number',
        default: '120',
      },
      {
        name: 'height',
        description:
          'The height of the watermark, the default value of `content` is its own height',
        ty: 'number',
        default: '64',
      },
      {
        name: 'inherit',
        description: 'Pass the watermark to the pop-up component such as Modal, Drawer',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'rotate',
        description: 'When the watermark is drawn, the rotation Angle, unit `°`',
        ty: 'number',
        default: '-22',
      },
      {
        name: 'zIndex',
        description: 'The z-index of the appended watermark element',
        ty: 'number',
        default: '9',
      },
      {
        name: 'image',
        description:
          'Image source, it is recommended to export 2x or 3x image, high priority (support base64 format)',
        ty: 'string',
        default: '',
      },
      {
        name: 'content',
        description: 'Watermark text content',
        ty: 'string \\',
        default: 'string[]',
      },
      {
        name: 'font',
        description: 'Text style',
        ty: '[Font](#font)',
        default: '[Font](#font)',
      },
      {
        name: 'gap',
        description: 'The spacing between watermarks',
        ty: '\\[number, number\\]',
        default: '\\[100, 100\\]',
      },
      {
        name: 'offset',
        description:
          'The offset of the watermark from the upper left corner of the container. The default is `gap/2`',
        ty: '\\[number, number\\]',
        default: '\\[gap\\[0\\]/2, gap\\[1\\]/2\\]',
      },
      {
        name: 'color',
        description: 'font color',
        ty: '[CanvasFillStrokeStyles.fillStyle](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle)',
        default: 'rgba(0,0,0,.15)',
      },
      {
        name: 'fontSize',
        description: 'font size',
        ty: 'number',
        default: '16',
      },
      {
        name: 'fontWeight',
        description: 'font weight',
        ty: '`normal` \\',
        default: '`light` \\',
      },
      {
        name: 'fontFamily',
        description: 'font family',
        ty: 'string',
        default: 'sans-serif',
      },
      {
        name: 'fontStyle',
        description: 'font style',
        ty: '`none` \\',
        default: '`normal` \\',
      },
      {
        name: 'textAlign',
        description: 'specify the text alignment direction',
        ty: '[CanvasTextAlign](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign)',
        default: '`center`',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'button',
    props: [
      {
        name: 'autoInsertSpace',
        description:
          'We add a space between two Chinese characters by default, which can be removed by setting `autoInsertSpace` to `false`.',
        ty: 'boolean',
        default: '`true`',
      },
      {
        name: 'block',
        description: 'Option to fit button width to its parent width',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'classNames',
        description: 'Semantic DOM class',
        ty: '[Record<SemanticDOM, string>](#semantic-dom)',
        default: '',
      },
      {
        name: 'color',
        description: 'Set button color',
        ty: '`default` \\',
        default: '`primary` \\',
      },
      {
        name: 'danger',
        description:
          'Syntactic sugar. Set the danger status of button. will follow `color` if provided',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'Disabled state of button',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'ghost',
        description: 'Make background transparent and invert text and border colors',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'href',
        description: 'Redirect url of link button',
        ty: 'string',
        default: '',
      },
      {
        name: 'htmlType',
        description:
          'Set the original html `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#type)',
        ty: '`submit` \\',
        default: '`reset` \\',
      },
      {
        name: 'icon',
        description: 'Set the icon component of button',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'iconPosition',
        description: 'Set the icon position of button',
        ty: '`start` \\',
        default: '`end`',
      },
      {
        name: 'loading',
        description: 'Set the loading status of button',
        ty: 'boolean \\',
        default: '{ delay: number }',
      },
      {
        name: 'shape',
        description: 'Can be set button shape',
        ty: '`default` \\',
        default: '`circle` \\',
      },
      {
        name: 'size',
        description: 'Set the size of button',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'styles',
        description: 'Semantic DOM style',
        ty: '[Record<SemanticDOM, CSSProperties>](#semantic-dom)',
        default: '',
      },
      {
        name: 'target',
        description: 'Same as target attribute of a, works when href is specified',
        ty: 'string',
        default: '',
      },
      {
        name: 'type',
        description:
          'Syntactic sugar. Set button type. Will follow `variant` & `color` if provided',
        ty: '`primary` \\',
        default: '`dashed` \\',
      },
      {
        name: 'variant',
        description: 'Set button variant',
        ty: '`outlined` \\',
        default: '`dashed` \\',
      },
    ],
    events: [
      {
        name: 'onClick',
        description: 'Set the handler to handle `click` event',
        ty: '(event: React.MouseEvent<HTMLElement, MouseEvent>) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'steps',
    props: [
      {
        name: 'className',
        description: 'Additional class to Steps',
        ty: 'string',
        default: '',
      },
      {
        name: 'current',
        description:
          'To set the current step, counting from 0. You can overwrite this state by using `status` of `Step`',
        ty: 'number',
        default: '0',
      },
      {
        name: 'direction',
        description: 'To specify the direction of the step bar, `horizontal` or `vertical`',
        ty: 'string',
        default: '`horizontal`',
      },
      {
        name: 'initial',
        description: 'Set the initial step, counting from 0',
        ty: 'number',
        default: '0',
      },
      {
        name: 'labelPlacement',
        description: 'Place title and description with `horizontal` or `vertical` direction',
        ty: 'string',
        default: '`horizontal`',
      },
      {
        name: 'percent',
        description:
          'Progress circle percentage of current step in `process` status (only works on basic Steps)',
        ty: 'number',
        default: '',
      },
      {
        name: 'progressDot',
        description:
          'Steps with progress dot style, customize the progress dot by setting it to a function. labelPlacement will be `vertical`',
        ty: 'boolean \\',
        default: '(iconDot, {index, status, title, description}) => ReactNode',
      },
      {
        name: 'responsive',
        description: 'Change to vertical direction when screen width smaller than `532px`',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'size',
        description:
          'To specify the size of the step bar, `default` and `small` are currently supported',
        ty: 'string',
        default: '`default`',
      },
      {
        name: 'status',
        description:
          'To specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error`',
        ty: 'string',
        default: '`process`',
      },
      {
        name: 'type',
        description:
          'Type of steps, can be set to one of the following values: `default` `navigation` `inline`',
        ty: 'string',
        default: '`default`',
      },
      {
        name: 'items',
        description: 'StepItem content',
        ty: '[StepItem](#stepitem)',
        default: '[]',
      },
      {
        name: 'className',
        description: 'Additional class to Steps',
        ty: 'string',
        default: '',
      },
      {
        name: 'current',
        description:
          'To set the current step, counting from 0. You can overwrite this state by using `status` of `Step`',
        ty: 'number',
        default: '0',
      },
      {
        name: 'initial',
        description: 'Set the initial step, counting from 0',
        ty: 'number',
        default: '0',
      },
      {
        name: 'status',
        description:
          'To specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error`',
        ty: 'string',
        default: '`process`',
      },
      {
        name: 'items',
        description: 'StepItem content. not supported: `icon` `subtitle`',
        ty: '[StepItem](#stepitem)',
        default: '[]',
      },
      {
        name: 'description',
        description: 'Description of the step, optional property',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Disable click',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'icon',
        description: 'Icon of the step, optional property',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'status',
        description:
          'To specify the status. It will be automatically set by `current` of `Steps` if not configured. Optional values are: `wait` `process` `finish` `error`',
        ty: 'string',
        default: '`wait`',
      },
      {
        name: 'subTitle',
        description: 'Subtitle of the step',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'title',
        description: 'Title of the step',
        ty: 'ReactNode',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Trigger when Step is changed',
        ty: '(current) => void',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Trigger when Step is changed',
        ty: '(current) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'date-picker',
    props: [
      {
        name: 'allowClear',
        description: 'Customize clear button',
        ty: 'boolean \\',
        default: '{ clearIcon?: ReactNode }',
      },
      {
        name: 'autoFocus',
        description: 'If get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'className',
        description: 'The picker className',
        ty: 'string',
        default: '',
      },
      {
        name: 'dateRender',
        description: 'Custom rendering function for date cells, >= 5.4.0 use `cellRender` instead.',
        ty: 'function(currentDate: dayjs, today: dayjs) => React.ReactNode',
        default: '',
      },
      {
        name: 'cellRender',
        description: 'Custom rendering function for picker cells',
        ty: "(current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\",
        default: "'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\",
      },
      {
        name: 'components',
        description: 'Custom panels',
        ty: 'Record<Panel \\',
        default: "'input', React.ComponentType>",
      },
      {
        name: 'disabled',
        description: 'Determine whether the DatePicker is disabled',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabledDate',
        description: 'Specify the date that cannot be selected',
        ty: '(currentDate: dayjs, info: { from?: dayjs, type: Picker }) => boolean',
        default: '',
      },
      {
        name: 'format',
        description:
          'To set the date format, support multi-format matching when it is an array, display the first one shall prevail. refer to [dayjs#format](https://day.js.org/docs/en/display/format). for example: [Custom Format](#date-picker-demo-format)',
        ty: '[formatType](#formattype)',
        default:
          '[rc-picker](https://github.com/react-component/picker/blob/f512f18ed59d6791280d1c3d7d37abbb9867eb0b/src/utils/uiUtil.ts#L155-L177)',
      },
      {
        name: 'order',
        description: 'Auto order date when multiple or range selection',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'popupClassName',
        description: 'To customize the className of the popup calendar',
        ty: 'string',
        default: '',
      },
      {
        name: 'preserveInvalidOnBlur',
        description: 'Not clean input on blur even when the typing is invalidate',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'getPopupContainer',
        description:
          'To set the container of the floating layer, while the default is to create a `div` element in `body`',
        ty: 'function(trigger)',
        default: '',
      },
      {
        name: 'inputReadOnly',
        description:
          'Set the `readonly` attribute of the input tag (avoids virtual keyboard on touch devices)',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'locale',
        description: 'Localization configuration',
        ty: 'object',
        default:
          '[default](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)',
      },
      {
        name: 'minDate',
        description: 'The minimum date, which also limits the range of panel switching',
        ty: 'dayjs',
        default: '',
      },
      {
        name: 'maxDate',
        description: 'The maximum date, which also limits the range of panel switching',
        ty: 'dayjs',
        default: '',
      },
      {
        name: 'mode',
        description:
          'The picker panel mode（ [Cannot select year or month anymore?](/docs/react/faq#when-set-mode-to-datepickerrangepicker-cannot-select-year-or-month-anymore) )',
        ty: '`time` \\',
        default: '`date` \\',
      },
      {
        name: 'needConfirm',
        description:
          'Need click confirm button to trigger value change. Default `false` when `multiple`',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'nextIcon',
        description: 'The custom next icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'open',
        description: 'The open state of picker',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'panelRender',
        description: 'Customize panel render',
        ty: '(panelNode) => ReactNode',
        default: '',
      },
      {
        name: 'picker',
        description: 'Set picker type',
        ty: '`date` \\',
        default: '`week` \\',
      },
      {
        name: 'placeholder',
        description: 'The placeholder of date input',
        ty: 'string \\',
        default: '\\[string,string]',
      },
      {
        name: 'placement',
        description: 'The position where the selection box pops up',
        ty: '`bottomLeft` `bottomRight` `topLeft` `topRight`',
        default: 'bottomLeft',
      },
      {
        name: 'popupStyle',
        description: 'To customize the style of the popup calendar',
        ty: 'CSSProperties',
        default: '{}',
      },
      {
        name: 'presets',
        description:
          'The preset ranges for quick selection, Since `5.8.0`, preset value supports callback function.',
        ty: '{ label: React.ReactNode, value: Dayjs \\',
        default: '(() => Dayjs) }\\[]',
      },
      {
        name: 'prevIcon',
        description: 'The custom prev icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'size',
        description:
          'To determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning'",
      },
      {
        name: 'style',
        description: 'To customize the style of the input box',
        ty: 'CSSProperties',
        default: '{}',
      },
      {
        name: 'suffixIcon',
        description: 'The custom suffix icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'superNextIcon',
        description: 'The custom super next icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'superPrevIcon',
        description: 'The custom super prev icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'variant',
        description: 'Variants of picker',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
      {
        name: 'Name',
        description: 'Description',
        ty: '',
        default: '',
      },
      {
        name: 'blur()',
        description: 'Remove focus',
        ty: '',
        default: '',
      },
      {
        name: 'focus()',
        description: 'Get focus',
        ty: '',
        default: '',
      },
      {
        name: 'defaultPickerValue',
        description: 'Default panel date, will be reset when panel open',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'defaultValue',
        description:
          'To set default date, if start time or end time is null or undefined, the date range will be an open interval',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'disabledTime',
        description: 'To specify the time that cannot be selected',
        ty: 'function(date)',
        default: '',
      },
      {
        name: 'format',
        description:
          'To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format)',
        ty: '[formatType](#formattype)',
        default: '`YYYY-MM-DD`',
      },
      {
        name: 'multiple',
        description: 'Enable multiple selection. Not support `showTime`',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'pickerValue',
        description:
          'Panel date. Used for controlled switching of panel date. Work with `onPanelChange`',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'renderExtraFooter',
        description: 'Render extra footer in panel',
        ty: '(mode) => React.ReactNode',
        default: '',
      },
      {
        name: 'showNow',
        description: 'Show the fast access of current datetime',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'showTime',
        description: 'To provide an additional time selection',
        ty: 'object \\',
        default: 'boolean',
      },
      {
        name: 'showTime.defaultValue',
        description:
          'To set default time of selected date, [demo](#date-picker-demo-disabled-date)',
        ty: '[dayjs](https://day.js.org/)',
        default: 'dayjs()',
      },
      {
        name: 'showWeek',
        description: 'Show week info when in DatePicker',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'value',
        description: 'To set date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'To set default date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'format',
        description:
          'To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format)',
        ty: '[formatType](#formattype)',
        default: '`YYYY`',
      },
      {
        name: 'multiple',
        description: 'Enable multiple selection',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'renderExtraFooter',
        description: 'Render extra footer in panel',
        ty: '() => React.ReactNode',
        default: '',
      },
      {
        name: 'value',
        description: 'To set date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'To set default date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'format',
        description:
          'To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format)',
        ty: '[formatType](#formattype)',
        default: '`YYYY-\\QQ`',
      },
      {
        name: 'multiple',
        description: 'Enable multiple selection',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'renderExtraFooter',
        description: 'Render extra footer in panel',
        ty: '() => React.ReactNode',
        default: '',
      },
      {
        name: 'value',
        description: 'To set date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'To set default date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'format',
        description:
          'To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format)',
        ty: '[formatType](#formattype)',
        default: '`YYYY-MM`',
      },
      {
        name: 'multiple',
        description: 'Enable multiple selection',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'renderExtraFooter',
        description: 'Render extra footer in panel',
        ty: '() => React.ReactNode',
        default: '',
      },
      {
        name: 'value',
        description: 'To set date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'To set default date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'format',
        description:
          'To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format)',
        ty: '[formatType](#formattype)',
        default: '`YYYY-wo`',
      },
      {
        name: 'multiple',
        description: 'Enable multiple selection',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'renderExtraFooter',
        description: 'Render extra footer in panel',
        ty: '(mode) => React.ReactNode',
        default: '',
      },
      {
        name: 'value',
        description: 'To set date',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'allowEmpty',
        description: 'Allow start or end input leave empty',
        ty: '\\[boolean, boolean]',
        default: '\\[false, false]',
      },
      {
        name: 'cellRender',
        description: 'Custom rendering function for picker cells',
        ty: "(current: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\",
        default: "'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\",
      },
      {
        name: 'dateRender',
        description: 'Custom rendering function for date cells, >= 5.4.0 use `cellRender` instead.',
        ty: 'function(currentDate: dayjs, today: dayjs) => React.ReactNode',
        default: '',
      },
      {
        name: 'defaultPickerValue',
        description: 'Default panel date, will be reset when panel open',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'To set default date',
        ty: '\\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)]',
        default: '',
      },
      {
        name: 'disabled',
        description: 'If disable start or end',
        ty: '\\[boolean, boolean]',
        default: '',
      },
      {
        name: 'disabledTime',
        description: 'To specify the time that cannot be selected',
        ty: 'function(date: dayjs, partial: `start` \\',
        default: '`end`, info: { from?: dayjs })',
      },
      {
        name: 'format',
        description:
          'To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format)',
        ty: '[formatType](#formattype)',
        default: '`YYYY-MM-DD HH:mm:ss`',
      },
      {
        name: 'id',
        description: 'Config input ids',
        ty: '{ start?: string, end?: string }',
        default: '',
      },
      {
        name: 'pickerValue',
        description:
          'Panel date. Used for controlled switching of panel date. Work with `onPanelChange`',
        ty: '[dayjs](https://day.js.org/)',
        default: '',
      },
      {
        name: 'presets',
        description:
          'The preset ranges for quick selection, Since `5.8.0`, preset value supports callback function.',
        ty: '{ label: React.ReactNode, value: (Dayjs \\',
        default: '(() => Dayjs))\\[] }\\[]',
      },
      {
        name: 'renderExtraFooter',
        description: 'Render extra footer in panel',
        ty: '() => React.ReactNode',
        default: '',
      },
      {
        name: 'separator',
        description: 'Set separator between inputs',
        ty: 'React.ReactNode',
        default: '`<SwapRightOutlined />`',
      },
      {
        name: 'showTime',
        description: 'To provide an additional time selection',
        ty: 'object \\',
        default: 'boolean',
      },
      {
        name: 'showTime.defaultValue',
        description:
          'To set default time of selected date, [demo](#date-picker-demo-disabled-date)',
        ty: '[dayjs](https://day.js.org/)\\[]',
        default: '\\[dayjs(), dayjs()]',
      },
      {
        name: 'value',
        description: 'To set date',
        ty: '\\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)]',
        default: '',
      },
    ],
    events: [
      {
        name: 'onOpenChange',
        description:
          'Callback function, can be executed whether the popup calendar is popped up or closed',
        ty: 'function(open)',
        default: '',
      },
      {
        name: 'onPanelChange',
        description: 'Callback when picker panel mode is changed',
        ty: 'function(value, mode)',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Callback function, can be executed when the selected time is changing',
        ty: 'function(date: dayjs, dateString: string)',
        default: '',
      },
      {
        name: 'onOk',
        description: 'Callback when click ok button',
        ty: 'function()',
        default: '',
      },
      {
        name: 'onPanelChange',
        description: 'Callback function for panel changing',
        ty: 'function(value, mode)',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Callback function, can be executed when the selected time is changing',
        ty: 'function(date: dayjs, dateString: string)',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Callback function, can be executed when the selected time is changing',
        ty: 'function(date: dayjs, dateString: string)',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Callback function, can be executed when the selected time is changing',
        ty: 'function(date: dayjs, dateString: string)',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Callback function, can be executed when the selected time is changing',
        ty: 'function(date: dayjs, dateString: string)',
        default: '',
      },
      {
        name: 'onCalendarChange',
        description:
          'Callback function, can be executed when the start time or the end time of the range is changing. `info` argument is added in 4.4.0',
        ty: 'function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string], info: { range:`start`\\',
        default: '`end` })',
      },
      {
        name: 'onChange',
        description: 'Callback function, can be executed when the selected time is changing',
        ty: 'function(dates: \\[dayjs, dayjs], dateStrings: \\[string, string])',
        default: '',
      },
      {
        name: 'onFocus',
        description: 'Trigger when get focus',
        ty: "function(event, { range: 'start' \\",
        default: "'end' })",
      },
      {
        name: 'onBlur',
        description: 'Trigger when lose focus',
        ty: "function(event, { range: 'start' \\",
        default: "'end' })",
      },
    ],
    methods: [],
    children: [
      {
        name: 'Date-related components locale is not working?',
        props: [],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'table',
    props: [
      {
        name: 'bordered',
        description: 'Whether to show all table borders',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'columns',
        description: 'Columns of table',
        ty: '[ColumnsType](#column)\\[]',
        default: '',
      },
      {
        name: 'components',
        description: 'Override default table elements',
        ty: '[TableComponents](https://github.com/react-component/table/blob/75ee0064e54a4b3215694505870c9d6c817e9e4a/src/interface.ts#L129)',
        default: '',
      },
      {
        name: 'dataSource',
        description: 'Data record array to be displayed',
        ty: 'object\\[]',
        default: '',
      },
      {
        name: 'expandable',
        description: 'Config expandable content',
        ty: '[expandable](#expandable)',
        default: '',
      },
      {
        name: 'footer',
        description: 'Table footer renderer',
        ty: 'function(currentPageData)',
        default: '',
      },
      {
        name: 'getPopupContainer',
        description: 'The render container of dropdowns in table',
        ty: '(triggerNode) => HTMLElement',
        default: '() => TableHtmlElement',
      },
      {
        name: 'loading',
        description: 'Loading status of table',
        ty: 'boolean \\',
        default: '[Spin Props](/components/spin/#api)',
      },
      {
        name: 'locale',
        description: 'The i18n text including filter, sort, empty text, etc',
        ty: 'object',
        default:
          '[Default Value](https://github.com/ant-design/ant-design/blob/6dae4a7e18ad1ba193aedd5ab6867e1d823e2aa4/components/locale/en_US.tsx#L19-L37)',
      },
      {
        name: 'pagination',
        description:
          'Config of pagination. You can ref table pagination [config](#pagination) or full [`pagination`](/components/pagination/) document, hide it by setting it to `false`',
        ty: 'object \\',
        default: '`false`',
      },
      {
        name: 'rowClassName',
        description: "Row's className",
        ty: 'function(record, index): string',
        default: '',
      },
      {
        name: 'rowKey',
        description: "Row's unique key, could be a string or function that returns a string",
        ty: 'string \\',
        default: 'function(record): string',
      },
      {
        name: 'rowSelection',
        description: 'Row selection [config](#rowselection)',
        ty: 'object',
        default: '',
      },
      {
        name: 'rowHoverable',
        description: 'Row hover',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'scroll',
        description: 'Whether the table can be scrollable, [config](#scroll)',
        ty: 'object',
        default: '',
      },
      {
        name: 'showHeader',
        description: 'Whether to show table header',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'showSorterTooltip',
        description:
          'The header show next sorter direction tooltip. It will be set as the property of Tooltip if its type is object',
        ty: 'boolean \\',
        default: "[Tooltip props](/components/tooltip/#api) & `{target?: 'full-header' \\",
      },
      {
        name: 'size',
        description: 'Size of table',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'sortDirections',
        description: 'Supported sort way, could be `ascend`, `descend`',
        ty: 'Array',
        default: '\\[`ascend`, `descend`]',
      },
      {
        name: 'sticky',
        description: 'Set sticky header and scroll bar',
        ty: 'boolean \\',
        default:
          '`{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}`',
      },
      {
        name: 'summary',
        description: 'Summary content',
        ty: '(currentData) => ReactNode',
        default: '',
      },
      {
        name: 'tableLayout',
        description:
          'The [table-layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) attribute of table element',
        ty: '- \\',
        default: '`auto` \\',
      },
      {
        name: 'title',
        description: 'Table title renderer',
        ty: 'function(currentPageData)',
        default: '',
      },
      {
        name: 'virtual',
        description: 'Support virtual list',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'nativeElement',
        description: 'The wrap element',
        ty: '',
        default: '',
      },
      {
        name: 'scrollTo',
        description: 'Trigger to scroll to target position. `key` match with record `rowKey`',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Callback executed when pagination, filters or sorter is changed',
        ty: 'function(pagination, filters, sorter, extra: { currentDataSource: \\[], action: `paginate` \\',
        default: '`sort` \\',
      },
      {
        name: 'onHeaderRow',
        description: 'Set props on per header row',
        ty: 'function(columns, index)',
        default: '',
      },
      {
        name: 'onRow',
        description: 'Set props on per row',
        ty: 'function(record, index)',
        default: '',
      },
      {
        name: 'onScroll',
        description:
          'Triggered when the table body is scrolled. Note that only vertical scrolling will trigger the event when `virtual`',
        ty: 'function(event)',
        default: '',
      },
    ],
    methods: [],
    children: [
      {
        name: 'onRow usage',
        props: [
          {
            name: 'align',
            description: 'The specify which way that column is aligned',
            ty: '`left` \\',
            default: '`right` \\',
          },
          {
            name: 'className',
            description: 'The className of this column',
            ty: 'string',
            default: '',
          },
          {
            name: 'colSpan',
            description: "Span of this column's title",
            ty: 'number',
            default: '',
          },
          {
            name: 'dataIndex',
            description: 'Display field of the data record, support nest path by string array',
            ty: 'string \\',
            default: 'string\\[]',
          },
          {
            name: 'defaultFilteredValue',
            description: 'Default filtered values',
            ty: 'string\\[]',
            default: '',
          },
          {
            name: 'filterResetToDefaultFilteredValue',
            description: 'click the reset button, whether to restore the default filter',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'defaultSortOrder',
            description: 'Default order of sorted values',
            ty: '`ascend` \\',
            default: '`descend`',
          },
          {
            name: 'ellipsis',
            description:
              'The ellipsis cell content, not working with sorter and filters for now.<br />tableLayout would be `fixed` when `ellipsis` is `true` or `{ showTitle?: boolean }`',
            ty: 'boolean \\',
            default: '{showTitle?: boolean }',
          },
          {
            name: 'filterDropdown',
            description: 'Customized filter overlay',
            ty: 'ReactNode \\',
            default:
              '(props: [FilterDropdownProps](https://github.com/ant-design/ant-design/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode',
          },
          {
            name: 'filterDropdownOpen',
            description: 'Whether `filterDropdown` is visible',
            ty: 'boolean',
            default: '',
          },
          {
            name: 'filtered',
            description: 'Whether the `dataSource` is filtered',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'filteredValue',
            description: 'Controlled filtered value, filter icon will highlight',
            ty: 'string\\[]',
            default: '',
          },
          {
            name: 'filterIcon',
            description: 'Customized filter icon',
            ty: 'ReactNode \\',
            default: '(filtered: boolean) => ReactNode',
          },
          {
            name: 'filterOnClose',
            description: 'Whether to trigger filter when the filter menu closes',
            ty: 'boolean',
            default: 'true',
          },
          {
            name: 'filterMultiple',
            description: 'Whether multiple filters can be selected',
            ty: 'boolean',
            default: 'true',
          },
          {
            name: 'filterMode',
            description: 'To specify the filter interface',
            ty: "'menu' \\",
            default: "'tree'",
          },
          {
            name: 'filterSearch',
            description: 'Whether to be searchable for filter menu',
            ty: 'boolean \\',
            default: 'function(input, record):boolean',
          },
          {
            name: 'filters',
            description: 'Filter menu config',
            ty: 'object\\[]',
            default: '',
          },
          {
            name: 'fixed',
            description:
              "(IE not support) Set column to be fixed: `true`(same as left) `'left'` `'right'`",
            ty: 'boolean \\',
            default: 'string',
          },
          {
            name: 'key',
            description:
              "Unique key of this column, you can ignore this prop if you've set a unique `dataIndex`",
            ty: 'string',
            default: '',
          },
          {
            name: 'render',
            description: 'Renderer of the table cell. The return value should be a ReactNode',
            ty: 'function(text, record, index) {}',
            default: '',
          },
          {
            name: 'responsive',
            description:
              'The list of breakpoints at which to display this column. Always visible if not set',
            ty: '[Breakpoint](https://github.com/ant-design/ant-design/blob/015109b42b85c63146371b4e32b883cf97b088e8/components/_util/responsiveObserve.ts#L1)\\[]',
            default: '',
          },
          {
            name: 'rowScope',
            description: 'Set scope attribute for all cells in this column',
            ty: '`row` \\',
            default: '`rowgroup`',
          },
          {
            name: 'shouldCellUpdate',
            description: 'Control cell render logic',
            ty: '(record, prevRecord) => boolean',
            default: '',
          },
          {
            name: 'showSorterTooltip',
            description:
              'If header show next sorter direction tooltip, override `showSorterTooltip` in table',
            ty: 'boolean \\',
            default: "[Tooltip props](/components/tooltip/) & `{target?: 'full-header' \\",
          },
          {
            name: 'sortDirections',
            description:
              'Supported sort way, override `sortDirections` in `Table`, could be `ascend`, `descend`',
            ty: 'Array',
            default: '\\[`ascend`, `descend`]',
          },
          {
            name: 'sorter',
            description:
              "Sort function for local sort, see [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)'s compareFunction. If it is server-side sorting, set to `true`, but if you want to support multi-column sorting, you can set it to `{ multiple: number }`",
            ty: 'function \\',
            default: 'boolean \\',
          },
          {
            name: 'sortOrder',
            description: 'Order of sorted values: `ascend` `descend` `null`',
            ty: '`ascend` \\',
            default: '`descend` \\',
          },
          {
            name: 'sortIcon',
            description: 'Customized sort icon',
            ty: '(props: { sortOrder }) => ReactNode',
            default: '',
          },
          {
            name: 'title',
            description: 'Title of this column',
            ty: 'ReactNode \\',
            default: '({ sortOrder, sortColumn, filters }) => ReactNode',
          },
          {
            name: 'width',
            description:
              'Width of this column ([width not working?](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241))',
            ty: 'string \\',
            default: 'number',
          },
          {
            name: 'minWidth',
            description: 'Min width of this column, only works when `tableLayout="auto"`',
            ty: 'number',
            default: '',
          },
          {
            name: 'hidden',
            description: 'Hidden this column',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'title',
            description: 'Title of the column group',
            ty: '',
            default: '',
          },
          {
            name: 'position',
            description: 'Specify the position of `Pagination`, could be`topLeft` \\',
            ty: '`topCenter` \\',
            default: '`topRight` \\',
          },
          {
            name: 'childrenColumnName',
            description: 'The column contains children to display',
            ty: 'string',
            default: 'children',
          },
          {
            name: 'columnTitle',
            description: 'Set the title of the expand column',
            ty: 'ReactNode',
            default: '',
          },
          {
            name: 'columnWidth',
            description: 'Set the width of the expand column',
            ty: 'string \\',
            default: 'number',
          },
          {
            name: 'defaultExpandAllRows',
            description: 'Expand all rows initially',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'defaultExpandedRowKeys',
            description: 'Initial expanded row keys',
            ty: 'string\\[]',
            default: '',
          },
          {
            name: 'expandedRowClassName',
            description: "Expanded row's className",
            ty: 'function(record, index, indent): string',
            default: '',
          },
          {
            name: 'expandedRowKeys',
            description: 'Current expanded row keys',
            ty: 'string\\[]',
            default: '',
          },
          {
            name: 'expandedRowRender',
            description: 'Expanded container render for each row',
            ty: 'function(record, index, indent, expanded): ReactNode',
            default: '',
          },
          {
            name: 'expandIcon',
            description:
              'Customize row expand Icon. Ref [example](https://codesandbox.io/s/fervent-bird-nuzpr)',
            ty: 'function(props): ReactNode',
            default: '',
          },
          {
            name: 'expandRowByClick',
            description: 'Whether to expand row by clicking anywhere in the whole row',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'fixed',
            description: 'Whether the expansion icon is fixed. Optional true `left` `right`',
            ty: 'boolean \\',
            default: 'string',
          },
          {
            name: 'indentSize',
            description: 'Indent size in pixels of tree data',
            ty: 'number',
            default: '15',
          },
          {
            name: 'rowExpandable',
            description: 'Enable row can be expandable',
            ty: '(record) => boolean',
            default: '',
          },
          {
            name: 'showExpandColumn',
            description: 'Show expand column',
            ty: 'boolean',
            default: 'true',
          },
          {
            name: 'checkStrictly',
            description:
              'Check table row precisely; parent row and children rows are not associated',
            ty: 'boolean',
            default: 'true',
          },
          {
            name: 'columnTitle',
            description: 'Set the title of the selection column',
            ty: 'ReactNode \\',
            default: '(originalNode: ReactNode) => ReactNode',
          },
          {
            name: 'columnWidth',
            description: 'Set the width of the selection column',
            ty: 'string \\',
            default: 'number',
          },
          {
            name: 'fixed',
            description: 'Fixed selection column on the left',
            ty: 'boolean',
            default: '',
          },
          {
            name: 'getCheckboxProps',
            description: 'Get Checkbox or Radio props',
            ty: 'function(record)',
            default: '',
          },
          {
            name: 'hideSelectAll',
            description: 'Hide the selectAll checkbox and custom selection',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'preserveSelectedRowKeys',
            description: 'Keep selection `key` even when it removed from `dataSource`',
            ty: 'boolean',
            default: '',
          },
          {
            name: 'renderCell',
            description: 'Renderer of the table cell. Same as `render` in column',
            ty: 'function(checked, record, index, originNode) {}',
            default: '',
          },
          {
            name: 'selectedRowKeys',
            description: 'Controlled selected row keys',
            ty: 'string\\[] \\',
            default: 'number\\[]',
          },
          {
            name: 'selections',
            description:
              'Custom selection [config](#selection), only displays default selections when set to `true`',
            ty: 'object\\[] \\',
            default: 'boolean',
          },
          {
            name: 'type',
            description: '`checkbox` or `radio`',
            ty: '`checkbox` \\',
            default: '`radio`',
          },
          {
            name: 'scrollToFirstRowOnChange',
            description:
              'Whether to scroll to the top of the table when paging, sorting, filtering changes',
            ty: '',
            default: '',
          },
          {
            name: 'x',
            description:
              "Set horizontal scrolling, can also be used to specify the width of the scroll area, could be number, percent value, true and ['max-content'](https://developer.mozilla.org/en-US/docs/Web/CSS/width#max-content)",
            ty: 'string \\',
            default: 'number \\',
          },
          {
            name: 'y',
            description:
              'Set vertical scrolling, can also be used to specify the height of the scroll area, could be string or number',
            ty: 'string \\',
            default: 'number',
          },
          {
            name: 'key',
            description: 'Unique key of this selection',
            ty: '',
            default: '',
          },
          {
            name: 'text',
            description: 'Display text of this selection',
            ty: '',
            default: '',
          },
        ],
        events: [
          {
            name: 'onCell',
            description: 'Set props on per cell',
            ty: 'function(record, rowIndex)',
            default: '',
          },
          {
            name: 'onFilter',
            description: 'Function that determines if the row is displayed when filtered',
            ty: 'function(value, record) => boolean',
            default: '',
          },
          {
            name: 'onFilterDropdownOpenChange',
            description: 'Callback executed when `filterDropdownOpen` is changed',
            ty: 'function(visible) {}',
            default: '',
          },
          {
            name: 'onHeaderCell',
            description: 'Set props on per header cell',
            ty: 'function(column)',
            default: '',
          },
          {
            name: 'onExpand',
            description: 'Callback executed when the row expand icon is clicked',
            ty: 'function(expanded, record)',
            default: '',
          },
          {
            name: 'onExpandedRowsChange',
            description: 'Callback executed when the expanded rows change',
            ty: 'function(expandedRows)',
            default: '',
          },
          {
            name: 'onCell',
            description: 'Set props on per cell. Same as `onCell` in column',
            ty: 'function(record, rowIndex)',
            default: '',
          },
          {
            name: 'onChange',
            description: 'Callback executed when selected rows change',
            ty: 'function(selectedRowKeys, selectedRows, info: { type })',
            default: '',
          },
          {
            name: 'onSelect',
            description: 'Callback executed when select/deselect one row',
            ty: 'function(record, selected, selectedRows, nativeEvent)',
            default: '',
          },
          {
            name: 'onSelectAll',
            description: 'Callback executed when select/deselect all rows',
            ty: 'function(selected, selectedRows, changeRows)',
            default: '',
          },
          {
            name: 'onSelectInvert',
            description: 'Callback executed when row selection is inverted',
            ty: 'function(selectedRowKeys)',
            default: '',
          },
          {
            name: 'onSelectNone',
            description: 'Callback executed when row selection is cleared',
            ty: 'function()',
            default: '',
          },
          {
            name: 'onSelectMultiple',
            description: 'Callback executed when row selection is changed by pressing shift',
            ty: 'function(selected, selectedRows, changeRows)',
            default: '',
          },
          {
            name: 'onSelect',
            description: 'Callback executed when this selection is clicked',
            ty: '',
            default: '',
          },
        ],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'list',
    props: [
      {
        name: 'bordered',
        description: 'Toggles rendering of the border around the list',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'dataSource',
        description: 'DataSource array for list',
        ty: 'any\\[]',
        default: '',
      },
      {
        name: 'footer',
        description: 'List footer renderer',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'grid',
        description:
          'The grid type of list. You can set grid to something like {gutter: 16, column: 4}',
        ty: '[object](#list-grid-props)',
        default: '',
      },
      {
        name: 'header',
        description: 'List header renderer',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'itemLayout',
        description: 'The layout of list',
        ty: '`horizontal` \\',
        default: '`vertical`',
      },
      {
        name: 'loading',
        description: 'Shows a loading indicator while the contents of the list are being fetched',
        ty: 'boolean \\',
        default:
          '[SpinProps](/components/spin/#api) ([more](https://github.com/ant-design/ant-design/issues/8659))',
      },
      {
        name: 'loadMore',
        description: 'Shows a load more content',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'locale',
        description: 'The i18n text including empty text',
        ty: 'object',
        default: '{emptyText: `No Data`}',
      },
      {
        name: 'pagination',
        description: 'Pagination [config](/components/pagination/), hide it by setting it to false',
        ty: 'boolean \\',
        default: 'object',
      },
      {
        name: 'renderItem',
        description: 'Customize list item when using `dataSource`',
        ty: '(item) => ReactNode',
        default: '',
      },
      {
        name: 'rowKey',
        description:
          "Item's unique value, could be an Item's key which holds a unique value of type `React.Key` or function that receives Item and returns a `React.Key`",
        ty: '`keyof` T \\',
        default: '(item: T) => `React.Key`',
      },
      {
        name: 'size',
        description: 'Size of list',
        ty: '`default` \\',
        default: '`large` \\',
      },
      {
        name: 'split',
        description: 'Toggles rendering of the split under the list item',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'position',
        description: 'The specify the position of `Pagination`',
        ty: '`top` \\',
        default: '`bottom` \\',
      },
      {
        name: 'align',
        description: 'The specify the alignment of `Pagination`',
        ty: '`start` \\',
        default: '`center` \\',
      },
      {
        name: 'column',
        description: 'The column of grid',
        ty: 'number',
        default: '',
      },
      {
        name: 'gutter',
        description: 'The spacing between grid',
        ty: 'number',
        default: '0',
      },
      {
        name: 'xs',
        description: '`<576px` column of grid',
        ty: 'number',
        default: '',
      },
      {
        name: 'sm',
        description: '`≥576px` column of grid',
        ty: 'number',
        default: '',
      },
      {
        name: 'md',
        description: '`≥768px` column of grid',
        ty: 'number',
        default: '',
      },
      {
        name: 'lg',
        description: '`≥992px` column of grid',
        ty: 'number',
        default: '',
      },
      {
        name: 'xl',
        description: '`≥1200px` column of grid',
        ty: 'number',
        default: '',
      },
      {
        name: 'xxl',
        description: '`≥1600px` column of grid',
        ty: 'number',
        default: '',
      },
      {
        name: 'actions',
        description:
          'The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right',
        ty: 'Array&lt;ReactNode>',
        default: '',
      },
      {
        name: 'classNames',
        description: 'Semantic structure className',
        ty: '[`Record<actions \\',
        default: 'extra, string>`](#semantic-dom)',
      },
      {
        name: 'extra',
        description:
          'The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'styles',
        description: 'Semantic DOM style',
        ty: '[`Record<actions \\',
        default: 'extra, CSSProperties>`](#semantic-dom)',
      },
      {
        name: 'avatar',
        description: 'The avatar of list item',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'description',
        description: 'The description of list item',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'title',
        description: 'The title of list item',
        ty: 'ReactNode',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'divider',
    props: [
      {
        name: 'children',
        description: 'The wrapped title',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'className',
        description: 'The className of container',
        ty: 'string',
        default: '',
      },
      {
        name: 'dashed',
        description: 'Whether line is dashed',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'variant',
        description: 'Whether line is dashed, dotted or solid',
        ty: '`dashed` \\',
        default: '`dotted` \\',
      },
      {
        name: 'orientation',
        description: 'The position of title inside divider',
        ty: '`left` \\',
        default: '`right` \\',
      },
      {
        name: 'orientationMargin',
        description:
          'The margin-left/right between the title and its closest border, while the `orientation` must be `left` or `right`, If a numeric value of type `string` is provided without a unit, it is assumed to be in pixels (px) by default.',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'plain',
        description: 'Divider text show as plain style',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'style',
        description: 'The style object of container',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'type',
        description: 'The direction type of divider',
        ty: '`horizontal` \\',
        default: '`vertical`',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'menu',
    props: [
      {
        name: 'Param',
        description: 'Description',
        ty: 'Type',
        default: 'Default value',
      },
      {
        name: 'defaultOpenKeys',
        description: 'Array with the keys of default opened sub menus',
        ty: 'string\\[]',
        default: '',
      },
      {
        name: 'defaultSelectedKeys',
        description: 'Array with the keys of default selected menu items',
        ty: 'string\\[]',
        default: '',
      },
      {
        name: 'expandIcon',
        description: 'custom expand icon of submenu',
        ty: 'ReactNode \\',
        default: '`(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode`',
      },
      {
        name: 'forceSubMenuRender',
        description: 'Render submenu into DOM before it becomes visible',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'inlineCollapsed',
        description: 'Specifies the collapsed status when menu is inline mode',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'inlineIndent',
        description: 'Indent (in pixels) of inline menu items on each level',
        ty: 'number',
        default: '24',
      },
      {
        name: 'items',
        description: 'Menu item content',
        ty: '[ItemType\\[\\]](#itemtype)',
        default: '',
      },
      {
        name: 'mode',
        description: 'Type of menu',
        ty: '`vertical` \\',
        default: '`horizontal` \\',
      },
      {
        name: 'multiple',
        description: 'Allows selection of multiple items',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'openKeys',
        description: 'Array with the keys of currently opened sub-menus',
        ty: 'string\\[]',
        default: '',
      },
      {
        name: 'overflowedIndicator',
        description: 'Customized the ellipsis icon when menu is collapsed horizontally',
        ty: 'ReactNode',
        default: '`<EllipsisOutlined />`',
      },
      {
        name: 'selectable',
        description: 'Allows selecting menu items',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'selectedKeys',
        description: 'Array with the keys of currently selected menu items',
        ty: 'string\\[]',
        default: '',
      },
      {
        name: 'style',
        description: 'Style of the root node',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'subMenuCloseDelay',
        description: 'Delay time to hide submenu when mouse leaves (in seconds)',
        ty: 'number',
        default: '0.1',
      },
      {
        name: 'subMenuOpenDelay',
        description: 'Delay time to show submenu when mouse enters, (in seconds)',
        ty: 'number',
        default: '0',
      },
      {
        name: 'theme',
        description: 'Color theme of the menu',
        ty: '`light` \\',
        default: '`dark`',
      },
      {
        name: 'triggerSubMenuAction',
        description: 'Which action can trigger submenu open/close',
        ty: '`hover` \\',
        default: '`click`',
      },
    ],
    events: [
      {
        name: 'onClick',
        description: 'Called when a menu item is clicked',
        ty: 'function({ item, key, keyPath, domEvent })',
        default: '',
      },
      {
        name: 'onDeselect',
        description: 'Called when a menu item is deselected (multiple mode only)',
        ty: 'function({ item, key, keyPath, selectedKeys, domEvent })',
        default: '',
      },
      {
        name: 'onOpenChange',
        description: 'Called when sub-menus are opened or closed',
        ty: 'function(openKeys: string\\[])',
        default: '',
      },
      {
        name: 'onSelect',
        description: 'Called when a menu item is selected',
        ty: 'function({ item, key, keyPath, selectedKeys, domEvent })',
        default: '',
      },
    ],
    methods: [],
    children: [
      {
        name: 'MenuItemType',
        props: [
          {
            name: 'Param',
            description: 'Description',
            ty: 'Type',
            default: 'Default value',
          },
          {
            name: 'danger',
            description: 'Display the danger style',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'disabled',
            description: 'Whether menu item is disabled',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'extra',
            description: 'The extra of the menu item',
            ty: 'ReactNode',
            default: '',
          },
          {
            name: 'icon',
            description: 'The icon of the menu item',
            ty: 'ReactNode',
            default: '',
          },
          {
            name: 'key',
            description: 'Unique ID of the menu item',
            ty: 'string',
            default: '',
          },
          {
            name: 'label',
            description: 'Menu label',
            ty: 'ReactNode',
            default: '',
          },
          {
            name: 'title',
            description: 'Set display title for collapsed item',
            ty: 'string',
            default: '',
          },
        ],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: 'SubMenuType',
        props: [
          {
            name: 'children',
            description: 'Sub-menus or sub-menu items',
            ty: '[ItemType\\[\\]](#itemtype)',
            default: '',
          },
          {
            name: 'disabled',
            description: 'Whether sub-menu is disabled',
            ty: 'boolean',
            default: 'false',
          },
          {
            name: 'icon',
            description: 'Icon of sub menu',
            ty: 'ReactNode',
            default: '',
          },
          {
            name: 'key',
            description: 'Unique ID of the sub-menu',
            ty: 'string',
            default: '',
          },
          {
            name: 'label',
            description: 'Menu label',
            ty: 'ReactNode',
            default: '',
          },
          {
            name: 'popupClassName',
            description: 'Sub-menu class name, not working when `mode="inline"`',
            ty: 'string',
            default: '',
          },
          {
            name: 'popupOffset',
            description: 'Sub-menu offset, not working when `mode="inline"`',
            ty: '\\[number, number]',
            default: '',
          },
          {
            name: 'theme',
            description: 'Color theme of the SubMenu (inherits from Menu by default)',
            ty: '',
            default: '`light` \\',
          },
        ],
        events: [
          {
            name: 'onTitleClick',
            description: 'Callback executed when the sub-menu title is clicked',
            ty: 'function({ key, domEvent })',
            default: '',
          },
        ],
        methods: [],
        children: [],
      },
      {
        name: 'MenuItemGroupType',
        props: [
          {
            name: 'Param',
            description: 'Description',
            ty: 'Type',
            default: 'Default value',
          },
          {
            name: 'children',
            description: 'Sub-menu items',
            ty: '[MenuItemType\\[\\]](#menuitemtype)',
            default: '',
          },
          {
            name: 'label',
            description: 'The title of the group',
            ty: 'ReactNode',
            default: '',
          },
        ],
        events: [],
        methods: [],
        children: [],
      },
      {
        name: 'MenuDividerType',
        props: [
          {
            name: 'Param',
            description: 'Description',
            ty: 'Type',
            default: 'Default value',
          },
          {
            name: 'dashed',
            description: 'Whether line is dashed',
            ty: 'boolean',
            default: 'false',
          },
        ],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'avatar',
    props: [
      {
        name: 'alt',
        description: 'This attribute defines the alternative text describing the image',
        ty: 'string',
        default: '',
      },
      {
        name: 'gap',
        description: 'Letter type unit distance between left and right sides',
        ty: 'number',
        default: '4',
      },
      {
        name: 'icon',
        description: 'Custom icon type for an icon avatar',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'shape',
        description: 'The shape of avatar',
        ty: '`circle` \\',
        default: '`square`',
      },
      {
        name: 'size',
        description: 'The size of the avatar',
        ty: 'number \\',
        default: '`large` \\',
      },
      {
        name: 'src',
        description: 'The address of the image for an image avatar or image element',
        ty: 'string \\',
        default: 'ReactNode',
      },
      {
        name: 'srcSet',
        description: 'A list of sources to use for different screen resolutions',
        ty: 'string',
        default: '',
      },
      {
        name: 'draggable',
        description: 'Whether the picture is allowed to be dragged',
        ty: 'boolean \\',
        default: "`'true'` \\",
      },
      {
        name: 'crossOrigin',
        description: 'CORS settings attributes',
        ty: "`'anonymous'` \\",
        default: "`'use-credentials'` \\",
      },
      {
        name: 'max',
        description:
          'Set maximum display related configurations, Before `5.18.0` you can use [parameters](https://github.com/ant-design/ant-design/blob/9d134859becbdae5b9ce276f6d9af4264691d81f/components/avatar/group.tsx#L35-L38)',
        ty: '`{ count?: number; style?: CSSProperties; popover?: PopoverProps }`',
        default: '',
      },
      {
        name: 'size',
        description: 'The size of the avatar',
        ty: 'number \\',
        default: '`large` \\',
      },
      {
        name: 'shape',
        description: 'The shape of the avatar',
        ty: '`circle` \\',
        default: '`square`',
      },
    ],
    events: [
      {
        name: 'onError',
        description:
          'Handler when img load error, return false to prevent default fallback behavior',
        ty: '() => boolean',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'typography',
    props: [
      {
        name: 'code',
        description: 'Code style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'copyable',
        description: 'Whether to be copyable, customize it via setting an object',
        ty: 'boolean \\',
        default: '[copyable](#copyable)',
      },
      {
        name: 'delete',
        description: 'Deleted line style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'Disabled content',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'editable',
        description: 'If editable. Can control edit state when is object',
        ty: 'boolean \\',
        default: '[editable](#editable)',
      },
      {
        name: 'ellipsis',
        description:
          "Display ellipsis when text overflows, can't configure expandable、rows and onExpand by using object. Diff with Typography.Paragraph, Text do not have 100% width style which means it will fix width on the first ellipsis. If you want to have responsive ellipsis, please set width manually",
        ty: 'boolean \\',
        default: "[Omit<ellipsis, 'expandable' \\",
      },
      {
        name: 'keyboard',
        description: 'Keyboard style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'mark',
        description: 'Marked style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'strong',
        description: 'Bold style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'italic',
        description: 'Italic style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'type',
        description: 'Content type',
        ty: '`secondary` \\',
        default: '`success` \\',
      },
      {
        name: 'underline',
        description: 'Underlined style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'code',
        description: 'Code style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'copyable',
        description: 'Whether to be copyable, customize it via setting an object',
        ty: 'boolean \\',
        default: '[copyable](#copyable)',
      },
      {
        name: 'delete',
        description: 'Deleted line style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'Disabled content',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'editable',
        description: 'If editable. Can control edit state when is object',
        ty: 'boolean \\',
        default: '[editable](#editable)',
      },
      {
        name: 'ellipsis',
        description:
          'Display ellipsis when text overflows, can configure rows and expandable by using object',
        ty: 'boolean \\',
        default: '[ellipsis](#ellipsis)',
      },
      {
        name: 'level',
        description: 'Set content importance. Match with `h1`, `h2`, `h3`, `h4`, `h5`',
        ty: 'number: 1, 2, 3, 4, 5',
        default: '1',
      },
      {
        name: 'mark',
        description: 'Marked style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'italic',
        description: 'Italic style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'type',
        description: 'Content type',
        ty: '`secondary` \\',
        default: '`success` \\',
      },
      {
        name: 'underline',
        description: 'Underlined style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'code',
        description: 'Code style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'copyable',
        description: 'Whether to be copyable, customize it via setting an object',
        ty: 'boolean \\',
        default: '[copyable](#copyable)',
      },
      {
        name: 'delete',
        description: 'Deleted line style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'Disabled content',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'editable',
        description: 'If editable. Can control edit state when is object',
        ty: 'boolean \\',
        default: '[editable](#editable)',
      },
      {
        name: 'ellipsis',
        description:
          'Display ellipsis when text overflows, can configure rows and expandable by using object',
        ty: 'boolean \\',
        default: '[ellipsis](#ellipsis)',
      },
      {
        name: 'mark',
        description: 'Marked style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'strong',
        description: 'Bold style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'italic',
        description: 'Italic style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'type',
        description: 'Content type',
        ty: '`secondary` \\',
        default: '`success` \\',
      },
      {
        name: 'underline',
        description: 'Underlined style',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'format',
        description: 'The Mime Type of the text',
        ty: "'text/plain' \\",
        default: "'text/html'",
      },
      {
        name: 'icon',
        description: 'Custom copy icon: \\[copyIcon, copiedIcon]',
        ty: '\\[ReactNode, ReactNode]',
        default: '',
      },
      {
        name: 'text',
        description: 'The text to copy',
        ty: 'string',
        default: '',
      },
      {
        name: 'tooltips',
        description: 'Custom tooltip text, hide when it is false',
        ty: '\\[ReactNode, ReactNode]',
        default: '\\[`Copy`, `Copied`]',
      },
      {
        name: 'tabIndex',
        description: 'Set tabIndex of the copy button',
        ty: 'number',
        default: '0',
      },
      {
        name: 'autoSize',
        description: '`autoSize` attribute of textarea',
        ty: 'boolean \\',
        default: '{ minRows: number, maxRows: number }',
      },
      {
        name: 'editing',
        description: 'Whether to be editable',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'icon',
        description: 'Custom editable icon',
        ty: 'ReactNode',
        default: '&lt;EditOutlined />',
      },
      {
        name: 'maxLength',
        description: '`maxLength` attribute of textarea',
        ty: 'number',
        default: '',
      },
      {
        name: 'tooltip',
        description: 'Custom tooltip text, hide when it is false',
        ty: 'ReactNode',
        default: '`Edit`',
      },
      {
        name: 'text',
        description:
          'Edit text, specify the editing content instead of using the children implicitly',
        ty: 'string',
        default: '',
      },
      {
        name: 'triggerType',
        description:
          'Edit mode trigger - icon, text or both (not specifying icon as trigger hides it)',
        ty: 'Array&lt;`icon`\\',
        default: '`text`>',
      },
      {
        name: 'enterIcon',
        description: 'Custom "enter" icon in the edit field (passing `null` removes the icon)',
        ty: 'ReactNode',
        default: '`<EnterOutlined />`',
      },
      {
        name: 'tabIndex',
        description: 'Set tabIndex of the edit button',
        ty: 'number',
        default: '0',
      },
      {
        name: 'expandable',
        description: 'Whether to be expandable',
        ty: 'boolean \\',
        default: "'collapsible'",
      },
      {
        name: 'rows',
        description: 'Max rows of content',
        ty: 'number',
        default: '',
      },
      {
        name: 'suffix',
        description: 'Suffix of ellipsis content',
        ty: 'string',
        default: '',
      },
      {
        name: 'symbol',
        description: 'Custom description of ellipsis',
        ty: 'ReactNode \\',
        default: '((expanded: boolean) => ReactNode)',
      },
      {
        name: 'tooltip',
        description: 'Show tooltip when ellipsis',
        ty: 'ReactNode \\',
        default: '[TooltipProps](/components/tooltip/#api)',
      },
      {
        name: 'defaultExpanded',
        description: 'Default expand or collapse',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'expanded',
        description: 'Expand or Collapse',
        ty: 'boolean',
        default: '',
      },
    ],
    events: [
      {
        name: 'onClick',
        description: 'Set the handler to handle click event',
        ty: '(event) => void',
        default: '',
      },
      {
        name: 'onClick',
        description: 'Set the handler to handle click event',
        ty: '(event) => void',
        default: '',
      },
      {
        name: 'onClick',
        description: 'Set the handler to handle click event',
        ty: '(event) => void',
        default: '',
      },
      {
        name: 'onCopy',
        description: 'Called when copied text',
        ty: 'function',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Called when input at textarea',
        ty: 'function(value: string)',
        default: '',
      },
      {
        name: 'onCancel',
        description: 'Called when type ESC to exit editable state',
        ty: 'function',
        default: '',
      },
      {
        name: 'onStart',
        description: 'Called when enter editable state',
        ty: 'function',
        default: '',
      },
      {
        name: 'onEnd',
        description: 'Called when type ENTER to exit editable state',
        ty: 'function',
        default: '',
      },
      {
        name: 'onEllipsis',
        description: 'Called when enter or leave ellipsis state',
        ty: 'function(ellipsis)',
        default: '',
      },
      {
        name: 'onExpand',
        description: 'Called when expand content',
        ty: 'function(event, { expanded: boolean })',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'switch',
    props: [
      {
        name: 'autoFocus',
        description: 'Whether get focus when component mounted',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'checked',
        description: 'Determine whether the Switch is checked',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'checkedChildren',
        description: 'The content to be shown when the state is checked',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'className',
        description: 'The additional class to Switch',
        ty: 'string',
        default: '',
      },
      {
        name: 'defaultChecked',
        description: 'Whether to set the initial state',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'defaultValue',
        description: 'Alias for `defaultChecked`',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Disable switch',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'loading',
        description: 'Loading state of switch',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'size',
        description: 'The size of the Switch, options: `default` `small`',
        ty: 'string',
        default: '`default`',
      },
      {
        name: 'unCheckedChildren',
        description: 'The content to be shown when the state is unchecked',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'value',
        description: 'Alias for `checked`',
        ty: 'boolean',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Trigger when the checked state is changing',
        ty: 'function(checked: boolean, event: Event)',
        default: '',
      },
      {
        name: 'onClick',
        description: 'Trigger when clicked',
        ty: 'function(checked: boolean, event: Event)',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'tour',
    props: [
      {
        name: 'arrow',
        description:
          'Whether to show the arrow, including the configuration whether to point to the center of the element',
        ty: '`boolean`\\',
        default: '`{ pointAtCenter: boolean}`',
      },
      {
        name: 'closeIcon',
        description: 'Customize close icon',
        ty: '`React.ReactNode`',
        default: '`true`',
      },
      {
        name: 'disabledInteraction',
        description: 'Disable interaction on highlighted area.',
        ty: '`boolean`',
        default: '`false`',
      },
      {
        name: 'gap',
        description:
          'Control the radius of the highlighted area and the offset between highlighted area and the element.',
        ty: '`{ offset?: number \\',
        default: '[number, number]; radius?: number }`',
      },
      {
        name: 'placement',
        description: 'Position of the guide card relative to the target element',
        ty: '`center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`',
        default: '`bottom`',
      },
      {
        name: 'mask',
        description:
          'Whether to enable masking, change mask style and fill color by pass custom props',
        ty: '`boolean \\',
        default: '{ style?: React.CSSProperties; color?: string; }`',
      },
      {
        name: 'type',
        description: 'Type, affects the background color and text color',
        ty: '`default` `primary`',
        default: '`default`',
      },
      {
        name: 'open',
        description: 'Open tour',
        ty: '`boolean`',
        default: '',
      },
      {
        name: 'current',
        description: 'What is the current step',
        ty: '`number`',
        default: '',
      },
      {
        name: 'scrollIntoViewOptions',
        description: 'support pass custom scrollIntoView options',
        ty: '`boolean \\',
        default: 'ScrollIntoViewOptions`',
      },
      {
        name: 'indicatorsRender',
        description: 'custom indicator',
        ty: '`(current: number, total: number) => ReactNode`',
        default: '',
      },
      {
        name: 'zIndex',
        description: "Tour's zIndex",
        ty: 'number',
        default: '1001',
      },
      {
        name: 'getPopupContainer',
        description: 'Set the rendering node of Tour floating layer',
        ty: '`(node: HTMLElement) => HTMLElement`',
        default: 'body',
      },
      {
        name: 'target',
        description:
          'Get the element the guide card points to. Empty makes it show in center of screen',
        ty: '`() => HTMLElement` `HTMLElement`',
        default: '',
      },
      {
        name: 'arrow',
        description:
          'Whether to show the arrow, including the configuration whether to point to the center of the element',
        ty: '`boolean` `{ pointAtCenter: boolean}`',
        default: '`true`',
      },
      {
        name: 'closeIcon',
        description: 'Customize close icon',
        ty: '`React.ReactNode`',
        default: '`true`',
      },
      {
        name: 'cover',
        description: 'Displayed pictures or videos',
        ty: '`ReactNode`',
        default: '',
      },
      {
        name: 'title',
        description: 'title',
        ty: '`ReactNode`',
        default: '',
      },
      {
        name: 'description',
        description: 'description',
        ty: '`ReactNode`',
        default: '',
      },
      {
        name: 'placement',
        description: 'Position of the guide card relative to the target element',
        ty: '`center` `left` `leftTop` `leftBottom` `right` `rightTop` `rightBottom` `top` `topLeft` `topRight` `bottom` `bottomLeft` `bottomRight`',
        default: '`bottom`',
      },
      {
        name: 'mask',
        description:
          'Whether to enable masking, change mask style and fill color by pass custom props, the default follows the `mask` property of Tour',
        ty: '`boolean \\',
        default: '{ style?: React.CSSProperties; color?: string; }`',
      },
      {
        name: 'type',
        description: 'Type, affects the background color and text color',
        ty: '`default` `primary`',
        default: '`default`',
      },
      {
        name: 'nextButtonProps',
        description: 'Properties of the Next button',
        ty: '`{ children: ReactNode; onClick: Function }`',
        default: '',
      },
      {
        name: 'prevButtonProps',
        description: 'Properties of the previous button',
        ty: '`{ children: ReactNode; onClick: Function }`',
        default: '',
      },
      {
        name: 'scrollIntoViewOptions',
        description:
          'support pass custom scrollIntoView options, the default follows the `scrollIntoViewOptions` property of Tour',
        ty: '`boolean \\',
        default: 'ScrollIntoViewOptions`',
      },
    ],
    events: [
      {
        name: 'onClose',
        description: 'Callback function on shutdown',
        ty: '`Function`',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Callback when the step changes. Current is the previous step',
        ty: '`(current: number) => void`',
        default: '',
      },
      {
        name: 'onClose',
        description: 'Callback function on shutdown',
        ty: '`Function`',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'anchor',
    props: [
      {
        name: 'affix',
        description: 'Fixed mode of Anchor',
        ty: 'boolean \\',
        default: "Omit<AffixProps, 'offsetTop' \\",
      },
      {
        name: 'bounds',
        description: 'Bounding distance of anchor area',
        ty: 'number',
        default: '5',
      },
      {
        name: 'getContainer',
        description: 'Scrolling container',
        ty: '() => HTMLElement',
        default: '() => window',
      },
      {
        name: 'getCurrentAnchor',
        description: 'Customize the anchor highlight',
        ty: '(activeLink: string) => string',
        default: '',
      },
      {
        name: 'offsetTop',
        description: 'Pixels to offset from top when calculating position of scroll',
        ty: 'number',
        default: '0',
      },
      {
        name: 'showInkInFixed',
        description: 'Whether show ink-square when `affix={false}`',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'targetOffset',
        description:
          'Anchor scroll offset, default as `offsetTop`, [example](#anchor-demo-targetoffset)',
        ty: 'number',
        default: '',
      },
      {
        name: 'items',
        description: 'Data configuration option content, support nesting through children',
        ty: '{ key, href, title, target, children }\\[] [see](#anchoritem)',
        default: '',
      },
      {
        name: 'direction',
        description: 'Set Anchor direction',
        ty: '`vertical` \\',
        default: '`horizontal`',
      },
      {
        name: 'replace',
        description: "Replace items' href in browser history instead of pushing it",
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'key',
        description: 'The unique identifier of the Anchor Link',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'href',
        description: 'The target of hyperlink',
        ty: 'string',
        default: '',
      },
      {
        name: 'target',
        description: 'Specifies where to display the linked URL',
        ty: 'string',
        default: '',
      },
      {
        name: 'title',
        description: 'The content of hyperlink',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'children',
        description:
          'Nested Anchor Link, `Attention: This attribute does not support horizontal orientation`',
        ty: '[AnchorItem](#anchoritem)\\[]',
        default: '',
      },
      {
        name: 'replace',
        description: 'Replace item href in browser history instead of pushing it',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'href',
        description: 'The target of hyperlink',
        ty: 'string',
        default: '',
      },
      {
        name: 'target',
        description: 'Specifies where to display the linked URL',
        ty: 'string',
        default: '',
      },
      {
        name: 'title',
        description: 'The content of hyperlink',
        ty: 'ReactNode',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Listening for anchor link change',
        ty: '(currentActiveLink: string) => void',
        default: '',
      },
      {
        name: 'onClick',
        description: 'Set the handler to handle `click` event',
        ty: '(e: MouseEvent, link: object) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'select',
    props: [
      {
        name: 'allowClear',
        description: 'Customize clear icon',
        ty: 'boolean \\',
        default: '{ clearIcon?: ReactNode }',
      },
      {
        name: 'autoClearSearchValue',
        description:
          'Whether the current search will be cleared on selecting an item. Only applies when `mode` is set to `multiple` or `tags`',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'autoFocus',
        description: 'Get focus by default',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'defaultActiveFirstOption',
        description: 'Whether active first option by default',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'defaultOpen',
        description: 'Initial open state of dropdown',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'Initial selected option',
        ty: 'string \\',
        default: 'string\\[] \\',
      },
      {
        name: 'disabled',
        description: 'Whether disabled select',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'popupClassName',
        description: 'The className of dropdown menu',
        ty: 'string',
        default: '',
      },
      {
        name: 'popupMatchSelectWidth',
        description:
          'Determine whether the popup menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll',
        ty: 'boolean \\',
        default: 'number',
      },
      {
        name: 'dropdownRender',
        description: 'Customize dropdown content',
        ty: '(originNode: ReactNode) => ReactNode',
        default: '',
      },
      {
        name: 'dropdownStyle',
        description: 'The style of dropdown menu',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'fieldNames',
        description: 'Customize node label, value, options，groupLabel field name',
        ty: 'object',
        default: '{ label: `label`, value: `value`, options: `options`, groupLabel: `label` }',
      },
      {
        name: 'filterOption',
        description:
          'If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns `true`, the option will be included in the filtered set; Otherwise, it will be excluded',
        ty: 'boolean \\',
        default: 'function(inputValue, option)',
      },
      {
        name: 'filterSort',
        description:
          "Sort function for search options sorting, see [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)'s compareFunction",
        ty: '(optionA: Option, optionB: Option, info: { searchValue: string }) => number',
        default: '',
      },
      {
        name: 'getPopupContainer',
        description:
          'Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative. [Example](https://codesandbox.io/s/4j168r7jw0)',
        ty: 'function(triggerNode)',
        default: '() => document.body',
      },
      {
        name: 'labelInValue',
        description:
          'Whether to embed label in value, turn the format of value from `string` to { value: string, label: ReactNode }',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'listHeight',
        description: 'Config popup height',
        ty: 'number',
        default: '256',
      },
      {
        name: 'loading',
        description: 'Indicate loading state',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'maxCount',
        description:
          'The max number of items can be selected, only applies when `mode` is `multiple` or `tags`',
        ty: 'number',
        default: '',
      },
      {
        name: 'maxTagCount',
        description: 'Max tag count to show. `responsive` will cost render performance',
        ty: 'number \\',
        default: '`responsive`',
      },
      {
        name: 'maxTagPlaceholder',
        description: 'Placeholder for not showing tags',
        ty: 'ReactNode \\',
        default: 'function(omittedValues)',
      },
      {
        name: 'maxTagTextLength',
        description: 'Max tag text length to show',
        ty: 'number',
        default: '',
      },
      {
        name: 'menuItemSelectedIcon',
        description: 'The custom menuItemSelected icon with multiple options',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'mode',
        description: 'Set mode of Select',
        ty: '`multiple` \\',
        default: '`tags`',
      },
      {
        name: 'notFoundContent',
        description: 'Specify content to show when no result matches',
        ty: 'ReactNode',
        default: '`Not Found`',
      },
      {
        name: 'open',
        description: 'Controlled open state of dropdown',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'optionFilterProp',
        description:
          'Which prop value of option will be used for filter if filterOption is true. If `options` is set, it should be set to `label`',
        ty: 'string',
        default: '`value`',
      },
      {
        name: 'optionLabelProp',
        description:
          'Which prop value of option will render as content of select. [Example](https://codesandbox.io/s/antd-reproduction-template-tk678)',
        ty: 'string',
        default: '`children`',
      },
      {
        name: 'options',
        description: 'Select options. Will get better perf than jsx definition',
        ty: '{ label, value }\\[]',
        default: '',
      },
      {
        name: 'optionRender',
        description: 'Customize the rendering dropdown options',
        ty: '(option: FlattenOptionData\\<BaseOptionType\\> , info: { index: number }) => React.ReactNode',
        default: '',
      },
      {
        name: 'placeholder',
        description: 'Placeholder of select',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'placement',
        description: 'The position where the selection box pops up',
        ty: '`bottomLeft` `bottomRight` `topLeft` `topRight`',
        default: 'bottomLeft',
      },
      {
        name: 'removeIcon',
        description: 'The custom remove icon',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'searchValue',
        description: 'The current input "search" text',
        ty: 'string',
        default: '',
      },
      {
        name: 'showSearch',
        description: 'Whether select is searchable',
        ty: 'boolean',
        default: 'single: false, multiple: true',
      },
      {
        name: 'size',
        description: 'Size of Select input',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'status',
        description: 'Set validation status',
        ty: "'error' \\",
        default: "'warning'",
      },
      {
        name: 'suffixIcon',
        description:
          'The custom suffix icon. Customize icon will not response click open to avoid icon designed to do other interactive. You can use `pointer-events: none` style to bypass',
        ty: 'ReactNode',
        default: '`<DownOutlined />`',
      },
      {
        name: 'tagRender',
        description:
          'Customize tag render, only applies when `mode` is set to `multiple` or `tags`',
        ty: '(props) => ReactNode',
        default: '',
      },
      {
        name: 'labelRender',
        description:
          'Customize selected label render (LabelInValueType definition see [LabelInValueType](https://github.com/react-component/select/blob/b39c28aa2a94e7754ebc570f200ab5fd33bd31e7/src/Select.tsx#L70))',
        ty: '(props: LabelInValueType) => ReactNode',
        default: '',
      },
      {
        name: 'tokenSeparators',
        description: 'Separator used to tokenize, only applies when `mode="tags"`',
        ty: 'string\\[]',
        default: '',
      },
      {
        name: 'value',
        description: 'Current selected option (considered as a immutable array)',
        ty: 'string \\',
        default: 'string\\[] \\',
      },
      {
        name: 'variant',
        description: 'Variants of selector',
        ty: '`outlined` \\',
        default: '`borderless` \\',
      },
      {
        name: 'virtual',
        description: 'Disable virtual scroll when set to false',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'Name',
        description: 'Description',
        ty: '',
        default: '',
      },
      {
        name: 'blur()',
        description: 'Remove focus',
        ty: '',
        default: '',
      },
      {
        name: 'focus()',
        description: 'Get focus',
        ty: '',
        default: '',
      },
      {
        name: 'className',
        description: 'The additional class to option',
        ty: 'string',
        default: '',
      },
      {
        name: 'disabled',
        description: 'Disable this option',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'title',
        description: '`title` attribute of Select Option',
        ty: 'string',
        default: '',
      },
      {
        name: 'value',
        description: 'Default to filter with this property',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'key',
        description: 'Group key',
        ty: 'string',
        default: '',
      },
      {
        name: 'label',
        description: 'Group label',
        ty: 'React.ReactNode',
        default: '',
      },
      {
        name: 'className',
        description: 'The additional class to option',
        ty: 'string',
        default: '',
      },
      {
        name: 'title',
        description: '`title` attribute of Select Option',
        ty: 'string',
        default: '',
      },
    ],
    events: [
      {
        name: 'onBlur',
        description: 'Called when blur',
        ty: 'function',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Called when select an option or input value change',
        ty: 'function(value, option:Option \\',
        default: 'Array&lt;Option>)',
      },
      {
        name: 'onClear',
        description: 'Called when clear',
        ty: 'function',
        default: '',
      },
      {
        name: 'onDeselect',
        description:
          "Called when an option is deselected, param is the selected option's value. Only called for `multiple` or `tags`, effective in multiple or tags mode only",
        ty: 'function(value: string \\',
        default: 'number \\',
      },
      {
        name: 'onDropdownVisibleChange',
        description: 'Called when dropdown open',
        ty: '(open: boolean) => void',
        default: '',
      },
      {
        name: 'onFocus',
        description: 'Called when focus',
        ty: '(event: FocusEvent) => void',
        default: '',
      },
      {
        name: 'onInputKeyDown',
        description: 'Called when key pressed',
        ty: '(event: KeyboardEvent) => void',
        default: '',
      },
      {
        name: 'onPopupScroll',
        description: 'Called when dropdown scrolls',
        ty: '(event: UIEvent) => void',
        default: '',
      },
      {
        name: 'onSearch',
        description: 'Callback function that is fired when input changed',
        ty: 'function(value: string)',
        default: '',
      },
      {
        name: 'onSelect',
        description:
          "Called when an option is selected, the params are option's value (or key) and option instance",
        ty: 'function(value: string \\',
        default: 'number \\',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'statistic',
    props: [
      {
        name: 'decimalSeparator',
        description: 'The decimal separator',
        ty: 'string',
        default: '`.`',
      },
      {
        name: 'formatter',
        description: 'Customize value display logic',
        ty: '(value) => ReactNode',
        default: '',
      },
      {
        name: 'groupSeparator',
        description: 'Group separator',
        ty: 'string',
        default: '`,`',
      },
      {
        name: 'loading',
        description: 'Loading status of Statistic',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'precision',
        description: 'The precision of input value',
        ty: 'number',
        default: '',
      },
      {
        name: 'prefix',
        description: 'The prefix node of value',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'suffix',
        description: 'The suffix node of value',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'title',
        description: 'Display title',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'value',
        description: 'Display value',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'valueStyle',
        description: 'Set value section style',
        ty: 'CSSProperties',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [
      {
        name: 'Statistic.Countdown',
        props: [
          {
            name: 'format',
            description: 'Format as [dayjs](https://day.js.org/)',
            ty: 'string',
            default: '`HH:mm:ss`',
          },
          {
            name: 'prefix',
            description: 'The prefix node of value',
            ty: 'ReactNode',
            default: '',
          },
          {
            name: 'suffix',
            description: 'The suffix node of value',
            ty: 'ReactNode',
            default: '',
          },
          {
            name: 'title',
            description: 'Display title',
            ty: 'ReactNode',
            default: '',
          },
          {
            name: 'value',
            description: 'Set target countdown time',
            ty: 'number',
            default: '',
          },
          {
            name: 'valueStyle',
            description: 'Set value section style',
            ty: 'CSSProperties',
            default: '',
          },
        ],
        events: [
          {
            name: 'onFinish',
            description: "Trigger when time's up",
            ty: '() => void',
            default: '',
          },
          {
            name: 'onChange',
            description: "Trigger when time's changing",
            ty: '(value: number) => void',
            default: '',
          },
        ],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'breadcrumb',
    props: [
      {
        name: 'itemRender',
        description: 'Custom item renderer',
        ty: '(route, params, routes, paths) => ReactNode',
        default: '',
      },
      {
        name: 'params',
        description: 'Routing parameters',
        ty: 'object',
        default: '',
      },
      {
        name: 'items',
        description: 'The routing stack information of router',
        ty: '[ItemType\\[\\]](#itemtype)',
        default: '',
      },
      {
        name: 'separator',
        description: 'Custom separator',
        ty: 'ReactNode',
        default: '`/`',
      },
      {
        name: 'className',
        description: 'The additional css class',
        ty: 'string',
        default: '',
      },
      {
        name: 'dropdownProps',
        description: 'The dropdown props',
        ty: '[Dropdown](/components/dropdown)',
        default: '',
      },
      {
        name: 'href',
        description: 'Target of hyperlink. Can not work with `path`',
        ty: 'string',
        default: '',
      },
      {
        name: 'path',
        description:
          'Connected path. Each path will connect with prev one. Can not work with `href`',
        ty: 'string',
        default: '',
      },
      {
        name: 'menu',
        description: 'The menu props',
        ty: '[MenuProps](/components/menu/#api)',
        default: '',
      },
      {
        name: 'title',
        description: 'item name',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'type',
        description: 'Mark as separator',
        ty: '`separator`',
        default: '',
      },
      {
        name: 'separator',
        description: 'Custom separator',
        ty: 'ReactNode',
        default: '`/`',
      },
    ],
    events: [
      {
        name: 'onClick',
        description: 'Set the handler to handle click event',
        ty: '(e:MouseEvent) => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'modal',
    props: [
      {
        name: 'afterClose',
        description: 'Specify a function that will be called when modal is closed completely',
        ty: 'function',
        default: '',
      },
      {
        name: 'classNames',
        description: "Config Modal build-in module's className",
        ty: '[Record<SemanticDOM, string>](#semantic-dom)',
        default: '',
      },
      {
        name: 'styles',
        description: "Config Modal build-in module's style",
        ty: '[Record<SemanticDOM, CSSProperties>](#semantic-dom)',
        default: '',
      },
      {
        name: 'cancelButtonProps',
        description: 'The cancel button props',
        ty: '[ButtonProps](/components/button/#api)',
        default: '',
      },
      {
        name: 'cancelText',
        description: 'Text of the Cancel button',
        ty: 'ReactNode',
        default: '`Cancel`',
      },
      {
        name: 'centered',
        description: 'Centered Modal',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'closable',
        description: 'Whether a close (x) button is visible on top right or not',
        ty: 'boolean \\',
        default: '{ closeIcon?: React.ReactNode; disabled?: boolean; }',
      },
      {
        name: 'closeIcon',
        description:
          'Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false`',
        ty: 'ReactNode',
        default: '&lt;CloseOutlined />',
      },
      {
        name: 'confirmLoading',
        description: 'Whether to apply loading visual effect for OK button or not',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'destroyOnClose',
        description: 'Whether to unmount child components on onClose',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'focusTriggerAfterClose',
        description: 'Whether need to focus trigger element after dialog is closed',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'footer',
        description: "Footer content, set as `footer={null}` when you don't need default buttons",
        ty: 'React.ReactNode \\',
        default:
          '((params:[footerRenderParams](/components/modal#footerrenderparams))=> React.ReactNode)',
      },
      {
        name: 'forceRender',
        description: 'Force render Modal',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'getContainer',
        description: 'The mounted node for Modal but still display at fullscreen',
        ty: 'HTMLElement \\',
        default: '() => HTMLElement \\',
      },
      {
        name: 'keyboard',
        description: 'Whether support press esc to close',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'mask',
        description: 'Whether show mask or not',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'maskClosable',
        description:
          'Whether to close the modal dialog when the mask (area outside the modal) is clicked',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'modalRender',
        description: 'Custom modal content render',
        ty: '(node: ReactNode) => ReactNode',
        default: '',
      },
      {
        name: 'okButtonProps',
        description: 'The ok button props',
        ty: '[ButtonProps](/components/button/#api)',
        default: '',
      },
      {
        name: 'okText',
        description: 'Text of the OK button',
        ty: 'ReactNode',
        default: '`OK`',
      },
      {
        name: 'okType',
        description: 'Button `type` of the OK button',
        ty: 'string',
        default: '`primary`',
      },
      {
        name: 'style',
        description: 'Style of floating layer, typically used at least for adjusting the position',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'loading',
        description: 'Show the skeleton',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'title',
        description: "The modal dialog's title",
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'open',
        description: 'Whether the modal dialog is visible or not',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'width',
        description: 'Width of the modal dialog',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'wrapClassName',
        description: 'The class name of the container of the modal dialog',
        ty: 'string',
        default: '',
      },
      {
        name: 'zIndex',
        description: 'The `z-index` of the Modal',
        ty: 'number',
        default: '1000',
      },
      {
        name: 'afterOpenChange',
        description: 'Callback when the animation ends when Modal is turned on and off',
        ty: '(open: boolean) => void',
        default: '',
      },
      {
        name: 'afterClose',
        description: 'Specify a function that will be called when modal is closed completely',
        ty: 'function',
        default: '',
      },
      {
        name: 'autoFocusButton',
        description: 'Specify which button to autofocus',
        ty: 'null \\',
        default: '`ok` \\',
      },
      {
        name: 'cancelButtonProps',
        description: 'The cancel button props',
        ty: '[ButtonProps](/components/button/#api)',
        default: '',
      },
      {
        name: 'cancelText',
        description: 'Text of the Cancel button with Modal.confirm',
        ty: 'string',
        default: '`Cancel`',
      },
      {
        name: 'centered',
        description: 'Centered Modal',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'className',
        description: 'The className of container',
        ty: 'string',
        default: '',
      },
      {
        name: 'closable',
        description:
          'Whether a close (x) button is visible on top right of the confirm dialog or not',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'closeIcon',
        description: 'Custom close icon',
        ty: 'ReactNode',
        default: 'undefined',
      },
      {
        name: 'content',
        description: 'Content',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'footer',
        description: "Footer content, set as `footer: null` when you don't need default buttons",
        ty: 'React.ReactNode \\',
        default:
          '((params:[footerRenderParams](/components/modal#footerrenderparams))=> React.ReactNode)',
      },
      {
        name: 'getContainer',
        description: 'Return the mount node for Modal',
        ty: 'HTMLElement \\',
        default: '() => HTMLElement \\',
      },
      {
        name: 'icon',
        description: 'Custom icon',
        ty: 'ReactNode',
        default: '&lt;ExclamationCircleFilled />',
      },
      {
        name: 'keyboard',
        description: 'Whether support press esc to close',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'mask',
        description: 'Whether show mask or not.',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'maskClosable',
        description:
          'Whether to close the modal dialog when the mask (area outside the modal) is clicked',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'okButtonProps',
        description: 'The ok button props',
        ty: '[ButtonProps](/components/button/#api)',
        default: '',
      },
      {
        name: 'okText',
        description: 'Text of the OK button',
        ty: 'string',
        default: '`OK`',
      },
      {
        name: 'okType',
        description: 'Button `type` of the OK button',
        ty: 'string',
        default: '`primary`',
      },
      {
        name: 'style',
        description: 'Style of floating layer, typically used at least for adjusting the position',
        ty: 'CSSProperties',
        default: '',
      },
      {
        name: 'title',
        description: 'Title',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'width',
        description: 'Width of the modal dialog',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'wrapClassName',
        description: 'The class name of the container of the modal dialog',
        ty: 'string',
        default: '',
      },
      {
        name: 'zIndex',
        description: 'The `z-index` of the Modal',
        ty: 'number',
        default: '1000',
      },
      {
        name: 'success',
        description: 'info',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onCancel',
        description:
          'Specify a function that will be called when a user clicks mask, close button on top right or Cancel button',
        ty: 'function(e)',
        default: '',
      },
      {
        name: 'onOk',
        description: 'Specify a function that will be called when a user clicks the OK button',
        ty: 'function(e)',
        default: '',
      },
      {
        name: 'onCancel',
        description:
          'Click to onCancel the callback, the parameter is the closing function, if it returns a promise, resolve means normal closing, reject means not closing',
        ty: 'function(close)',
        default: '',
      },
      {
        name: 'onOk',
        description:
          'Click to onOk the callback, the parameter is the closing function, if it returns a promise, resolve means normal closing, reject means not closing',
        ty: 'function(close)',
        default: '',
      },
    ],
    methods: [],
    children: [
      {
        name: 'footerRenderParams',
        props: [
          {
            name: 'originNode',
            description: 'default node',
            ty: '',
            default: '',
          },
          {
            name: 'extra',
            description: 'extended options',
            ty: '',
            default: '',
          },
        ],
        events: [],
        methods: [],
        children: [],
      },
    ],
  },
  {
    name: 'space',
    props: [
      {
        name: 'align',
        description: 'Align items',
        ty: '`start` \\',
        default: '`end` \\',
      },
      {
        name: 'classNames',
        description: 'Semantic className',
        ty: '[Record<SemanticDOM, string>](#semantic-dom)',
        default: '',
      },
      {
        name: 'direction',
        description: 'The space direction',
        ty: '`vertical` \\',
        default: '`horizontal`',
      },
      {
        name: 'size',
        description: 'The space size',
        ty: '[Size](#size) \\',
        default: '[Size\\[\\]](#size)',
      },
      {
        name: 'split',
        description: 'Set split',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'styles',
        description: 'Semantic style',
        ty: '[Record<SemanticDOM, CSSProperties>](#semantic-dom)',
        default: '',
      },
      {
        name: 'wrap',
        description: 'Auto wrap line, when `horizontal` effective',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'block',
        description: "Option to fit width to its parent\\'s width",
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'direction',
        description: 'Set direction of layout',
        ty: '`vertical` \\',
        default: '`horizontal`',
      },
      {
        name: 'size',
        description: 'Set child component size',
        ty: '`large` \\',
        default: '`middle` \\',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'color-picker',
    props: [
      {
        name: ':--',
        description: ':--',
        ty: ':--',
        default: ':--',
      },
      {
        name: 'allowClear',
        description: 'Allow clearing color selected',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'arrow',
        description: 'Configuration for popup arrow',
        ty: '`boolean \\',
        default: '{ pointAtCenter: boolean }`',
      },
      {
        name: 'children',
        description: 'Trigger of ColorPicker',
        ty: 'React.ReactNode',
        default: '',
      },
      {
        name: 'defaultValue',
        description: 'Default value of color',
        ty: 'string \\',
        default: '`Color`',
      },
      {
        name: 'defaultFormat',
        description: 'Default format of color',
        ty: '`rgb` \\',
        default: '`hex` \\',
      },
      {
        name: 'disabled',
        description: 'Disable ColorPicker',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'disabledAlpha',
        description: 'Disable Alpha',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'destroyTooltipOnHide',
        description: 'Whether destroy popover when hidden',
        ty: '`boolean`',
        default: 'false',
      },
      {
        name: 'format',
        description: 'Format of color',
        ty: '`rgb` \\',
        default: '`hex` \\',
      },
      {
        name: 'mode',
        description: 'Configure single or gradient color',
        ty: "`('single' \\",
        default: "'gradient')[]`",
      },
      {
        name: 'open',
        description: 'Whether to show popup',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'presets',
        description: 'Preset colors',
        ty: '`{ label: ReactNode, colors: Array<string \\',
        default: 'Color>, defaultOpen?: boolean }[]`',
      },
      {
        name: 'placement',
        description: 'Placement of popup',
        ty: 'The design of the [placement](/components/tooltip/#api) parameter is the same as the `Tooltips` component.',
        default: '`bottomLeft`',
      },
      {
        name: 'panelRender',
        description: 'Custom Render Panel',
        ty: '`(panel: React.ReactNode, extra: { components: { Picker: FC; Presets: FC } }) => React.ReactNode`',
        default: '',
      },
      {
        name: 'showText',
        description: 'Show color text',
        ty: 'boolean \\',
        default: '`(color: Color) => React.ReactNode`',
      },
      {
        name: 'size',
        description: 'Setting the trigger size',
        ty: '`large` \\',
        default: '`middle` \\',
      },
      {
        name: 'trigger',
        description: 'ColorPicker trigger mode',
        ty: '`hover` \\',
        default: '`click`',
      },
      {
        name: 'value',
        description: 'Value of color',
        ty: 'string \\',
        default: '`Color`',
      },
      {
        name: ':--',
        description: ':--',
        ty: '',
        default: '',
      },
      {
        name: 'toCssString',
        description: 'Convert to CSS support format',
        ty: '',
        default: '',
      },
      {
        name: 'toHex',
        description: 'Convert to `hex` format characters, the return type like: `1677ff`',
        ty: '',
        default: '',
      },
      {
        name: 'toHexString',
        description: 'Convert to `hex` format color string, the return type like: `#1677ff`',
        ty: '',
        default: '',
      },
      {
        name: 'toHsb',
        description: 'Convert to `hsb` object',
        ty: '',
        default: '',
      },
      {
        name: 'toHsbString',
        description:
          'Convert to `hsb` format color string, the return type like: `hsb(215, 91%, 100%)`',
        ty: '',
        default: '',
      },
      {
        name: 'toRgb',
        description: 'Convert to `rgb` object',
        ty: '',
        default: '',
      },
      {
        name: 'toRgbString',
        description:
          'Convert to `rgb` format color string, the return type like: `rgb(22, 119, 255)`',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Callback when `value` is changed',
        ty: '`(value: Color, css: string) => void`',
        default: '',
      },
      {
        name: 'onChangeComplete',
        description:
          'Called when color pick ends. Will not change the display color when `value` controlled by `onChangeComplete`',
        ty: '`(value: Color) => void`',
        default: '',
      },
      {
        name: 'onFormatChange',
        description: 'Callback when `format` is changed',
        ty: "`(format: 'hex' \\",
        default: "'rgb' \\",
      },
      {
        name: 'onOpenChange',
        description: 'Callback when `open` is changed',
        ty: '`(open: boolean) => void`',
        default: '',
      },
      {
        name: 'onClear',
        description: 'Called when clear',
        ty: '`() => void`',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'timeline',
    props: [
      {
        name: 'mode',
        description:
          'By sending `alternate` the timeline will distribute the nodes to the left and right',
        ty: '`left` \\',
        default: '`alternate` \\',
      },
      {
        name: 'pending',
        description: "Set the last ghost node's existence or its content",
        ty: '',
        default: '',
      },
      {
        name: 'pendingDot',
        description: 'Set the dot of the last ghost node when pending is true',
        ty: '',
        default: '',
      },
      {
        name: 'reverse',
        description: 'Whether reverse nodes or not',
        ty: '',
        default: '',
      },
      {
        name: 'items',
        description: 'Each node of timeline',
        ty: '',
        default: '',
      },
      {
        name: 'color',
        description:
          "Set the circle's color to `blue`, `red`, `green`, `gray` or other custom colors",
        ty: '',
        default: '',
      },
      {
        name: 'dot',
        description: 'Customize timeline dot',
        ty: '',
        default: '',
      },
      {
        name: 'label',
        description: 'Set the label',
        ty: '',
        default: '',
      },
      {
        name: 'children',
        description: 'Set the content',
        ty: '',
        default: '',
      },
      {
        name: 'position',
        description: 'Customize node position',
        ty: '`left` \\',
        default: '`right`',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'flex',
    props: [
      {
        name: 'vertical',
        description: 'Is direction of the flex vertical, use `flex-direction: column`',
        ty: 'boolean',
        default: '`false`',
      },
      {
        name: 'wrap',
        description: 'Set whether the element is displayed in a single line or in multiple lines',
        ty: '[flex-wrap](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap) \\',
        default: 'boolean',
      },
      {
        name: 'justify',
        description: 'Sets the alignment of elements in the direction of the main axis',
        ty: '[justify-content](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)',
        default: 'normal',
      },
      {
        name: 'align',
        description: 'Sets the alignment of elements in the direction of the cross axis',
        ty: '[align-items](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)',
        default: 'normal',
      },
      {
        name: 'flex',
        description: 'flex CSS shorthand properties',
        ty: '[flex](https://developer.mozilla.org/en-US/docs/Web/CSS/flex)',
        default: 'normal',
      },
      {
        name: 'gap',
        description: 'Sets the gap between grids',
        ty: '`small` \\',
        default: '`middle` \\',
      },
      {
        name: 'component',
        description: 'custom element type',
        ty: 'React.ComponentType',
        default: '`div`',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'tag',
    props: [
      {
        name: 'closeIcon',
        description:
          'Custom close icon. 5.7.0: close button will be hidden when setting to `null` or `false`',
        ty: 'ReactNode',
        default: 'false',
      },
      {
        name: 'color',
        description: 'Color of the Tag',
        ty: 'string',
        default: '',
      },
      {
        name: 'icon',
        description: 'Set the icon of tag',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'bordered',
        description: 'Whether has border style',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'checked',
        description: 'Checked status of Tag',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onClose',
        description: 'Callback executed when tag is closed',
        ty: '(e: React.MouseEvent<HTMLElement, MouseEvent>) => void',
        default: '',
      },
      {
        name: 'onChange',
        description: 'Callback executed when Tag is checked/unchecked',
        ty: '',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'float-button',
    props: [
      {
        name: 'icon',
        description: 'Set the icon component of button',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'description',
        description: 'Text and other',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'tooltip',
        description: 'The text shown in the tooltip',
        ty: 'ReactNode \\',
        default: '() => ReactNode',
      },
      {
        name: 'type',
        description: 'Setting button type',
        ty: '`default` \\',
        default: '`primary`',
      },
      {
        name: 'shape',
        description: 'Setting button shape',
        ty: '`circle` \\',
        default: '`square`',
      },
      {
        name: 'href',
        description: 'The target of hyperlink',
        ty: 'string',
        default: '',
      },
      {
        name: 'target',
        description: 'Specifies where to display the linked URL',
        ty: 'string',
        default: '',
      },
      {
        name: 'htmlType',
        description:
          'Set the original html `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#type)',
        ty: '`submit` \\',
        default: '`reset` \\',
      },
      {
        name: 'badge',
        description:
          'Attach Badge to FloatButton. `status` and other props related are not supported.',
        ty: '[BadgeProps](/components/badge#api)',
        default: '',
      },
      {
        name: 'shape',
        description: 'Setting button shape of children',
        ty: '`circle` \\',
        default: '`square`',
      },
      {
        name: 'trigger',
        description: 'Which action can trigger menu open/close',
        ty: '`click` \\',
        default: '`hover`',
      },
      {
        name: 'open',
        description: 'Whether the menu is visible or not, use it with trigger',
        ty: 'boolean',
        default: '',
      },
      {
        name: 'closeIcon',
        description: 'Customize close button icon',
        ty: 'React.ReactNode',
        default: '`<CloseOutlined />`',
      },
      {
        name: 'placement',
        description: 'Customize menu animation placement',
        ty: '`top` \\',
        default: '`left` \\',
      },
      {
        name: 'duration',
        description: 'Time to return to top（ms）',
        ty: 'number',
        default: '450',
      },
      {
        name: 'target',
        description: 'Specifies the scrollable area dom node',
        ty: '() => HTMLElement',
        default: '() => window',
      },
      {
        name: 'visibilityHeight',
        description: 'The BackTop button will not show until the scroll height reaches this value',
        ty: 'number',
        default: '400',
      },
    ],
    events: [
      {
        name: 'onClick',
        description: 'Set the handler to handle `click` event',
        ty: '(event) => void',
        default: '',
      },
      {
        name: 'onOpenChange',
        description: 'Callback executed when active menu is changed, use it with trigger',
        ty: '(open: boolean) => void',
        default: '',
      },
      {
        name: 'onClick',
        description: 'Set the handler to handle `click` event (only work in `Menu mode`)',
        ty: '(event) => void',
        default: '',
      },
      {
        name: 'onClick',
        description: 'A callback function, which can be executed when you click the button',
        ty: '() => void',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'affix',
    props: [
      {
        name: 'offsetBottom',
        description: 'Offset from the bottom of the viewport (in pixels)',
        ty: '',
        default: '',
      },
      {
        name: 'offsetTop',
        description: 'Offset from the top of the viewport (in pixels)',
        ty: '',
        default: '',
      },
      {
        name: 'target',
        description: 'Specifies the scrollable area DOM node',
        ty: '',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description: 'Callback for when Affix state is changed',
        ty: '',
        default: '',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'upload',
    props: [
      {
        name: 'accept',
        description:
          'File types that can be accepted. See [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)',
        ty: 'string',
        default: '',
      },
      {
        name: 'action',
        description: 'Uploading URL',
        ty: 'string \\',
        default: '(file) => Promise&lt;string>',
      },
      {
        name: 'beforeUpload',
        description:
          'Hook function which will be executed before uploading. Uploading will be stopped with `false` or a rejected Promise returned. When returned value is `Upload.LIST_IGNORE`, the list of files that have been uploaded will ignore it. **Warning：this function is not supported in IE9**',
        ty: '(file, fileList) => boolean \\',
        default: 'Promise&lt;File> \\',
      },
      {
        name: 'customRequest',
        description:
          'Override for the default xhr behavior allowing for additional customization and the ability to implement your own XMLHttpRequest',
        ty: 'function',
        default: '',
      },
      {
        name: 'data',
        description: 'Uploading extra params or function which can return uploading extra params',
        ty: 'object \\',
        default: '(file) => object \\',
      },
      {
        name: 'defaultFileList',
        description: 'Default list of files that have been uploaded',
        ty: 'object\\[]',
        default: '',
      },
      {
        name: 'directory',
        description:
          'Support upload whole directory ([caniuse](https://caniuse.com/#feat=input-file-directory))',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'disabled',
        description: 'Disable upload button',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'fileList',
        description:
          'List of files that have been uploaded (controlled). Here is a common issue [#2423](https://github.com/ant-design/ant-design/issues/2423) when using it',
        ty: '[UploadFile](#uploadfile)\\[]',
        default: '',
      },
      {
        name: 'headers',
        description: 'Set request headers, valid above IE10',
        ty: 'object',
        default: '',
      },
      {
        name: 'iconRender',
        description: 'Custom show icon',
        ty: '(file: UploadFile, listType?: UploadListType) => ReactNode',
        default: '',
      },
      {
        name: 'isImageUrl',
        description: 'Customize if render &lt;img /> in thumbnail',
        ty: '(file: UploadFile) => boolean',
        default:
          '[(inside implementation)](https://github.com/ant-design/ant-design/blob/4ad5830eecfb87471cd8ac588c5d992862b70770/components/upload/utils.tsx#L47-L68)',
      },
      {
        name: 'itemRender',
        description: 'Custom item of uploadList',
        ty: '(originNode: ReactElement, file: UploadFile, fileList: object\\[], actions: { download: function, preview: function, remove: function }) => React.ReactNode',
        default: '',
      },
      {
        name: 'listType',
        description:
          'Built-in stylesheets, support for four types: `text`, `picture`, `picture-card` or `picture-circle`',
        ty: 'string',
        default: '`text`',
      },
      {
        name: 'maxCount',
        description:
          'Limit the number of uploaded files. Will replace current one when `maxCount` is `1`',
        ty: 'number',
        default: '',
      },
      {
        name: 'method',
        description: 'The http method of upload request',
        ty: 'string',
        default: '`post`',
      },
      {
        name: 'multiple',
        description:
          'Whether to support selected multiple files. `IE10+` supported. You can select multiple files with CTRL holding down while multiple is set to be true',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'name',
        description: 'The name of uploading file',
        ty: 'string',
        default: '`file`',
      },
      {
        name: 'openFileDialogOnClick',
        description: 'Click open file dialog',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'previewFile',
        description: 'Customize preview file logic',
        ty: '(file: File \\',
        default: 'Blob) => Promise&lt;dataURL: string>',
      },
      {
        name: 'progress',
        description: 'Custom progress bar',
        ty: '[ProgressProps](/components/progress/#api) (support `type="line"` only)',
        default: '{ strokeWidth: 2, showInfo: false }',
      },
      {
        name: 'showUploadList',
        description:
          'Whether to show default upload list, could be an object to specify `extra`, `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` and `downloadIcon` individually',
        ty: 'boolean \\',
        default: '{ extra?: ReactNode \\',
      },
      {
        name: 'withCredentials',
        description: 'The ajax upload with cookie sent',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'crossOrigin',
        description: 'CORS settings attributes',
        ty: "`'anonymous'` \\",
        default: "`'use-credentials'` \\",
      },
      {
        name: 'name',
        description: 'File name',
        ty: 'string',
        default: '',
      },
      {
        name: 'percent',
        description: 'Upload progress percent',
        ty: 'number',
        default: '',
      },
      {
        name: 'status',
        description: 'Upload status. Show different style when configured',
        ty: '`error` \\',
        default: '`done` \\',
      },
      {
        name: 'thumbUrl',
        description: 'Thumb image url',
        ty: 'string',
        default: '',
      },
      {
        name: 'uid',
        description: 'unique id. Will auto-generate when not provided',
        ty: 'string',
        default: '',
      },
      {
        name: 'url',
        description: 'Download url',
        ty: 'string',
        default: '',
      },
    ],
    events: [
      {
        name: 'onChange',
        description:
          'A callback function, can be executed when uploading state is changing. It will trigger by every uploading phase. see [onChange](#onchange)',
        ty: 'function',
        default: '',
      },
      {
        name: 'onDrop',
        description:
          'A callback function executed when files are dragged and dropped into the upload area',
        ty: '(event: React.DragEvent) => void',
        default: '',
      },
      {
        name: 'onDownload',
        description:
          'Click the method to download the file, pass the method to perform the method logic, and do not pass the default jump to the new TAB',
        ty: 'function(file): void',
        default: '(Jump to new TAB)',
      },
      {
        name: 'onPreview',
        description:
          'A callback function, will be executed when the file link or preview icon is clicked',
        ty: 'function(file)',
        default: '',
      },
      {
        name: 'onRemove',
        description:
          'A callback function, will be executed when removing file button is clicked, remove event will be prevented when the return value is false or a Promise which resolve(false) or reject',
        ty: 'function(file): boolean \\',
        default: 'Promise',
      },
    ],
    methods: [],
    children: [],
  },
  {
    name: 'grid',
    props: [
      {
        name: 'align',
        description: 'Vertical alignment',
        ty: '`top` \\',
        default: '`middle` \\',
      },
      {
        name: 'gutter',
        description:
          'Spacing between grids, could be a number or a object like { xs: 8, sm: 16, md: 24}. Or you can use array to make horizontal and vertical spacing work at the same time `[horizontal, vertical]`',
        ty: 'number \\',
        default: 'object \\',
      },
      {
        name: 'justify',
        description: 'Horizontal arrangement',
        ty: '`start` \\',
        default: '`end` \\',
      },
      {
        name: 'wrap',
        description: 'Auto wrap line',
        ty: 'boolean',
        default: 'true',
      },
      {
        name: 'flex',
        description: 'Flex layout style',
        ty: 'string \\',
        default: 'number',
      },
      {
        name: 'offset',
        description: 'The number of cells to offset Col from the left',
        ty: 'number',
        default: '0',
      },
      {
        name: 'order',
        description: 'Raster order',
        ty: 'number',
        default: '0',
      },
      {
        name: 'pull',
        description: 'The number of cells that raster is moved to the left',
        ty: 'number',
        default: '0',
      },
      {
        name: 'push',
        description: 'The number of cells that raster is moved to the right',
        ty: 'number',
        default: '0',
      },
      {
        name: 'span',
        description: 'Raster number of cells to occupy, 0 corresponds to `display: none`',
        ty: 'number',
        default: 'none',
      },
      {
        name: 'xs',
        description:
          '`screen < 576px` and also default setting, could be a `span` value or an object containing above props',
        ty: 'number \\',
        default: 'object',
      },
      {
        name: 'sm',
        description:
          '`screen ≥ 576px`, could be a `span` value or an object containing above props',
        ty: 'number \\',
        default: 'object',
      },
      {
        name: 'md',
        description:
          '`screen ≥ 768px`, could be a `span` value or an object containing above props',
        ty: 'number \\',
        default: 'object',
      },
      {
        name: 'lg',
        description:
          '`screen ≥ 992px`, could be a `span` value or an object containing above props',
        ty: 'number \\',
        default: 'object',
      },
      {
        name: 'xl',
        description:
          '`screen ≥ 1200px`, could be a `span` value or an object containing above props',
        ty: 'number \\',
        default: 'object',
      },
      {
        name: 'xxl',
        description:
          '`screen ≥ 1600px`, could be a `span` value or an object containing above props',
        ty: 'number \\',
        default: 'object',
      },
      {
        name: 'SM',
        description: 'MD',
        ty: '',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
  {
    name: 'badge',
    props: [
      {
        name: 'color',
        description: 'Customize Badge dot color',
        ty: 'string',
        default: '',
      },
      {
        name: 'count',
        description: 'Number to show in badge',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'classNames',
        description: 'Semantic DOM class',
        ty: '[Record<SemanticDOM, string>](#semantic-dom)',
        default: '',
      },
      {
        name: 'dot',
        description: 'Whether to display a red dot instead of `count`',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'offset',
        description: 'Set offset of the badge dot',
        ty: '\\[number, number]',
        default: '',
      },
      {
        name: 'overflowCount',
        description: 'Max count to show',
        ty: 'number',
        default: '99',
      },
      {
        name: 'showZero',
        description: 'Whether to show badge when `count` is zero',
        ty: 'boolean',
        default: 'false',
      },
      {
        name: 'size',
        description: 'If `count` is set, `size` sets the size of badge',
        ty: '`default` \\',
        default: '`small`',
      },
      {
        name: 'status',
        description: 'Set Badge as a status dot',
        ty: '`success` \\',
        default: '`processing` \\',
      },
      {
        name: 'styles',
        description: 'Semantic DOM style',
        ty: '[Record<SemanticDOM, CSSProperties>](#semantic-dom)',
        default: '',
      },
      {
        name: 'text',
        description: 'If `status` is set, `text` sets the display text of the status `dot`',
        ty: 'ReactNode',
        default: '',
      },
      {
        name: 'title',
        description: 'Text to show when hovering over the badge',
        ty: 'string',
        default: '',
      },
      {
        name: 'color',
        description: 'Customize Ribbon color',
        ty: 'string',
        default: '',
      },
      {
        name: 'placement',
        description:
          'The placement of the Ribbon, `start` and `end` follow text direction (RTL or LTR)',
        ty: '`start` \\',
        default: '`end`',
      },
      {
        name: 'text',
        description: 'Content inside the Ribbon',
        ty: 'ReactNode',
        default: '',
      },
    ],
    events: [],
    methods: [],
    children: [],
  },
];

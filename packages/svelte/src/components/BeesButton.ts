/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@bees-ui/core';


interface BeesButtonProps {
  
  /**  */
  type?: Components.BeesButton["type"]
  
  /**  */
  size?: Components.BeesButton["size"]
  
  /**  */
  loading?: Components.BeesButton["loading"]
  
  /**  */
  disabled?: Components.BeesButton["disabled"]
  
  /**  */
  ghost?: Components.BeesButton["ghost"]
  
  /**  */
  block?: Components.BeesButton["block"]
  
  /**  */
  danger?: Components.BeesButton["danger"]
  
  /**  */
  shape?: Components.BeesButton["shape"]
  
  /**  */
  prefixCls?: Components.BeesButton["prefixCls"]
  
  /**  */
  htmlType?: Components.BeesButton["htmlType"]
  
  /**  */
  icon?: Components.BeesButton["icon"]
  
  /**  */
  target?: Components.BeesButton["target"]
  
  /**  */
  href?: Components.BeesButton["href"]
  
  /**  */
  beeTitle?: Components.BeesButton["beeTitle"]
}

interface BeesButtonEvents {
  
  /**  */
  beeClick: Parameters<JSX.BeesButton["onBeeClick"]>[0]
  
  /**  */
  beeMousedown: Parameters<JSX.BeesButton["onBeeMousedown"]>[0]
}

interface BeesButtonSlots {
  default: any
}
  
/* generated by Svelte v4.2.7 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import "svelte/internal/disclose-version";
import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let bees_button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[17], null);

	return {
		c() {
			bees_button = element("bees-button");
			if (default_slot) default_slot.c();
			set_custom_element_data(bees_button, "type", /*type*/ ctx[0]);
			set_custom_element_data(bees_button, "size", /*size*/ ctx[1]);
			set_custom_element_data(bees_button, "loading", /*loading*/ ctx[2]);
			set_custom_element_data(bees_button, "disabled", /*disabled*/ ctx[3]);
			set_custom_element_data(bees_button, "ghost", /*ghost*/ ctx[4]);
			set_custom_element_data(bees_button, "block", /*block*/ ctx[5]);
			set_custom_element_data(bees_button, "danger", /*danger*/ ctx[6]);
			set_custom_element_data(bees_button, "shape", /*shape*/ ctx[7]);
			set_custom_element_data(bees_button, "prefix-cls", /*prefixCls*/ ctx[8]);
			set_custom_element_data(bees_button, "html-type", /*htmlType*/ ctx[9]);
			set_custom_element_data(bees_button, "icon", /*icon*/ ctx[10]);
			set_custom_element_data(bees_button, "target", /*target*/ ctx[11]);
			set_custom_element_data(bees_button, "href", /*href*/ ctx[12]);
			set_custom_element_data(bees_button, "bee-title", /*beeTitle*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, bees_button, anchor);

			if (default_slot) {
				default_slot.m(bees_button, null);
			}

			/*bees_button_binding*/ ctx[19](bees_button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(bees_button, "beeClick", /*onEvent*/ ctx[15]),
					listen(bees_button, "beeMousedown", /*onEvent*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 131072)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[17],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[17])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[17], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*type*/ 1) {
				set_custom_element_data(bees_button, "type", /*type*/ ctx[0]);
			}

			if (!current || dirty & /*size*/ 2) {
				set_custom_element_data(bees_button, "size", /*size*/ ctx[1]);
			}

			if (!current || dirty & /*loading*/ 4) {
				set_custom_element_data(bees_button, "loading", /*loading*/ ctx[2]);
			}

			if (!current || dirty & /*disabled*/ 8) {
				set_custom_element_data(bees_button, "disabled", /*disabled*/ ctx[3]);
			}

			if (!current || dirty & /*ghost*/ 16) {
				set_custom_element_data(bees_button, "ghost", /*ghost*/ ctx[4]);
			}

			if (!current || dirty & /*block*/ 32) {
				set_custom_element_data(bees_button, "block", /*block*/ ctx[5]);
			}

			if (!current || dirty & /*danger*/ 64) {
				set_custom_element_data(bees_button, "danger", /*danger*/ ctx[6]);
			}

			if (!current || dirty & /*shape*/ 128) {
				set_custom_element_data(bees_button, "shape", /*shape*/ ctx[7]);
			}

			if (!current || dirty & /*prefixCls*/ 256) {
				set_custom_element_data(bees_button, "prefix-cls", /*prefixCls*/ ctx[8]);
			}

			if (!current || dirty & /*htmlType*/ 512) {
				set_custom_element_data(bees_button, "html-type", /*htmlType*/ ctx[9]);
			}

			if (!current || dirty & /*icon*/ 1024) {
				set_custom_element_data(bees_button, "icon", /*icon*/ ctx[10]);
			}

			if (!current || dirty & /*target*/ 2048) {
				set_custom_element_data(bees_button, "target", /*target*/ ctx[11]);
			}

			if (!current || dirty & /*href*/ 4096) {
				set_custom_element_data(bees_button, "href", /*href*/ ctx[12]);
			}

			if (!current || dirty & /*beeTitle*/ 8192) {
				set_custom_element_data(bees_button, "bee-title", /*beeTitle*/ ctx[13]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(bees_button);
			}

			if (default_slot) default_slot.d(detaching);
			/*bees_button_binding*/ ctx[19](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { type = undefined } = $$props;
	let { size = undefined } = $$props;
	let { loading = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { ghost = undefined } = $$props;
	let { block = undefined } = $$props;
	let { danger = undefined } = $$props;
	let { shape = undefined } = $$props;
	let { prefixCls = undefined } = $$props;
	let { htmlType = undefined } = $$props;
	let { icon = undefined } = $$props;
	let { target = undefined } = $$props;
	let { href = undefined } = $$props;
	let { beeTitle = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(14, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function bees_button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(14, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('size' in $$props) $$invalidate(1, size = $$props.size);
		if ('loading' in $$props) $$invalidate(2, loading = $$props.loading);
		if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ('ghost' in $$props) $$invalidate(4, ghost = $$props.ghost);
		if ('block' in $$props) $$invalidate(5, block = $$props.block);
		if ('danger' in $$props) $$invalidate(6, danger = $$props.danger);
		if ('shape' in $$props) $$invalidate(7, shape = $$props.shape);
		if ('prefixCls' in $$props) $$invalidate(8, prefixCls = $$props.prefixCls);
		if ('htmlType' in $$props) $$invalidate(9, htmlType = $$props.htmlType);
		if ('icon' in $$props) $$invalidate(10, icon = $$props.icon);
		if ('target' in $$props) $$invalidate(11, target = $$props.target);
		if ('href' in $$props) $$invalidate(12, href = $$props.href);
		if ('beeTitle' in $$props) $$invalidate(13, beeTitle = $$props.beeTitle);
		if ('$$scope' in $$props) $$invalidate(17, $$scope = $$props.$$scope);
	};

	return [
		type,
		size,
		loading,
		disabled,
		ghost,
		block,
		danger,
		shape,
		prefixCls,
		htmlType,
		icon,
		target,
		href,
		beeTitle,
		__ref,
		onEvent,
		getWebComponent,
		$$scope,
		slots,
		bees_button_binding
	];
}

class BeesButton extends SvelteComponent {
  $$prop_def: BeesButtonProps;
  $$events_def: BeesButtonEvents;
  $$slot_def: BeesButtonSlots;

  $on<K extends keyof BeesButtonEvents>(type: K, callback: (e: BeesButtonEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<BeesButtonProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			type: 0,
			size: 1,
			loading: 2,
			disabled: 3,
			ghost: 4,
			block: 5,
			danger: 6,
			shape: 7,
			prefixCls: 8,
			htmlType: 9,
			icon: 10,
			target: 11,
			href: 12,
			beeTitle: 13,
			getWebComponent: 16
		});
	}

	get getWebComponent(): HTMLBeesButtonElement | undefined {
		return this.$$.ctx[16];
	}
}

export default BeesButton;
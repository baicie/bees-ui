/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@ikunorg/core';


interface IkunButtonProps {
  
  /** If `true`, the user cannot interact with the button. */
  disabled?: Components.IkunButton["disabled"]
  
  /**  */
  type?: Components.IkunButton["type"]
  
  /**  */
  size?: Components.IkunButton["size"]
  
  /**  */
  danger?: Components.IkunButton["danger"]
}

interface IkunButtonEvents {
  
  /**  */
  ikunFocus: Parameters<JSX.IkunButton["onIkunFocus"]>[0]
  
  /**  */
  ikunClick: Parameters<JSX.IkunButton["onIkunClick"]>[0]
}

interface IkunButtonSlots {
  default: any
}
  
/* generated by Svelte v4.2.7 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import "svelte/internal/disclose-version";
import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let ikun_button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[9].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);

	return {
		c() {
			ikun_button = element("ikun-button");
			if (default_slot) default_slot.c();
			set_custom_element_data(ikun_button, "disabled", /*disabled*/ ctx[0]);
			set_custom_element_data(ikun_button, "type", /*type*/ ctx[1]);
			set_custom_element_data(ikun_button, "size", /*size*/ ctx[2]);
			set_custom_element_data(ikun_button, "danger", /*danger*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, ikun_button, anchor);

			if (default_slot) {
				default_slot.m(ikun_button, null);
			}

			/*ikun_button_binding*/ ctx[10](ikun_button);
			current = true;

			if (!mounted) {
				dispose = [
					listen(ikun_button, "ikunFocus", /*onEvent*/ ctx[5]),
					listen(ikun_button, "ikunClick", /*onEvent*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[8],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*disabled*/ 1) {
				set_custom_element_data(ikun_button, "disabled", /*disabled*/ ctx[0]);
			}

			if (!current || dirty & /*type*/ 2) {
				set_custom_element_data(ikun_button, "type", /*type*/ ctx[1]);
			}

			if (!current || dirty & /*size*/ 4) {
				set_custom_element_data(ikun_button, "size", /*size*/ ctx[2]);
			}

			if (!current || dirty & /*danger*/ 8) {
				set_custom_element_data(ikun_button, "danger", /*danger*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(ikun_button);
			}

			if (default_slot) default_slot.d(detaching);
			/*ikun_button_binding*/ ctx[10](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { disabled = undefined } = $$props;
	let { type = undefined } = $$props;
	let { size = undefined } = $$props;
	let { danger = undefined } = $$props;
	const handleFous = (...args) => __ref.handleFous(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(4, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function ikun_button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(4, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('size' in $$props) $$invalidate(2, size = $$props.size);
		if ('danger' in $$props) $$invalidate(3, danger = $$props.danger);
		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
	};

	return [
		disabled,
		type,
		size,
		danger,
		__ref,
		onEvent,
		handleFous,
		getWebComponent,
		$$scope,
		slots,
		ikun_button_binding
	];
}

class IkunButton extends SvelteComponent {
  $$prop_def: IkunButtonProps;
  $$events_def: IkunButtonEvents;
  $$slot_def: IkunButtonSlots;

  $on<K extends keyof IkunButtonEvents>(type: K, callback: (e: IkunButtonEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<IkunButtonProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			disabled: 0,
			type: 1,
			size: 2,
			danger: 3,
			handleFous: 6,
			getWebComponent: 7
		});
	}

	
  /**  */
 get handleFous(): Components.IkunButton["handleFous"] {
		return this.$$.ctx[6];
	}

	get getWebComponent(): HTMLIkunButtonElement | undefined {
		return this.$$.ctx[7];
	}
}

export default IkunButton;